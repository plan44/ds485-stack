
/*
 This file is part of the digitalSTROM dsm-api library.

 Copyright (C) 2010 digitalSTROM.org, Schlieren, Switzerland

 digitalSTROM dsm-api library is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 digitalSTROM dsm-api library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with digitalSTROM dsm-api library. If not, see <http://www.gnu.org/licenses/>.
 
 NOTE: The dsm-api library and it's script bindings are unsupported interfaces and
 subject to change without further notice.
 
 */
 /*
 * DO NOT MANUALLY MODIFY! 
 *
 * THIS FILE IS AUTOGENERATED FROM THE dSM-API XML DEFINITIONS IN
 * dsm-api.xml.
 * Make any changes in the XML definition and regenerate this file.
 */
#ifndef DSM_API_CONST_H
#define DSM_API_CONST_H

#ifdef __cplusplus
extern "C" {
#endif

enum DsmApiMsgId {
    CLUSTER_INFO = 0x08,
    CLUSTER_PROPERTIES = 0x09,
    EVENT_GENERIC = 0xe0,
    ZONE_COUNT = 0x00,
    ZONE_INFO = 0x01,
    ZONE_MODIFY = 0x02,
    ZONE_DEVICE_COUNT = 0x03,
    ZONE_PROPERTIES = 0x04,
    ZONE_GROUP_MODIFY = 0x10,
    ZONE_GROUP_INFO = 0x11,
    ZONE_GROUP_PROPERTIES = 0x12,
    CONTROLLER_HEATING = 0x60,
    EVENT_HEATING_CONTROLLER_STATE = 0x6f,
    ZONE_GROUP_SCENE_INFO = 0x18,
    ZONE_GROUP_SCENE_PROPERTIES = 0x19,
    ZONE_GROUP_ACTION_REQUEST = 0x50,
    ZONE_GROUP_SENSOR_PUSH = 0x56,
    DEVICE_INFO = 0x20,
    DEVICE_STATE = 0x21,
    DEVICE_STATISTICS_REQUEST = 0x22,
    DEVICE_PROPERTIES = 0x23,
    DEVICE_BUTTON_INFO = 0x24,
    DEVICE_BINARY_INPUT = 0x26,
    DEVICE_GROUP_MEMBERSHIP_MODIFY = 0x25,
    TEST_TRANSMISSION_QUALITY = 0x41,
    TEST_DEVICE_PRESENCE = 0x42,
    DEVICE_ACTION_REQUEST = 0x51,
    DEVICE_CONFIG = 0x53,
    DEVICE_O_P_C_CONFIG = 0x57,
    DEVICE_O_P_C_TABLE = 0x58,
    DEVICE_SENSOR = 0x52,
    CIRCUIT_REMOVE_INACTIVE_DEVICES = 0x31,
    CIRCUIT_REMOVE_DEVICE = 0x35,
    EVENT_TEST_TRANSMISSION_QUALITY = 0x75,
    EVENT_TEST_DEVICE_PRESENCE = 0x7f,
    EVENT_DEVICE_ACCESSIBILITY = 0x71,
    EVENT_DEVICE_STATISTICS = 0x72,
    EVENT_DEVICE_ACTION = 0x73,
    EVENT_DEVICE_DIRECT_ACTION = 0x7a,
    EVENT_DEVICE_LOCAL_ACTION = 0x76,
    EVENT_DEVICE_CONFIG = 0x74,
    EVENT_DEVICE_SENSOR = 0x7d,
    EVENT_DEVICE_GIVE_UP = 0x78,
    EVENT_DEVICE_MODEL_CHANGED = 0x79,
    CIRCUIT_PING_DEVICES = 0x30,
    CIRCUIT_ENERGY_METER_VALUE = 0x34,
    CIRCUIT_CURRENT_METER_VALUE = 0x36,
    DSM_INFO = 0x90,
    DSM_PROPERTIES = 0x91,
    DSM_STATE = 0x92,
    DSM_CONFIG = 0xf0,
    USER_PROTOBUF_MESSAGE_REQUEST = 0xd0,
    DSM_STATISTICS = 0xf2,
    DSM_REBOOT = 0xf4,
    DSM_FACTORY_RESET = 0xf5,
    IMAGE_MAINTENANCE = 0xfe,
    IMAGE_TRANSFER = 0xff,
    EVENT_DSM_STATE_CHANGE = 0x80,
    EVENT_DSM_ERROR = 0x81,
    EVENT_DSM_DONE = 0x82,
    ZONE_GROUP_DSLINK_SEND = 0x54,
    DEVICE_DSLINK_SEND = 0x55,
    EVENT_DSLINK = 0x7b,
    BUS_MEMBER = 0xa0,
    DSM_DEBUG_MODE = 0xf1,
    EVENT_COMMUNICATION_LOG = 0x77,
    EVENT_DSP_DEBUG_DATA = 0x7e,
};
typedef enum {
    CLUSTER_INFO_BY_ID = 1,
} ClusterInfoModifiers_t;

typedef enum {
    CLUSTER_PROPERTIES_SET_NAME = 1,
    CLUSTER_PROPERTIES_SET_STOP_TIMEOUT = 2,
    CLUSTER_PROPERTIES_SET_STATE_MACHINE = 3,
    CLUSTER_PROPERTIES_SET_LOCATION_CLASS = 4,
    CLUSTER_PROPERTIES_SET_CONFIGURATION_LOCK = 5,
    CLUSTER_PROPERTIES_SET_SCENE_LOCK = 6,
    CLUSTER_PROPERTIES_GET_OPERATION_LOCK = 7,
} ClusterPropertiesModifiers_t;





typedef enum {
    ZONE_INFO_BY_INDEX = 1,
    ZONE_INFO_BY_ID = 2,
} ZoneInfoModifiers_t;

typedef enum {
    ZONE_MODIFY_ADD = 1,
    ZONE_MODIFY_REMOVE = 2,
    ZONE_MODIFY_CHANGE_ID = 3,
} ZoneModifyModifiers_t;

typedef enum {
    ZONE_DEVICE_COUNT_ONLY_ACTIVE = 1,
    ZONE_DEVICE_COUNT_ONLY_INACTIVE = 2,
    ZONE_DEVICE_COUNT_ALL = 3,
} ZoneDeviceCountModifiers_t;

typedef enum {
    ZONE_PROPERTIES_SET_NAME = 1,
    ZONE_PROPERTIES_GET_SCENE_HISTORY = 2,
    ZONE_PROPERTIES_GET_ROOM_STATES = 3,
    ZONE_PROPERTIES_SET_ZONE_SENSOR = 4,
    ZONE_PROPERTIES_GET_ZONE_SENSOR = 5,
    ZONE_PROPERTIES_RESET_ZONE_SENSOR = 6,
    ZONE_PROPERTIES_GET_ZONE_SENSOR_VALUE = 7,
} ZonePropertiesModifiers_t;

typedef enum {
    ZONE_GROUP_MODIFY_ADD = 1,
    ZONE_GROUP_MODIFY_REMOVE = 2,
} ZoneGroupModifyModifiers_t;

typedef enum {
    ZONE_GROUP_INFO_BY_INDEX = 1,
    ZONE_GROUP_INFO_BY_ID = 2,
} ZoneGroupInfoModifiers_t;

typedef enum {
    ZONE_GROUP_PROPERTIES_SET_NAME = 1,
    ZONE_GROUP_PROPERTIES_SET_STOP_TIMEOUT = 2,
    ZONE_GROUP_PROPERTIES_SET_STATE_MACHINE = 3,
} ZoneGroupPropertiesModifiers_t;

typedef enum {
    CONTROLLER_HEATING_SET_CONFIG = 1,
    CONTROLLER_HEATING_GET_CONFIG = 2,
    CONTROLLER_HEATING_GET_INTERNALS = 3,
    CONTROLLER_HEATING_SET_OPERATION_MODES = 4,
    CONTROLLER_HEATING_GET_OPERATION_MODES = 5,
    CONTROLLER_HEATING_SET_STATE = 6,
    CONTROLLER_HEATING_GET_STATE = 7,
} ControllerHeatingModifiers_t;





typedef enum {
    ZONE_GROUP_SCENE_PROPERTIES_SET_NAME = 1,
} ZoneGroupScenePropertiesModifiers_t;

typedef enum {
    ZONE_GROUP_ACTION_REQUEST_ACTION_CALL_SCENE = 1,
    ZONE_GROUP_ACTION_REQUEST_ACTION_SAVE_SCENE = 2,
    ZONE_GROUP_ACTION_REQUEST_ACTION_UNDO_SCENE = 3,
    ZONE_GROUP_ACTION_REQUEST_ACTION_BLINK = 4,
    ZONE_GROUP_ACTION_REQUEST_ACTION_UNDO_SCENE_NUMBER = 5,
    ZONE_GROUP_ACTION_REQUEST_ACTION_FORCE_CALL_SCENE = 6,
    ZONE_GROUP_ACTION_REQUEST_ACTION_SET_OUTVAL = 7,
    ZONE_GROUP_ACTION_REQUEST_ACTION_SET_SCENE_LOCAL_PRIORITY = 8,
    ZONE_GROUP_ACTION_REQUEST_ACTION_PROGRAMMING_MODE_ON = 9,
    ZONE_GROUP_ACTION_REQUEST_ACTION_PROGRAMMING_MODE_OFF = 10,
    ZONE_GROUP_ACTION_REQUEST_ACTION_SELECT_GROUP = 11,
    ZONE_GROUP_ACTION_REQUEST_ACTION_REGISTER_SCENE_LOCAL_PRIORITY = 12,
    ZONE_GROUP_ACTION_REQUEST_ACTION_CALL_SCENE_MIN = 13,
    ZONE_GROUP_ACTION_REQUEST_ACTION_LOCAL_STOP = 14,
    ZONE_GROUP_ACTION_REQUEST_ACTION_OPC_INC = 15,
    ZONE_GROUP_ACTION_REQUEST_ACTION_OPC_DEC = 16,
    ZONE_GROUP_ACTION_REQUEST_ACTION_OPC_STOP = 17,
    ZONE_GROUP_ACTION_REQUEST_ACTION_EXTRA_COMMAND = 18,
} ZoneGroupActionRequestModifiers_t;



typedef enum {
    DEVICE_INFO_BY_INDEX_ONLY_ACTIVE = 1,
    DEVICE_INFO_BY_INDEX_ONLY_INACTIVE = 2,
    DEVICE_INFO_BY_INDEX = 3,
    DEVICE_INFO_BY_DEVICE_ID = 4,
} DeviceInfoModifiers_t;



typedef enum {
    DEVICE_STATISTICS_REQUEST_GET = 1,
} DeviceStatisticsRequestModifiers_t;

typedef enum {
    DEVICE_PROPERTIES_SET_ZONE = 1,
    DEVICE_PROPERTIES_SET_LOCKED_FLAG = 4,
    DEVICE_PROPERTIES_SET_NAME = 5,
    DEVICE_PROPERTIES_SET_BUTTON_ACTIVE_GROUP = 8,
    DEVICE_PROPERTIES_RESET_BUTTON_ACTIVE_GROUP = 9,
    DEVICE_PROPERTIES_SET_BUTTON_SET_LOCAL_PRIORITY = 10,
    DEVICE_PROPERTIES_SET_BUTTON_SET_NO_COMING_HOME_CALL = 11,
    DEVICE_PROPERTIES_SET_BUTTON_SET_APARTMENT = 12,
    DEVICE_PROPERTIES_SET_BUTTON_SET_OUTPUT_CHANNEL = 13,
    DEVICE_PROPERTIES_SET_BUTTON_SET_GLOBAL_GROUP = 14,
} DevicePropertiesModifiers_t;

typedef enum {
    DEVICE_BUTTON_INFO_BY_DEVICE = 1,
} DeviceButtonInfoModifiers_t;

typedef enum {
    DEVICE_BINARY_INPUT_GET_COUNT = 1,
    DEVICE_BINARY_INPUT_GET_BY_INDEX = 2,
} DeviceBinaryInputModifiers_t;

typedef enum {
    DEVICE_GROUP_MEMBERSHIP_MODIFY_ADD = 1,
    DEVICE_GROUP_MEMBERSHIP_MODIFY_REMOVE = 2,
} DeviceGroupMembershipModifyModifiers_t;

typedef enum {
    TEST_TRANSMISSION_QUALITY_GET = 1,
} TestTransmissionQualityModifiers_t;



typedef enum {
    DEVICE_ACTION_REQUEST_ACTION_CALL_SCENE = 1,
    DEVICE_ACTION_REQUEST_ACTION_SAVE_SCENE = 2,
    DEVICE_ACTION_REQUEST_ACTION_UNDO_SCENE = 3,
    DEVICE_ACTION_REQUEST_ACTION_BLINK = 4,
    DEVICE_ACTION_REQUEST_ACTION_UNDO_SCENE_NUMBER = 5,
    DEVICE_ACTION_REQUEST_ACTION_FORCE_CALL_SCENE = 6,
    DEVICE_ACTION_REQUEST_ACTION_SET_OUTVAL = 7,
    DEVICE_ACTION_REQUEST_ACTION_PROGRAMMING_MODE_ON = 9,
    DEVICE_ACTION_REQUEST_ACTION_PROGRAMMING_MODE_OFF = 10,
    DEVICE_ACTION_REQUEST_ACTION_OPC_INC = 15,
    DEVICE_ACTION_REQUEST_ACTION_OPC_DEC = 16,
    DEVICE_ACTION_REQUEST_ACTION_OPC_STOP = 17,
    DEVICE_ACTION_REQUEST_ACTION_EXTRA_COMMAND = 18,
} DeviceActionRequestModifiers_t;

typedef enum {
    DEVICE_CONFIG_GET = 1,
    DEVICE_CONFIG_SET = 2,
} DeviceConfigModifiers_t;

typedef enum {
    DEVICE_O_P_C_CONFIG_GET_CURRENT = 1,
    DEVICE_O_P_C_CONFIG_SET_CURRENT_AND_APPLY = 2,
    DEVICE_O_P_C_CONFIG_SET_CURRENT = 3,
    DEVICE_O_P_C_CONFIG_GET_SCENE = 4,
    DEVICE_O_P_C_CONFIG_SET_SCENE = 5,
    DEVICE_O_P_C_CONFIG_GET_SCENE_CONFIG = 6,
    DEVICE_O_P_C_CONFIG_SET_SCENE_CONFIG = 7,
    DEVICE_O_P_C_CONFIG_GET_DC_FLAGS = 8,
    DEVICE_O_P_C_CONFIG_SET_DC_FLAGS = 9,
} DeviceOPCConfigModifiers_t;

typedef enum {
    DEVICE_O_P_C_TABLE_GET_COUNT = 1,
    DEVICE_O_P_C_TABLE_GET_BY_INDEX = 2,
} DeviceOPCTableModifiers_t;

typedef enum {
    DEVICE_SENSOR_GET_VALUE = 1,
    DEVICE_SENSOR_GET_COUNT = 3,
    DEVICE_SENSOR_GET_BY_INDEX = 4,
} DeviceSensorModifiers_t;



typedef enum {
    CIRCUIT_REMOVE_DEVICE_BY_ID = 1,
    CIRCUIT_REMOVE_DEVICE_BY_DSUID = 2,
} CircuitRemoveDeviceModifiers_t;





typedef enum {
    EVENT_DEVICE_ACCESSIBILITY_ON = 1,
    EVENT_DEVICE_ACCESSIBILITY_OFF = 2,
} EventDeviceAccessibilityModifiers_t;











typedef enum {
    EVENT_DEVICE_SENSOR_VALUE = 1,
    EVENT_DEVICE_SENSOR_EVENT = 3,
    EVENT_DEVICE_SENSOR_BINARYINPUTEVENT = 4,
} EventDeviceSensorModifiers_t;





typedef enum {
    CIRCUIT_PING_DEVICES_AUTOMATIC = 1,
    CIRCUIT_PING_DEVICES_ONE_TIME_AUTOMATIC = 2,
    CIRCUIT_PING_DEVICES_ONE_TIME_OFF = 3,
    CIRCUIT_PING_DEVICES_OFF = 4,
} CircuitPingDevicesModifiers_t;

typedef enum {
    CIRCUIT_ENERGY_METER_VALUE_GET = 1,
    CIRCUIT_ENERGY_METER_VALUE_RESET = 2,
    CIRCUIT_ENERGY_METER_VALUE_CALIBRATION = 3,
    CIRCUIT_ENERGY_METER_VALUE_WS_GET = 4,
} CircuitEnergyMeterValueModifiers_t;

typedef enum {
    CIRCUIT_CURRENT_METER_VALUE_GET = 1,
} CircuitCurrentMeterValueModifiers_t;



typedef enum {
    DSM_PROPERTIES_SET_NAME = 1,
    DSM_PROPERTIES_SET_APARTMENT_ID = 2,
    DSM_PROPERTIES_SET_TEMPERATURE_LIMITS = 3,
    DSM_PROPERTIES_GET_APARTMENT_ID = 4,
    DSM_PROPERTIES_GET_TEMPERATURE_LIMITS = 5,
    DSM_PROPERTIES_GET_CURRENT_TEMPERATURE = 6,
    DSM_PROPERTIES_SET_FLAGS = 7,
    DSM_PROPERTIES_GET_FLAGS = 8,
    DSM_PROPERTIES_GET_POWER_DOWN_DURATION = 9,
    DSM_PROPERTIES_SET_PING_INTERVALS = 10,
    DSM_PROPERTIES_GET_PING_INTERVALS = 11,
    DSM_PROPERTIES_GET_MAX_TEMPERATURE = 12,
    DSM_PROPERTIES_RESET_MAX_TEMPERATURE = 13,
    DSM_PROPERTIES_SET_UPSTREAM_FREQUENCY = 14,
    DSM_PROPERTIES_GET_UPSTREAM_FREQUENCY = 15,
    DSM_PROPERTIES_GET_APARTMENT_STATE = 16,
} dSMPropertiesModifiers_t;



typedef enum {
    DSM_CONFIG_SET_DSM_CONFIG = 1,
    DSM_CONFIG_GET_DSP_CONFIG = 2,
    DSM_CONFIG_SET_DSP_CONFIG = 3,
    DSM_CONFIG_GET_HASH = 4,
} dSMConfigModifiers_t;



typedef enum {
    DSM_STATISTICS_GET_DS485 = 1,
    DSM_STATISTICS_RESET_DS485 = 2,
    DSM_STATISTICS_GET_UPSTREAM = 3,
    DSM_STATISTICS_RESET_UPSTREAM = 4,
    DSM_STATISTICS_GET_INTERNALS = 5,
    DSM_STATISTICS_RESET_INTERNALS = 6,
    DSM_STATISTICS_GET_POOL_MARGINS = 7,
    DSM_STATISTICS_GET_STOP_TIMER = 8,
} dSMStatisticsModifiers_t;





typedef enum {
    IMAGE_MAINTENANCE_CHECK_IMAGE = 1,
    IMAGE_MAINTENANCE_GET_IMAGE_INFO = 2,
    IMAGE_MAINTENANCE_START_UPDATE = 3,
    IMAGE_MAINTENANCE_REMOVE_IMAGE = 4,
} ImageMaintenanceModifiers_t;

typedef enum {
    IMAGE_TRANSFER_WRITE_REQUEST = 1,
    IMAGE_TRANSFER_DATA = 2,
} ImageTransferModifiers_t;





typedef enum {
    EVENT_DSM_DONE_SET_DEVICE_ZONE = 1,
    EVENT_DSM_DONE_SET_DEVICE_CONFIG = 2,
    EVENT_DSM_DONE_SET_DEVICE_BUTTON_OUTPUT_CHANNEL = 3,
    EVENT_DSM_DONE_SET_DEVICE_BUTTON_GLOBAL_GROUP = 4,
    EVENT_DSM_DONE_ADD_DEVICE_TO_GROUP = 5,
} EventDsmDoneModifiers_t;

typedef enum {
    ZONE_GROUP_DSLINK_SEND_NOT_LAST_BYTE_NO_ANSWER = 1,
    ZONE_GROUP_DSLINK_SEND_LAST_BYTE_NO_ANSWER = 2,
} ZoneGroupDslinkSendModifiers_t;

typedef enum {
    DEVICE_DSLINK_SEND_NOT_LAST_BYTE_NO_ANSWER = 1,
    DEVICE_DSLINK_SEND_LAST_BYTE_NO_ANSWER = 2,
    DEVICE_DSLINK_SEND_NOT_LAST_BYTE_WITH_ANSWER = 3,
    DEVICE_DSLINK_SEND_LAST_BYTE_WITH_ANSWER = 4,
} DeviceDslinkSendModifiers_t;

typedef enum {
    EVENT_DSLINK_RESPONSE = 1,
    EVENT_DSLINK_INTERRUPT = 2,
} EventDslinkModifiers_t;

typedef enum {
    BUS_MEMBER_GET_TYPE = 2,
} BusMemberModifiers_t;

typedef enum {
    DSM_DEBUG_MODE_SET_MMI_FLAG = 2,
    DSM_DEBUG_MODE_GET_MMI_FLAG = 1,
    DSM_DEBUG_MODE_STOP_SELECT_B = 3,
    DSM_DEBUG_MODE_RESTART_REGISTRATION = 4,
    DSM_DEBUG_MODE_RESTART_DSP = 5,
    DSM_DEBUG_MODE_READ_FLASH = 6,
    DSM_DEBUG_MODE_WRITE_FLASH = 7,
    DSM_DEBUG_MODE_GET_COMMUNICATION_LOG_STATE = 8,
    DSM_DEBUG_MODE_SET_COMMUNICATION_LOG_STATE = 9,
    DSM_DEBUG_MODE_DISABLE_JUMBLE = 10,
    DSM_DEBUG_MODE_INJECT_SHORT_UPSTREAM = 12,
    DSM_DEBUG_MODE_INJECT_LONG_UPSTREAM = 13,
} dSMDebugModeModifiers_t;

typedef enum {
    EVENT_COMMUNICATION_LOG_UPSTREAM_SHORT = 1,
    EVENT_COMMUNICATION_LOG_UPSTREAM_LONG = 2,
    EVENT_COMMUNICATION_LOG_DOWNSTREAM_SHORT = 3,
    EVENT_COMMUNICATION_LOG_DOWNSTREAM_LONG_16BIT_PARAMETER = 4,
    EVENT_COMMUNICATION_LOG_DOWNSTREAM_LONG_8BIT_PARAMETER = 5,
    EVENT_COMMUNICATION_LOG_DOWNSTREAM_LONG_NO_PARAMETER = 6,
} EventCommunicationLogModifiers_t;



enum DsmApiErrorCodes {
    ERROR_OK = 0x00, /**< No Error. Call could be executed. */
    ERROR_WRONG_PARAMETER = 0x01, /**< A parameter is invalid. */
    ERROR_ZONE_NOT_FOUND = 0x02, /**< The requested zone is not configured on this dSM. */
    ERROR_DEVICE_NOT_FOUND = 0x03, /**< The requested device is not known on this dSM. */
    ERROR_GROUP_NOT_FOUND = 0x04, /**< The requested group is not configured on this dSM. */
    ERROR_ZONE_CAN_NOT_BE_DELETED = 0x05, /**< The zone is the last one configured and can not be deleted. */
    ERROR_GROUP_CAN_NOT_BE_DELETED = 0x06, /**< The standard groups (colors) can not be deleted. */
    ERROR_DEVICE_CAN_NOT_BE_DELETED = 0x07, /**< The device is locked and can not be deleted. */
    ERROR_NO_FURTHER_ZONES = 0x08, /**< Maximal number of zones reached. */
    ERROR_NO_FURTHER_GROUPS = 0x09, /**< None */
    ERROR_ZONE_ALREADY_EXISTS = 0x0a, /**< A zone with this number is already configured on this dSM. */
    ERROR_GROUP_ALREADY_EXISTS = 0x0b, /**< A group with this number is already configured on this dSM. */
    ERROR_ZONE_NOT_EMPTY = 0x0c, /**< The zone could not be removed because it still contains devices. */
    ERROR_TIMEOUT = 0x0d, /**< None */
    ERROR_WRONG_SIZE = 0x0e, /**< The number of parameters is wrong. (Indicates mismatch between dsm-api library and dSM firmware.) */
    ERROR_WRONG_MSGID = 0x0f, /**< The MessageId is unknown. (Indicates mismatch between dsm-api library and dSM firmware.) */
    ERROR_WRONG_MODIFIER = 0x10, /**< The ModifierId is unknown. (Indicates mismatch between dsm-api library and dSM firmware.) */
    ERROR_WRONG_PACKET_NR = 0x11, /**< Image transfer: received a wrong packet (not in sequence). */
    ERROR_WRONG_IMAGE_SIZE = 0x12, /**< Image transfer: received more data than expected. */
    ERROR_NO_IMAGE_TRANSFER_ACTIVE = 0x13, /**< Image transfer: received image packets with no transfer active. */
    ERROR_IMAGE_INVALID = 0x14, /**< No valid software image found. */
    ERROR_NO_CONFIG = 0x15, /**< No DSP configuration block available. */
    ERROR_REQUEST_CAN_NOT_BE_EXECUTED = 0x16, /**< The request can not be executed. (e.g. DSP not ready) */
    ERROR_OUT_OF_RESOURCES = 0x17, /**< The dSM has no resources to execute this request. */
    ERROR_DEVICE_SELECT_RESPONSE_TIMEOUT = 0x18, /**< Device didn't answer to a select call. */
};
typedef enum {
    BUS_MEMBER_GET_DS485D = 0x01, /**< Get all ds485d. */
    BUS_MEMBER_GET_DS485P = 0x02, /**< Get all ds485p. */
    BUS_MEMBER_GET_DSM11 = 0x04, /**< Get all dsm11. */
    BUS_MEMBER_GET_DSM12 = 0x08, /**< Get all dsm12. */
    BUS_MEMBER_GET_DSM = (BUS_MEMBER_GET_DSM11 + BUS_MEMBER_GET_DSM12), /**< Get all dsm11 and dsm12. */
    BUS_MEMBER_GET_VDSM = 0x10, /**< Get all vdsm. */
    BUS_MEMBER_GET_VDC = 0x20, /**< Get all vdc. */
    BUS_MEMBER_GET_DSS = 0x40, /**< Get all dss. */
    BUS_MEMBER_GET_DSA = 0x80, /**< Get all dsa. */
    BUS_MEMBER_GET_DSG = 0x100, /**< Get all dsg. */
} Selector_BusMembersType_t;

typedef enum {
    BusMember_Unknown = 0,
    BusMember_ds485d = 1,
    BusMember_ds485p = 2,
    BusMember_dSM11 = 16,
    BusMember_dSM12 = 17,
    BusMember_vDSM = 32,
    BusMember_vDC = 33,
    BusMember_dSS = 128,
    BusMember_dSA = 129,
    BusMember_dSG = 130,
} BusMemberDevice_t;

enum DsmApiParameterLength {
    NAME_LEN = 21,
    RESPONSE_LEN = 4096,
    DATA_LEN = 64,
    DATA_LEN_ = 122,
    CONFIG_LEN = 96,
    PAYLOAD_LEN = 64,
    DSUID_LEN = 17,
    STATISTICS_LEN = 96,
    SCENELOCK_LEN = 16,
    REQUEST_LEN = 4096,
    GROUPS_LEN = 8,
    DSID_LEN = 12,
};

#ifdef __cplusplus
}
#endif

#endif /* DSM_API_CONST_H */
