
/*
 This file is part of the digitalSTROM dsm-api library.

 Copyright (C) 2010 digitalSTROM.org, Schlieren, Switzerland

 digitalSTROM dsm-api library is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 digitalSTROM dsm-api library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with digitalSTROM dsm-api library. If not, see <http://www.gnu.org/licenses/>.
 
 NOTE: The dsm-api library and it's script bindings are unsupported interfaces and
 subject to change without further notice.
 
 */
 /*
 * DO NOT MANUALLY MODIFY! 
 *
 * THIS FILE IS AUTOGENERATED FROM THE dSM-API XML DEFINITIONS IN
 * dsm-api.xml.
 * Make any changes in the XML definition and regenerate this file.
 */
/** \mainpage dSM-API Documentation
 * This is the official documentation of the dSM-API. See the <a href="modules.html">Modules Page</a> for the different API call groups.
 *
 *
 * NOTE: The libdsm-api and it's scripting bindings are unsupported interfaces and 
 * subject to change without further notice.
 */
/**
 * @file dsm-api.h
 *
 * This is the dSM-API declaration.
 *
 * General remark: If any return parameters are of no interest to the caller
 *                 NULL can be passed instead of a variable reference.
 */

#ifndef DSM_API_H
#define DSM_API_H
#include <digitalSTROM/ds485-client-interface.h>

#ifdef __cplusplus
extern "C" {
#endif

#define DSM_API_VERSION 0x0301

/**
 * @defgroup Library Library
 *
 * This group of API calls addresses the management of the dS485-Stack, connection to the ds485d daemon and the callback infrastructure.
 *
 * @{
 */

/**
 * Type of the library handle.
 */
typedef void *DsmApiHandle_t;

/**
 * Callback function signature for the BusChange callback.
 */
typedef void (*BusChange_callback_t)(void *arg, dsuid_t *id, int flag);

/**
 * Callback function signature for the BusState callback.
 */
typedef void (*LinkState_callback_t)(void *arg, bool state);

/**
 * Data structure for dSM-API callback registration
 */
typedef struct {
    void *function;
    void *arg;
} DsmApiCallback_t;

/**
 * Get the API version of the library.
 *
 * This function returns the API version as two bytes. The first byte is the MAJOR version,
 * the second byte is the MINOR version. This version corresponds to the ApiVersion parameter read
 * from the dSM with #dSMInfo call. Differing MAJOR versions are binary incompatible. Higher MINOR
 * versions contain additional functionality not previously available.
 *
 * @return API version
 */
int DsmApiLibraryVersion(void);

/**
 * Initialize the internal memory structures of the library.
 *
 * @return a handle to the library instance
 */
DsmApiHandle_t DsmApiInitialize(void);

/**
 * Open a new connection to the dS485 bus.
 * 
 * @param [in] handle Handle to the library instance
 * @param [in] connection string containing the connection method: 
 *                        - serial:///dev/ttyUSB0 (only when linked to the GPL version of the ds485-client library)
 *                        - tcp://localhost:8442
 * @param [in] flags
 * @return zero on success, negative on failure
 */
int DsmApiOpen(DsmApiHandle_t handle, const char *connection, int flags);

/**
 * Get the dSUID of the daeomon/socket interface.
 *
 * @param [in] handle Handle to the library instance
 * @param [out] own dSUID
 * @return 0 on success; negative on failure
 */
int DsmApiGetOwnDSUID(DsmApiHandle_t handle, dsuid_t *dsuid);

/**
 * Request a list of the current bus members.
 * 
 * @param [in] handle Handle to the library instance
 * @param [out] device_list List of devices. Preallocate a buffer of size device_list_size * sizeof(dsuid_t)
 * @param [in] device_list_size device_list has space for this many devices.
 * @return the number of devices in device_list; negative if an error occured
 */
int DsmApiGetBusMembers(DsmApiHandle_t handle, dsuid_t *device_list, int device_list_size);

/**
 * Request a list of the current bus members depending on their type.
 *
 * @param [in] handle Handle to the library instance
 * @param [out] device_list List of devices. Preallocate a buffer of size device_list_size * sizeof(dsuid_t)
 * @param [in] device_list_size device_list has space for this many devices.
 * @param [in] types type filter for device list.
 * @return the number of devices in device_list; negative if an error occured
 */
int DsmApiGetBusMembersPerType(DsmApiHandle_t handle, dsuid_t *device_list, int device_list_size, unsigned int types);

/**
 * Get the current state of the dS485 bus.
 *
 * @param [in] handle Handle to the library instance
 * @param [out] state returns the bus state
 * @return 0 on success; negative on failure
 */
int DsmApiGetLinkState(DsmApiHandle_t handle, bool *state);

/**
 * Restart the dS485 bus.
 *
 * @param [in] handle Handle to the library instance
 * @return 0 on success; negative on failure
 */
int DsmApiRestartBus(DsmApiHandle_t handle);

/**
 * Close the connection to the dS485 bus.
 *
 * @param [in] handle Handle to the library instance
 * @return 0 on success; negative on failure
 */
int DsmApiClose(DsmApiHandle_t handle);

/**
 * Free instance memory.
 *
 * @param [in] handle Handle to the library instance
 * @return 0 on success; negative on failure
 */
int DsmApiCleanup(DsmApiHandle_t handle);

/**
 * Register callback functions for dsm-api asynchronous responses, requests and events.
 *
 * Register NULL to delete a callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] MessageType Register callback function for this MessageType
 * @param [in] MessageId Register callback function for this MessageId
 * @param [in] ModifierId Register the callback function for this ModifierId
 * @param [in] callback a struct containing a callback_function and a user defined argument pointer
 * @param [out] oldcallback a struct containing the previously registered callback upon return
 * @return ERROR_OK when ok
 */
int DsmApiSetCallback(DsmApiHandle_t handle, container_type_t MessageType, uint8_t MessageId, uint8_t ModifierId, DsmApiCallback_t *const callback, DsmApiCallback_t *oldcallback);

/**
 * Register a callback function for BusState events.
 *
 * Register NULL to delete the callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] callback a struct containing a callback_function and a user defined argument pointer
 * @param [out] oldcallback a struct containing the previously registered callback upon return
 * @return ERROR_OK when ok
 */
int DsmApiSetLinkStateCallback(DsmApiHandle_t handle, DsmApiCallback_t *const callback, DsmApiCallback_t *oldcallback);

/**
 * Register a callback function for BusChange events.
 *
 * Register NULL to delete the callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] callback a struct containing a callback_function and a user defined argument pointer
 * @param [out] oldcallback a struct containing the previously registered callback upon return
 * @return ERROR_OK when ok
 */
int DsmApiSetBusChangeCallback(DsmApiHandle_t handle, DsmApiCallback_t *const callback, DsmApiCallback_t *oldcallback);

/** @} */

/**
 * @defgroup Convenience Convenience Functions
 *
 * This is a group of convenience functions used to simplify the interaction with digitalSTROM(r) devices.
 * @{
 */

/**
 * Convert a combination of product properties and serial number to a unique dSUID.
 *
 * @param [in] vendorId VendorId of the device
 * @param [in] productId ProductId of the device
 * @param [in] groupId Standard-Function of the device
 * @param [in] revisionId Firmare RevisionId of the device
 * @param [in] serialNumber Serial number of the device
 * @param [out] dsuid Contains the dSUID of the device.
 * @return 0 on success, ERROR_DSUID_CONVERSION if product is unknown, dSUID is 0 and contains only serial number
 */
int DsmApiGetDeviceDSUID(uint16_t vendorId, uint16_t productId, uint8_t groupId, uint16_t revisionId, uint32_t serialNumber,
    dsuid_t *dsuid);

/**
 * Convert a IEEE address into a unique dSUID.
 *
 * @param [in] mac MAC Address of the device
 * @param [out] dsuid Contains the dSUID of the device.
 * @return 0, if IEEE prefix and device is known, else ERROR_DSUID_CONVERSION
 */
int DsmApiGetEthernetDSUID(const char *mac, dsuid_t *dsuid);

/**
 * Expand a combination of product properties to a universal description and GTIN number.
 *
 * @param [in] vendorId VendorId of the device
 * @param [in] productId ProductId of the device
 * @param [in] groupId Standard-Function of the device
 * @param [in] revisionId Firmare RevisionId of the device
 * @param [out] displayName Contains the display name of the product
 * @param [out] hardwareInfo Contains the hardware info string
 * @param [out] gtin Contains the GTIN string
 * @return 0 on success, -1 if product is unknown
 */
int DsmApiGetDeviceDescription(uint16_t vendorId, uint16_t productId, uint8_t groupId, uint16_t revisionId,
    char **displayName, char **hardwareInfo, char **gtin);

/**
 * Check if a given dSUID belongs to a dSM.
 *
 * @param [in] dSMdSUID dSUID of the device in question
 * @return 0: device is no dSM, 1: device is a dSM
 */
int DsmApiIsdSM(dsuid_t dSMdSUID);

/** @} */

/** @ingroup Device
 * Requests statistics data of a device. Synchronous implementation of #DeviceStatisticsRequest_get.
 *
 * ParamOffset 0xFE (Reset) and 0xFF (All values) are not allowed, as they would result in no or multiple response events.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination of the call
 * @param [in] DeviceId 
 * @param [in] ParamOffset 
 * @param [in] timeout time-out of the synchronous call (in Seconds)
 * @param [out] Value Statistics value (only valid if return == 0)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceStatisticsRequest_get_sync(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t ParamOffset, int timeout, uint16_t *Value);

/** @ingroup Device
 * Read a configuration parameter of a specific digitalSTROM device. Synchronous implementation of #DeviceConfig_get.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination of the call
 * @param [in] DeviceId 
 * @param [in] ConfigClass 
 * @param [in] ConfigIndex 
 * @param [in] timeout time-out of the synchronous call (in Seconds)
 * @param [out] Value Parameter value (only valid if return == 0)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceConfig_get_sync_8(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t ConfigClass, uint8_t ConfigIndex, int timeout, uint8_t *Value);

/** @ingroup Device
 * Read two configuration parameters of a specific digitalSTROM device simultaneously. Synchronous implementation of #DeviceConfig_get.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination of the call
 * @param [in] DeviceId 
 * @param [in] ConfigClass 
 * @param [in] ConfigIndex 
 * @param [in] timeout time-out of the synchronous call (in Seconds)
 * @param [out] Value Parameter values low byte: ConfigIndex & 0xFE; high byte: ConfigIndex & 0xFE + 1 (only valid if return == 0)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceConfig_get_sync_16(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t ConfigClass, uint8_t ConfigIndex, int timeout, uint16_t *Value);

/** @ingroup Device
 * Set a configuration parameter of a specific digitalSTROM device. Synchronous implementation of #DeviceConfig_set.
 *
 * Caution: This function doesn't guarantee that the device received the Value. On success, it just means that the dSM could sent the Value in given time.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination of the call
 * @param [in] ConfigClass
 * @param [in] ConfigIndex
 * @param [in] Value
 * @param [in] timeout time-out of the synchronous call (in Seconds)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceConfig_set_sync(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t ConfigClass, uint8_t ConfigIndex, uint8_t Value, int timeout);

/** @ingroup Device
 * Set a zone of a specific digitalSTROM device. Synchronous implementation of #DeviceProperties_set_zone.
 *
 * Caution: This function doesn't guarantee that the device received the value. On success, it just means that the dSM could sent the ZoneId in given time.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination of the call
 * @param [in] DeviceId
 * @param [in] ZoneId
 * @param [in] timeout time-out of the synchronous call (in Seconds)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceProperties_set_zone_sync(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint16_t ZoneId, int timeout);

/** @ingroup Device
 * Set a button output channel of a specific digitalSTROM device. Synchronous implementation of #DeviceProperties_set_button_set_output_channel.
 *
 * Caution: This function doesn't guarantee that the device received the value. On success, it just means that the dSM could sent the ChannelId in given time.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination of the call
 * @param [in] DeviceId
 * @param [in] ChannelId
 * @param [in] timeout time-out of the synchronous call (in Seconds)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceProperties_set_button_set_output_channel_sync(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t ChannelId, int timeout);

/** @ingroup Device
 * Set a button global group of a specific digitalSTROM device. Synchronous implementation of #DeviceProperties_set_button_set_global_group.
 *
 * Caution: This function doesn't guarantee that the device received the value. On success, it just means that the dSM could sent the GroupId in given time.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination of the call
 * @param [in] DeviceId
 * @param [in] GroupId
 * @param [in] timeout time-out of the synchronous call (in Seconds)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceProperties_set_button_set_global_group_sync(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t GroupId, int timeout);

/** @ingroup Device
 * Add a group to a specific digitalSTROM device. Synchronous implementation of #DeviceGroupMembershipModify_add.
 *
 * Caution: This function doesn't guarantee that the device received the value. On success, it just means that the dSM could sent the GroupId in given time.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination of the call
 * @param [in] DeviceId
 * @param [in] GroupId
 * @param [in] timeout time-out of the synchronous call (in Seconds)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceGroupMembershipModify_add_sync(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t GroupId, int timeout);

/** @ingroup Device
 * Read the current value of an output channel of a digitalSTROM device. Synchronous implementation of #DeviceOPCConfig_get_current.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination of the call
 * @param [in] DeviceId 
 * @param [in] ChannelId 
 * @param [in] timeout time-out of the synchronous call (in Seconds)
 * @param [out] Value Parameter values (only valid if return == 0)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceOPCConfig_get_current_sync(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t ChannelId, int timeout, uint16_t *Value);

/** @ingroup Device
 * Read the scene value of an output channel of a digitalSTROM device. Synchronous implementation of #DeviceOPCConfig_get_scene.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination of the call
 * @param [in] DeviceId 
 * @param [in] ChannelId 
 * @param [in] SceneId 
 * @param [in] timeout time-out of the synchronous call (in Seconds)
 * @param [out] Value Parameter values (only valid if return == 0)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceOPCConfig_get_scene_sync(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t ChannelId, uint8_t SceneId, int timeout, uint16_t *Value);

/** @ingroup Device
 * Read the scene config value for a scene of a digitalSTROM device
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination of the call
 * @param [in] DeviceId
 * @param [in] SceneId
 * @param [in] timeout time-out of the synchronous call (in Seconds)
 * @param [out] Value Parameter values (only valid if return == 0)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceOPCConfig_get_scene_config_sync(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t SceneId, int timeout, uint16_t *Value);

/** @ingroup Device
 * Read don't care flags bitfield for a scene of a digitalSTROM device. Synchronous implementation of #DeviceOPCConfig_get_dc_flags.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination of the call
 * @param [in] DeviceId 
 * @param [in] SceneId 
 * @param [in] timeout time-out of the synchronous call (in Seconds)
 * @param [out] Value Parameter values (only valid if return == 0)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceOPCConfig_get_dc_flags_sync(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t SceneId, int timeout, uint16_t *Value);

/** @ingroup Device
 * Query transmission quality. Synchronous implementation of #TestTransmissionQuality_get.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination of the call
 * @param [in] DeviceId 
 * @param [in] timeout time-out of the synchronous call (in Seconds)
 * @param [out] DownstreamQuality Downstream quality (only valid if return == 0)
 * @param [out] UpstreamQuality Upstream quality (only valid if return == 0)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int TestTransmissionQuality_get_sync(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, int timeout, uint8_t *DownstreamQuality, uint16_t *UpstreamQuality);

/** @ingroup Device
 * Access device sensors. Get the value of sensor SensorIndex. Synchronous implementation of #DeviceSensor_get_value.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination of the call
 * @param [in] DeviceId DeviceId
 * @param [in] SensorIndex Index of the requested sensor on the device.
 * @param [in] timeout time-out of the synchronous call (in Seconds)
 * @param [out] SensorValue Current value of the sensor (12 bit).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceSensor_get_value_sync(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t SensorIndex, int timeout, uint16_t *SensorValue);

/** @ingroup dSLink
 * Send UDI commands to a single dSLink device. UDI device stays selected after the call execution. Used when multiple bytes have to be sent. Synchronous implementation of #DeviceDslinkSend_not_last_byte_with_answer.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination of the call
 * @param [in] DeviceId Select only this device.
 * @param [in] Value Value to send to devices.
 * @param [in] timeout time-out of the synchronous call (in Seconds)
 * @param [out] ReturnValue Answer from the device
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceDslinkSend_not_last_byte_with_answer_sync(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t Value, int timeout, uint8_t *ReturnValue);

/** @ingroup dSLink
 * Send UDI commands to a single dSLink device. UDI device is de-selected after the call. Used only on the last access. Synchronous implementation of #DeviceDslinkSend_last_byte_with_answer.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination of the call
 * @param [in] DeviceId Select only this device.
 * @param [in] Value Value to send to devices.
 * @param [in] timeout time-out of the synchronous call (in Seconds)
 * @param [out] ReturnValue Answer from the device
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceDslinkSend_last_byte_with_answer_sync(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t Value, int timeout, uint8_t *ReturnValue);
/**
 * @defgroup Cluster Cluster
 *
 * This group of API calls addresses clusters and their properties.
 * @{
 */
 /**
 * Returns information of a cluster. Get the cluster infomration by ClusterId
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ClusterInfo_by_id_response_callback_t callback.
 * To receive this request from other bus members register the #ClusterInfo_by_id_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ClusterId Cluster ID.
 * @param [out] StateMachineGroupId Defines the behavior of buttons that are part of this cluster.
 * @param [out] HasStateMachine 1=Cluster can have a state machine configured (supports buttons).
 * @param [out] NumberOfDevices Number of devices that are part of this cluster.
 * @param [out] Name The name of this cluster (21 character, zero terminated string). (pass a reference to a preallocated buffer of at least 21 bytes.)
 * @param [out] StopTimeout STOP timeout based on this dSMs devices.
 * @param [out] RemoteStopTimeout STOP timeout set from remote via dSM-API.
 * @param [out] ConfigurationLock 0=full configuration allowed; 1=cluster is locked.
 * @param [out] SceneLock Bitfield of locked Scenes. If a bit is set and the ConfigrationLock ist set this scene configration must nor be changed. (pass a reference to a preallocated buffer of at least 16 bytes.)
 * @param [out] Location Location of the cluster.
 * @param [out] Floor Floor of the cluster.
 * @param [out] ProtectionClass ProtectionClass of the cluster.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ClusterInfo_by_id(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t ClusterId, uint8_t *StateMachineGroupId, uint8_t *HasStateMachine, uint16_t *NumberOfDevices, uint8_t *Name, uint8_t *StopTimeout, uint8_t *RemoteStopTimeout, uint8_t *ConfigurationLock, uint8_t *SceneLock, uint16_t *Location, uint16_t *Floor, uint16_t *ProtectionClass);

/**
 * Returns information of a cluster. Get the cluster infomration by ClusterId
 * 
 * 
 * Response callback function prototype for call #ClusterInfo_by_id.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CLUSTER_INFO and ModifierId = #CLUSTER_INFO_BY_ID
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] StateMachineGroupId Defines the behavior of buttons that are part of this cluster.
 * @param [in] HasStateMachine 1=Cluster can have a state machine configured (supports buttons).
 * @param [in] NumberOfDevices Number of devices that are part of this cluster.
 * @param [in] Name The name of this cluster (21 character, zero terminated string).
 * @param [in] StopTimeout STOP timeout based on this dSMs devices.
 * @param [in] RemoteStopTimeout STOP timeout set from remote via dSM-API.
 * @param [in] ConfigurationLock 0=full configuration allowed; 1=cluster is locked.
 * @param [in] SceneLock Bitfield of locked Scenes. If a bit is set and the ConfigrationLock ist set this scene configration must nor be changed.
 * @param [in] Location Location of the cluster.
 * @param [in] Floor Floor of the cluster.
 * @param [in] ProtectionClass ProtectionClass of the cluster.
 */
typedef void (*ClusterInfo_by_id_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t StateMachineGroupId, uint8_t HasStateMachine, uint16_t NumberOfDevices, const uint8_t *Name, uint8_t StopTimeout, uint8_t RemoteStopTimeout, uint8_t ConfigurationLock, const uint8_t *SceneLock, uint16_t Location, uint16_t Floor, uint16_t ProtectionClass);

/**
 * Returns information of a cluster. Get the cluster infomration by ClusterId
 * 
 * 
 * Request callback function prototype for call #ClusterInfo_by_id.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CLUSTER_INFO and ModifierId = #CLUSTER_INFO_BY_ID
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ClusterId Cluster ID.
 */
typedef void (*ClusterInfo_by_id_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t ClusterId);

/**
 * Set the name of a cluster.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ClusterProperties_set_name_response_callback_t callback.
 * To receive this request from other bus members register the #ClusterProperties_set_name_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ClusterId Cluster ID.
 * @param [in] Name The new name of this group (21 character, zero terminated string).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ClusterProperties_set_name(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t ClusterId, const uint8_t *Name);

/**
 * Set the name of a cluster.
 * 
 * 
 * Response callback function prototype for call #ClusterProperties_set_name.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CLUSTER_PROPERTIES and ModifierId = #CLUSTER_PROPERTIES_SET_NAME
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ClusterProperties_set_name_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set the name of a cluster.
 * 
 * 
 * Request callback function prototype for call #ClusterProperties_set_name.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CLUSTER_PROPERTIES and ModifierId = #CLUSTER_PROPERTIES_SET_NAME
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ClusterId Cluster ID.
 * @param [in] Name The new name of this group (21 character, zero terminated string).
 */
typedef void (*ClusterProperties_set_name_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t ClusterId, const uint8_t *Name);

/**
 * Set the STOP timeout of a cluster.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ClusterProperties_set_stop_timeout_response_callback_t callback.
 * To receive this request from other bus members register the #ClusterProperties_set_stop_timeout_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ClusterId Cluster ID.
 * @param [in] StopTimeout The new STOP timeout in [s].
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ClusterProperties_set_stop_timeout(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t ClusterId, uint8_t StopTimeout);

/**
 * Set the STOP timeout of a cluster.
 * 
 * 
 * Response callback function prototype for call #ClusterProperties_set_stop_timeout.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CLUSTER_PROPERTIES and ModifierId = #CLUSTER_PROPERTIES_SET_STOP_TIMEOUT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ClusterProperties_set_stop_timeout_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set the STOP timeout of a cluster.
 * 
 * 
 * Request callback function prototype for call #ClusterProperties_set_stop_timeout.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CLUSTER_PROPERTIES and ModifierId = #CLUSTER_PROPERTIES_SET_STOP_TIMEOUT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ClusterId Cluster ID.
 * @param [in] StopTimeout The new STOP timeout in [s].
 */
typedef void (*ClusterProperties_set_stop_timeout_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t ClusterId, uint8_t StopTimeout);

/**
 * Set the state machine (color) of a cluster.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ClusterProperties_set_state_machine_response_callback_t callback.
 * To receive this request from other bus members register the #ClusterProperties_set_state_machine_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ClusterId Cluster ID.
 * @param [in] StateMachine The new state machine id (color).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ClusterProperties_set_state_machine(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t ClusterId, uint8_t StateMachine);

/**
 * Set the state machine (color) of a cluster.
 * 
 * 
 * Response callback function prototype for call #ClusterProperties_set_state_machine.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CLUSTER_PROPERTIES and ModifierId = #CLUSTER_PROPERTIES_SET_STATE_MACHINE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ClusterProperties_set_state_machine_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set the state machine (color) of a cluster.
 * 
 * 
 * Request callback function prototype for call #ClusterProperties_set_state_machine.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CLUSTER_PROPERTIES and ModifierId = #CLUSTER_PROPERTIES_SET_STATE_MACHINE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ClusterId Cluster ID.
 * @param [in] StateMachine The new state machine id (color).
 */
typedef void (*ClusterProperties_set_state_machine_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t ClusterId, uint8_t StateMachine);

/**
 * Set the Location property of the cluster.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ClusterProperties_set_location_class_response_callback_t callback.
 * To receive this request from other bus members register the #ClusterProperties_set_location_class_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ClusterId Cluster ID.
 * @param [in] Location The new Location.
 * @param [in] Floor Floor of the cluster.
 * @param [in] ProtectionClass The new ProtectionClass.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ClusterProperties_set_location_class(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t ClusterId, uint16_t Location, uint16_t Floor, uint16_t ProtectionClass);

/**
 * Set the Location property of the cluster.
 * 
 * 
 * Response callback function prototype for call #ClusterProperties_set_location_class.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CLUSTER_PROPERTIES and ModifierId = #CLUSTER_PROPERTIES_SET_LOCATION_CLASS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ClusterProperties_set_location_class_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set the Location property of the cluster.
 * 
 * 
 * Request callback function prototype for call #ClusterProperties_set_location_class.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CLUSTER_PROPERTIES and ModifierId = #CLUSTER_PROPERTIES_SET_LOCATION_CLASS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ClusterId Cluster ID.
 * @param [in] Location The new Location.
 * @param [in] Floor Floor of the cluster.
 * @param [in] ProtectionClass The new ProtectionClass.
 */
typedef void (*ClusterProperties_set_location_class_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t ClusterId, uint16_t Location, uint16_t Floor, uint16_t ProtectionClass);

/**
 * Lock the cluster against further changes.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ClusterProperties_set_configuration_lock_response_callback_t callback.
 * To receive this request from other bus members register the #ClusterProperties_set_configuration_lock_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ClusterId Cluster ID.
 * @param [in] ConfigurationLock 0=full configuration allowed; 1=cluster is locked.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ClusterProperties_set_configuration_lock(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t ClusterId, uint8_t ConfigurationLock);

/**
 * Lock the cluster against further changes.
 * 
 * 
 * Response callback function prototype for call #ClusterProperties_set_configuration_lock.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CLUSTER_PROPERTIES and ModifierId = #CLUSTER_PROPERTIES_SET_CONFIGURATION_LOCK
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ClusterProperties_set_configuration_lock_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Lock the cluster against further changes.
 * 
 * 
 * Request callback function prototype for call #ClusterProperties_set_configuration_lock.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CLUSTER_PROPERTIES and ModifierId = #CLUSTER_PROPERTIES_SET_CONFIGURATION_LOCK
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ClusterId Cluster ID.
 * @param [in] ConfigurationLock 0=full configuration allowed; 1=cluster is locked.
 */
typedef void (*ClusterProperties_set_configuration_lock_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t ClusterId, uint8_t ConfigurationLock);

/**
 * Set the scene lock bitfield.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ClusterProperties_set_scene_lock_response_callback_t callback.
 * To receive this request from other bus members register the #ClusterProperties_set_scene_lock_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ClusterId Cluster ID.
 * @param [in] SceneLock Bitfield of locked Scenes.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ClusterProperties_set_scene_lock(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t ClusterId, const uint8_t *SceneLock);

/**
 * Set the scene lock bitfield.
 * 
 * 
 * Response callback function prototype for call #ClusterProperties_set_scene_lock.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CLUSTER_PROPERTIES and ModifierId = #CLUSTER_PROPERTIES_SET_SCENE_LOCK
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ClusterProperties_set_scene_lock_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set the scene lock bitfield.
 * 
 * 
 * Request callback function prototype for call #ClusterProperties_set_scene_lock.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CLUSTER_PROPERTIES and ModifierId = #CLUSTER_PROPERTIES_SET_SCENE_LOCK
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ClusterId Cluster ID.
 * @param [in] SceneLock Bitfield of locked Scenes.
 */
typedef void (*ClusterProperties_set_scene_lock_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t ClusterId, const uint8_t *SceneLock);

/**
 * Get the state of the operation lock of the cluster.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ClusterProperties_get_operation_lock_response_callback_t callback.
 * To receive this request from other bus members register the #ClusterProperties_get_operation_lock_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ClusterId Cluster ID.
 * @param [out] OperationLock 0=not locked; 1=operation locked; 2=unknown.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ClusterProperties_get_operation_lock(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t ClusterId, uint8_t *OperationLock);

/**
 * Get the state of the operation lock of the cluster.
 * 
 * 
 * Response callback function prototype for call #ClusterProperties_get_operation_lock.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CLUSTER_PROPERTIES and ModifierId = #CLUSTER_PROPERTIES_GET_OPERATION_LOCK
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] OperationLock 0=not locked; 1=operation locked; 2=unknown.
 */
typedef void (*ClusterProperties_get_operation_lock_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t OperationLock);

/**
 * Get the state of the operation lock of the cluster.
 * 
 * 
 * Request callback function prototype for call #ClusterProperties_get_operation_lock.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CLUSTER_PROPERTIES and ModifierId = #CLUSTER_PROPERTIES_GET_OPERATION_LOCK
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ClusterId Cluster ID.
 */
typedef void (*ClusterProperties_get_operation_lock_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t ClusterId);



/** @} */
/**
 * @defgroup Signal Signal
 *
 * None
 * @{
 */
 /**
 * 
 * 
 * 
 * This call has a timeout of 0 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #EventGeneric_response_callback_t callback.
 * To receive this request from other bus members register the #EventGeneric_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] EventType Event type.
 * @param [in] PayloadLength Length of the following payload in bytes (max 64).
 * @param [in] Payload Event specific payload.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int EventGeneric(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t EventType, uint8_t PayloadLength, const uint8_t *Payload);

/**
 * 
 * 
 * 
 * Response callback function prototype for call #EventGeneric.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #EVENT_GENERIC and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*EventGeneric_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * 
 * 
 * 
 * Request callback function prototype for call #EventGeneric.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #EVENT_GENERIC and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] EventType Event type.
 * @param [in] PayloadLength Length of the following payload in bytes (max 64).
 * @param [in] Payload Event specific payload.
 */
typedef void (*EventGeneric_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t EventType, uint8_t PayloadLength, const uint8_t *Payload);



/** @} */
/**
 * @defgroup Zone Zone
 *
 * This group of API calls addresses zones and their properties.
 * @{
 */
 /**
 * Returns the number of configured zones on the dSM. 
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneCount_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneCount_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] ZoneCount Number of configured zones
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneCount(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t *ZoneCount);

/**
 * Returns the number of configured zones on the dSM. 
 * 
 * 
 * Response callback function prototype for call #ZoneCount.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_COUNT and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneCount Number of configured zones
 */
typedef void (*ZoneCount_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t ZoneCount);

/**
 * Returns the number of configured zones on the dSM. 
 * 
 * 
 * Request callback function prototype for call #ZoneCount.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_COUNT and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneCount_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Get info about a zone. Select the zone by sequential index (0 based).
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneInfo_by_index_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneInfo_by_index_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneIndex Index of the zone (0-15).
 * @param [out] ZoneId Global zone ID.
 * @param [out] VirtualZoneId Local zone ID (VSK, local to the dSM).
 * @param [out] NumberOfGroups Number of groups configured in the zone.
 * @param [out] Name Name of the zone (21 character, zero terminated string). (pass a reference to a preallocated buffer of at least 21 bytes.)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneInfo_by_index(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t ZoneIndex, uint16_t *ZoneId, uint8_t *VirtualZoneId, uint8_t *NumberOfGroups, uint8_t *Name);

/**
 * Get info about a zone. Select the zone by sequential index (0 based).
 * 
 * 
 * Response callback function prototype for call #ZoneInfo_by_index.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_INFO and ModifierId = #ZONE_INFO_BY_INDEX
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Global zone ID.
 * @param [in] VirtualZoneId Local zone ID (VSK, local to the dSM).
 * @param [in] NumberOfGroups Number of groups configured in the zone.
 * @param [in] Name Name of the zone (21 character, zero terminated string).
 */
typedef void (*ZoneInfo_by_index_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t VirtualZoneId, uint8_t NumberOfGroups, const uint8_t *Name);

/**
 * Get info about a zone. Select the zone by sequential index (0 based).
 * 
 * 
 * Request callback function prototype for call #ZoneInfo_by_index.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_INFO and ModifierId = #ZONE_INFO_BY_INDEX
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneIndex Index of the zone (0-15).
 */
typedef void (*ZoneInfo_by_index_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t ZoneIndex);

/**
 * Get info about a zone. Select the zone by its zone ID.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneInfo_by_id_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneInfo_by_id_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneIdReq Zone ID.
 * @param [out] ZoneId Global zone ID.
 * @param [out] VirtualZoneId Local zone ID (VSK, local to the dSM).
 * @param [out] NumberOfGroups Number of groups configured in the zone.
 * @param [out] Name Name of the zone (21 character, zero terminated string). (pass a reference to a preallocated buffer of at least 21 bytes.)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneInfo_by_id(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneIdReq, uint16_t *ZoneId, uint8_t *VirtualZoneId, uint8_t *NumberOfGroups, uint8_t *Name);

/**
 * Get info about a zone. Select the zone by its zone ID.
 * 
 * 
 * Response callback function prototype for call #ZoneInfo_by_id.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_INFO and ModifierId = #ZONE_INFO_BY_ID
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Global zone ID.
 * @param [in] VirtualZoneId Local zone ID (VSK, local to the dSM).
 * @param [in] NumberOfGroups Number of groups configured in the zone.
 * @param [in] Name Name of the zone (21 character, zero terminated string).
 */
typedef void (*ZoneInfo_by_id_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t VirtualZoneId, uint8_t NumberOfGroups, const uint8_t *Name);

/**
 * Get info about a zone. Select the zone by its zone ID.
 * 
 * 
 * Request callback function prototype for call #ZoneInfo_by_id.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_INFO and ModifierId = #ZONE_INFO_BY_ID
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneIdReq Zone ID.
 */
typedef void (*ZoneInfo_by_id_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneIdReq);

/**
 * Create a new zone with the given zone ID.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneModify_add_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneModify_add_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneModify_add(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId);

/**
 * Create a new zone with the given zone ID.
 * 
 * 
 * Response callback function prototype for call #ZoneModify_add.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_MODIFY and ModifierId = #ZONE_MODIFY_ADD
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneModify_add_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Create a new zone with the given zone ID.
 * 
 * 
 * Request callback function prototype for call #ZoneModify_add.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_MODIFY and ModifierId = #ZONE_MODIFY_ADD
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 */
typedef void (*ZoneModify_add_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId);

/**
 * Remove zone with given zone ID. Removing a zone is only possible if no devices are currently part of the zone.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneModify_remove_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneModify_remove_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneModify_remove(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId);

/**
 * Remove zone with given zone ID. Removing a zone is only possible if no devices are currently part of the zone.
 * 
 * 
 * Response callback function prototype for call #ZoneModify_remove.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_MODIFY and ModifierId = #ZONE_MODIFY_REMOVE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneModify_remove_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Remove zone with given zone ID. Removing a zone is only possible if no devices are currently part of the zone.
 * 
 * 
 * Request callback function prototype for call #ZoneModify_remove.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_MODIFY and ModifierId = #ZONE_MODIFY_REMOVE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 */
typedef void (*ZoneModify_remove_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId);

/**
 * Change the zone ID of the zone.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneModify_change_id_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneModify_change_id_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] NewZoneId New zone ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneModify_change_id(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint16_t NewZoneId);

/**
 * Change the zone ID of the zone.
 * 
 * 
 * Response callback function prototype for call #ZoneModify_change_id.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_MODIFY and ModifierId = #ZONE_MODIFY_CHANGE_ID
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneModify_change_id_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Change the zone ID of the zone.
 * 
 * 
 * Request callback function prototype for call #ZoneModify_change_id.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_MODIFY and ModifierId = #ZONE_MODIFY_CHANGE_ID
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] NewZoneId New zone ID.
 */
typedef void (*ZoneModify_change_id_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint16_t NewZoneId);

/**
 * Returns the number of active devices in a zone.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneDeviceCount_only_active_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneDeviceCount_only_active_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [out] NumberOfDevices Number of devices that are part of this zone.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneDeviceCount_only_active(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint16_t *NumberOfDevices);

/**
 * Returns the number of active devices in a zone.
 * 
 * 
 * Response callback function prototype for call #ZoneDeviceCount_only_active.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_DEVICE_COUNT and ModifierId = #ZONE_DEVICE_COUNT_ONLY_ACTIVE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] NumberOfDevices Number of devices that are part of this zone.
 */
typedef void (*ZoneDeviceCount_only_active_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t NumberOfDevices);

/**
 * Returns the number of active devices in a zone.
 * 
 * 
 * Request callback function prototype for call #ZoneDeviceCount_only_active.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_DEVICE_COUNT and ModifierId = #ZONE_DEVICE_COUNT_ONLY_ACTIVE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 */
typedef void (*ZoneDeviceCount_only_active_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId);

/**
 * Returns the number of inactive devices in a zone.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneDeviceCount_only_inactive_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneDeviceCount_only_inactive_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [out] NumberOfDevices Number of devices that are part of this zone.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneDeviceCount_only_inactive(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint16_t *NumberOfDevices);

/**
 * Returns the number of inactive devices in a zone.
 * 
 * 
 * Response callback function prototype for call #ZoneDeviceCount_only_inactive.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_DEVICE_COUNT and ModifierId = #ZONE_DEVICE_COUNT_ONLY_INACTIVE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] NumberOfDevices Number of devices that are part of this zone.
 */
typedef void (*ZoneDeviceCount_only_inactive_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t NumberOfDevices);

/**
 * Returns the number of inactive devices in a zone.
 * 
 * 
 * Request callback function prototype for call #ZoneDeviceCount_only_inactive.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_DEVICE_COUNT and ModifierId = #ZONE_DEVICE_COUNT_ONLY_INACTIVE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 */
typedef void (*ZoneDeviceCount_only_inactive_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId);

/**
 * Returns the number of devices in a zone.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneDeviceCount_all_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneDeviceCount_all_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [out] NumberOfDevices Number of devices that are part of this zone.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneDeviceCount_all(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint16_t *NumberOfDevices);

/**
 * Returns the number of devices in a zone.
 * 
 * 
 * Response callback function prototype for call #ZoneDeviceCount_all.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_DEVICE_COUNT and ModifierId = #ZONE_DEVICE_COUNT_ALL
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] NumberOfDevices Number of devices that are part of this zone.
 */
typedef void (*ZoneDeviceCount_all_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t NumberOfDevices);

/**
 * Returns the number of devices in a zone.
 * 
 * 
 * Request callback function prototype for call #ZoneDeviceCount_all.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_DEVICE_COUNT and ModifierId = #ZONE_DEVICE_COUNT_ALL
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 */
typedef void (*ZoneDeviceCount_all_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId);

/**
 * Set the name of the zone.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneProperties_set_name_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneProperties_set_name_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] Name Name of the zone (21 character, zero terminated string).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneProperties_set_name(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, const uint8_t *Name);

/**
 * Set the name of the zone.
 * 
 * 
 * Response callback function prototype for call #ZoneProperties_set_name.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_PROPERTIES and ModifierId = #ZONE_PROPERTIES_SET_NAME
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneProperties_set_name_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set the name of the zone.
 * 
 * 
 * Request callback function prototype for call #ZoneProperties_set_name.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_PROPERTIES and ModifierId = #ZONE_PROPERTIES_SET_NAME
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] Name Name of the zone (21 character, zero terminated string).
 */
typedef void (*ZoneProperties_set_name_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, const uint8_t *Name);

/**
 * Returns the most recently called scenes in this zone in descending order (e.g. Scene_0 is newest, Scene_6 is oldest).
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneProperties_get_scene_history_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneProperties_get_scene_history_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [out] HistorySize Number of valid history steps (0-7).
 * @param [out] GroupId_0 Bits 0-5: Group ID of the scene call, Bit 6: Set if call was 'Force_call_scene', Bit 7: Set if call was 'undo_scene_number'.
 * @param [out] Scene_0 Scene ID of the scene call.
 * @param [out] GroupId_1 See GroupId_0.
 * @param [out] Scene_1 See Scene_0.
 * @param [out] GroupId_2 See GroupId_0.
 * @param [out] Scene_2 See Scene_0.
 * @param [out] GroupId_3 See GroupId_0.
 * @param [out] Scene_3 See Scene_0.
 * @param [out] GroupId_4 See GroupId_0.
 * @param [out] Scene_4 See Scene_0.
 * @param [out] GroupId_5 See GroupId_0.
 * @param [out] Scene_5 See Scene_0.
 * @param [out] GroupId_6 See GroupId_0.
 * @param [out] Scene_6 See Scene_0.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneProperties_get_scene_history(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t *HistorySize, uint8_t *GroupId_0, uint8_t *Scene_0, uint8_t *GroupId_1, uint8_t *Scene_1, uint8_t *GroupId_2, uint8_t *Scene_2, uint8_t *GroupId_3, uint8_t *Scene_3, uint8_t *GroupId_4, uint8_t *Scene_4, uint8_t *GroupId_5, uint8_t *Scene_5, uint8_t *GroupId_6, uint8_t *Scene_6);

/**
 * Returns the most recently called scenes in this zone in descending order (e.g. Scene_0 is newest, Scene_6 is oldest).
 * 
 * 
 * Response callback function prototype for call #ZoneProperties_get_scene_history.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_PROPERTIES and ModifierId = #ZONE_PROPERTIES_GET_SCENE_HISTORY
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] HistorySize Number of valid history steps (0-7).
 * @param [in] GroupId_0 Bits 0-5: Group ID of the scene call, Bit 6: Set if call was 'Force_call_scene', Bit 7: Set if call was 'undo_scene_number'.
 * @param [in] Scene_0 Scene ID of the scene call.
 * @param [in] GroupId_1 See GroupId_0.
 * @param [in] Scene_1 See Scene_0.
 * @param [in] GroupId_2 See GroupId_0.
 * @param [in] Scene_2 See Scene_0.
 * @param [in] GroupId_3 See GroupId_0.
 * @param [in] Scene_3 See Scene_0.
 * @param [in] GroupId_4 See GroupId_0.
 * @param [in] Scene_4 See Scene_0.
 * @param [in] GroupId_5 See GroupId_0.
 * @param [in] Scene_5 See Scene_0.
 * @param [in] GroupId_6 See GroupId_0.
 * @param [in] Scene_6 See Scene_0.
 */
typedef void (*ZoneProperties_get_scene_history_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t HistorySize, uint8_t GroupId_0, uint8_t Scene_0, uint8_t GroupId_1, uint8_t Scene_1, uint8_t GroupId_2, uint8_t Scene_2, uint8_t GroupId_3, uint8_t Scene_3, uint8_t GroupId_4, uint8_t Scene_4, uint8_t GroupId_5, uint8_t Scene_5, uint8_t GroupId_6, uint8_t Scene_6);

/**
 * Returns the most recently called scenes in this zone in descending order (e.g. Scene_0 is newest, Scene_6 is oldest).
 * 
 * 
 * Request callback function prototype for call #ZoneProperties_get_scene_history.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_PROPERTIES and ModifierId = #ZONE_PROPERTIES_GET_SCENE_HISTORY
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 */
typedef void (*ZoneProperties_get_scene_history_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId);

/**
 * Get info about current room states. Returns the room state and associated areas for all groups (1-7). 0: room/area is in off state, 1: room/area is in on state.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneProperties_get_room_states_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneProperties_get_room_states_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [out] Room Room states (bit0: group 1, bit1: group 2, etc.).
 * @param [out] Area1 Area 1 states (bit0: group 1, bit1: group 2, etc.).
 * @param [out] Area2 Area 2 states (bit0: group 1, bit1: group 2, etc.).
 * @param [out] Area3 Area 3 states (bit0: group 1, bit1: group 2, etc.).
 * @param [out] Area4 Area 4 states (bit0: group 1, bit1: group 2, etc.).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneProperties_get_room_states(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint16_t *Room, uint16_t *Area1, uint16_t *Area2, uint16_t *Area3, uint16_t *Area4);

/**
 * Get info about current room states. Returns the room state and associated areas for all groups (1-7). 0: room/area is in off state, 1: room/area is in on state.
 * 
 * 
 * Response callback function prototype for call #ZoneProperties_get_room_states.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_PROPERTIES and ModifierId = #ZONE_PROPERTIES_GET_ROOM_STATES
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Room Room states (bit0: group 1, bit1: group 2, etc.).
 * @param [in] Area1 Area 1 states (bit0: group 1, bit1: group 2, etc.).
 * @param [in] Area2 Area 2 states (bit0: group 1, bit1: group 2, etc.).
 * @param [in] Area3 Area 3 states (bit0: group 1, bit1: group 2, etc.).
 * @param [in] Area4 Area 4 states (bit0: group 1, bit1: group 2, etc.).
 */
typedef void (*ZoneProperties_get_room_states_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t Room, uint16_t Area1, uint16_t Area2, uint16_t Area3, uint16_t Area4);

/**
 * Get info about current room states. Returns the room state and associated areas for all groups (1-7). 0: room/area is in off state, 1: room/area is in on state.
 * 
 * 
 * Request callback function prototype for call #ZoneProperties_get_room_states.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_PROPERTIES and ModifierId = #ZONE_PROPERTIES_GET_ROOM_STATES
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 */
typedef void (*ZoneProperties_get_room_states_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId);

/**
 * Set zone sensor.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneProperties_set_zone_sensor_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneProperties_set_zone_sensor_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] SensorType Sensor type
 * @param [in] dSUID dSUID of sensor responsible for this zone's temperature.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneProperties_set_zone_sensor(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t SensorType, dsuid_t dSUID);

/**
 * Set zone sensor.
 * 
 * 
 * Response callback function prototype for call #ZoneProperties_set_zone_sensor.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_PROPERTIES and ModifierId = #ZONE_PROPERTIES_SET_ZONE_SENSOR
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneProperties_set_zone_sensor_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set zone sensor.
 * 
 * 
 * Request callback function prototype for call #ZoneProperties_set_zone_sensor.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_PROPERTIES and ModifierId = #ZONE_PROPERTIES_SET_ZONE_SENSOR
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] SensorType Sensor type
 * @param [in] dSUID dSUID of sensor responsible for this zone's temperature.
 */
typedef void (*ZoneProperties_set_zone_sensor_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t SensorType, dsuid_t dSUID);

/**
 * Get zone sensor.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneProperties_get_zone_sensor_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneProperties_get_zone_sensor_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] SensorType Sensor type
 * @param [out] dSUID dSUID of sensor responsible for this zone's temperature. (pass a reference to a preallocated buffer of at least 17 bytes.)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneProperties_get_zone_sensor(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t SensorType, dsuid_t *dSUID);

/**
 * Get zone sensor.
 * 
 * 
 * Response callback function prototype for call #ZoneProperties_get_zone_sensor.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_PROPERTIES and ModifierId = #ZONE_PROPERTIES_GET_ZONE_SENSOR
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] dSUID dSUID of sensor responsible for this zone's temperature.
 */
typedef void (*ZoneProperties_get_zone_sensor_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, dsuid_t dSUID);

/**
 * Get zone sensor.
 * 
 * 
 * Request callback function prototype for call #ZoneProperties_get_zone_sensor.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_PROPERTIES and ModifierId = #ZONE_PROPERTIES_GET_ZONE_SENSOR
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] SensorType Sensor type
 */
typedef void (*ZoneProperties_get_zone_sensor_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t SensorType);

/**
 * Reset zone sensor.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneProperties_reset_zone_sensor_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneProperties_reset_zone_sensor_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] SensorType Sensor type
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneProperties_reset_zone_sensor(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t SensorType);

/**
 * Reset zone sensor.
 * 
 * 
 * Response callback function prototype for call #ZoneProperties_reset_zone_sensor.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_PROPERTIES and ModifierId = #ZONE_PROPERTIES_RESET_ZONE_SENSOR
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneProperties_reset_zone_sensor_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Reset zone sensor.
 * 
 * 
 * Request callback function prototype for call #ZoneProperties_reset_zone_sensor.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_PROPERTIES and ModifierId = #ZONE_PROPERTIES_RESET_ZONE_SENSOR
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] SensorType Sensor type
 */
typedef void (*ZoneProperties_reset_zone_sensor_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t SensorType);

/**
 * Get value and age of zone sensor.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneProperties_get_zone_sensor_value_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneProperties_get_zone_sensor_value_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] SensorType Sensor type
 * @param [out] SensorValue Current (last) value (10-bit).
 * @param [out] SensorAge Seconds since last update.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneProperties_get_zone_sensor_value(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t SensorType, uint16_t *SensorValue, uint32_t *SensorAge);

/**
 * Get value and age of zone sensor.
 * 
 * 
 * Response callback function prototype for call #ZoneProperties_get_zone_sensor_value.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_PROPERTIES and ModifierId = #ZONE_PROPERTIES_GET_ZONE_SENSOR_VALUE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] SensorValue Current (last) value (10-bit).
 * @param [in] SensorAge Seconds since last update.
 */
typedef void (*ZoneProperties_get_zone_sensor_value_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t SensorValue, uint32_t SensorAge);

/**
 * Get value and age of zone sensor.
 * 
 * 
 * Request callback function prototype for call #ZoneProperties_get_zone_sensor_value.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_PROPERTIES and ModifierId = #ZONE_PROPERTIES_GET_ZONE_SENSOR_VALUE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] SensorType Sensor type
 */
typedef void (*ZoneProperties_get_zone_sensor_value_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t SensorType);



/** @} */
/**
 * @defgroup Group Group
 *
 * This group of API calls addresses groups and their properties.
 * @{
 */
 /**
 * Add group to the given zone. User groups have group IDs 16-63. The StateMachineGroupId defines the behavior of buttons that are part of this group.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupModify_add_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupModify_add_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] StateMachineGroupId 0=The dSM signals all button actions with #EventDeviceAction_event_callback_t. 1-15=The button actions are handled according to this standard group's behavior.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupModify_add(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint8_t StateMachineGroupId);

/**
 * Add group to the given zone. User groups have group IDs 16-63. The StateMachineGroupId defines the behavior of buttons that are part of this group.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupModify_add.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_MODIFY and ModifierId = #ZONE_GROUP_MODIFY_ADD
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupModify_add_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Add group to the given zone. User groups have group IDs 16-63. The StateMachineGroupId defines the behavior of buttons that are part of this group.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupModify_add.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_MODIFY and ModifierId = #ZONE_GROUP_MODIFY_ADD
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] StateMachineGroupId 0=The dSM signals all button actions with #EventDeviceAction_event_callback_t. 1-15=The button actions are handled according to this standard group's behavior.
 */
typedef void (*ZoneGroupModify_add_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint8_t StateMachineGroupId);

/**
 * Remove a group from the given zone. Standard groups (0-15) can not be removed.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupModify_remove_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupModify_remove_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupModify_remove(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId);

/**
 * Remove a group from the given zone. Standard groups (0-15) can not be removed.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupModify_remove.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_MODIFY and ModifierId = #ZONE_GROUP_MODIFY_REMOVE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupModify_remove_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Remove a group from the given zone. Standard groups (0-15) can not be removed.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupModify_remove.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_MODIFY and ModifierId = #ZONE_GROUP_MODIFY_REMOVE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 */
typedef void (*ZoneGroupModify_remove_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId);

/**
 * Returns information of a group. Select the group by sequential index (0 based).
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupInfo_by_index_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupInfo_by_index_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] Index Index of requested group.
 * @param [out] GroupId Group ID.
 * @param [out] StateMachineGroupId Defines the behavior of buttons that are part of this group.
 * @param [out] NumberOfDevices Number of devices that are part of this group.
 * @param [out] Name The name of this group (21 character, zero terminated string). (pass a reference to a preallocated buffer of at least 21 bytes.)
 * @param [out] StopTimeout STOP timeout based on this dSMs devices.
 * @param [out] RemoteStopTimeout STOP timeout set from remote via dSM-API.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupInfo_by_index(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t Index, uint8_t *GroupId, uint8_t *StateMachineGroupId, uint16_t *NumberOfDevices, uint8_t *Name, uint8_t *StopTimeout, uint8_t *RemoteStopTimeout);

/**
 * Returns information of a group. Select the group by sequential index (0 based).
 * 
 * 
 * Response callback function prototype for call #ZoneGroupInfo_by_index.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_INFO and ModifierId = #ZONE_GROUP_INFO_BY_INDEX
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] GroupId Group ID.
 * @param [in] StateMachineGroupId Defines the behavior of buttons that are part of this group.
 * @param [in] NumberOfDevices Number of devices that are part of this group.
 * @param [in] Name The name of this group (21 character, zero terminated string).
 * @param [in] StopTimeout STOP timeout based on this dSMs devices.
 * @param [in] RemoteStopTimeout STOP timeout set from remote via dSM-API.
 */
typedef void (*ZoneGroupInfo_by_index_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t GroupId, uint8_t StateMachineGroupId, uint16_t NumberOfDevices, const uint8_t *Name, uint8_t StopTimeout, uint8_t RemoteStopTimeout);

/**
 * Returns information of a group. Select the group by sequential index (0 based).
 * 
 * 
 * Request callback function prototype for call #ZoneGroupInfo_by_index.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_INFO and ModifierId = #ZONE_GROUP_INFO_BY_INDEX
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] Index Index of requested group.
 */
typedef void (*ZoneGroupInfo_by_index_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t Index);

/**
 * Returns information of a group. Select the group by group ID.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupInfo_by_id_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupInfo_by_id_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupIdReq ID of requested group.
 * @param [out] GroupId Group ID.
 * @param [out] StateMachineGroupId Defines the behavior of buttons that are part of this group.
 * @param [out] NumberOfDevices Number of devices that are part of this group.
 * @param [out] Name The name of this group (21 character, zero terminated string). (pass a reference to a preallocated buffer of at least 21 bytes.)
 * @param [out] StopTimeout STOP timeout based on this dSMs devices.
 * @param [out] RemoteStopTimeout STOP timeout set from remote via dSM-API.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupInfo_by_id(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupIdReq, uint8_t *GroupId, uint8_t *StateMachineGroupId, uint16_t *NumberOfDevices, uint8_t *Name, uint8_t *StopTimeout, uint8_t *RemoteStopTimeout);

/**
 * Returns information of a group. Select the group by group ID.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupInfo_by_id.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_INFO and ModifierId = #ZONE_GROUP_INFO_BY_ID
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] GroupId Group ID.
 * @param [in] StateMachineGroupId Defines the behavior of buttons that are part of this group.
 * @param [in] NumberOfDevices Number of devices that are part of this group.
 * @param [in] Name The name of this group (21 character, zero terminated string).
 * @param [in] StopTimeout STOP timeout based on this dSMs devices.
 * @param [in] RemoteStopTimeout STOP timeout set from remote via dSM-API.
 */
typedef void (*ZoneGroupInfo_by_id_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t GroupId, uint8_t StateMachineGroupId, uint16_t NumberOfDevices, const uint8_t *Name, uint8_t StopTimeout, uint8_t RemoteStopTimeout);

/**
 * Returns information of a group. Select the group by group ID.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupInfo_by_id.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_INFO and ModifierId = #ZONE_GROUP_INFO_BY_ID
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupIdReq ID of requested group.
 */
typedef void (*ZoneGroupInfo_by_id_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupIdReq);

/**
 * Set the name of a group.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupProperties_set_name_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupProperties_set_name_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] Name The new name of this group (21 character, zero terminated string).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupProperties_set_name(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, const uint8_t *Name);

/**
 * Set the name of a group.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupProperties_set_name.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_PROPERTIES and ModifierId = #ZONE_GROUP_PROPERTIES_SET_NAME
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupProperties_set_name_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set the name of a group.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupProperties_set_name.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_PROPERTIES and ModifierId = #ZONE_GROUP_PROPERTIES_SET_NAME
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] Name The new name of this group (21 character, zero terminated string).
 */
typedef void (*ZoneGroupProperties_set_name_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, const uint8_t *Name);

/**
 * Set the STOP timeout of a group.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupProperties_set_stop_timeout_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupProperties_set_stop_timeout_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] StopTimeout The new STOP timeout in [s].
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupProperties_set_stop_timeout(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint8_t StopTimeout);

/**
 * Set the STOP timeout of a group.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupProperties_set_stop_timeout.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_PROPERTIES and ModifierId = #ZONE_GROUP_PROPERTIES_SET_STOP_TIMEOUT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupProperties_set_stop_timeout_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set the STOP timeout of a group.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupProperties_set_stop_timeout.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_PROPERTIES and ModifierId = #ZONE_GROUP_PROPERTIES_SET_STOP_TIMEOUT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] StopTimeout The new STOP timeout in [s].
 */
typedef void (*ZoneGroupProperties_set_stop_timeout_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint8_t StopTimeout);

/**
 * Set the state machine (color) of a user group.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupProperties_set_state_machine_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupProperties_set_state_machine_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] StateMachine The new state machine id (color).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupProperties_set_state_machine(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint8_t StateMachine);

/**
 * Set the state machine (color) of a user group.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupProperties_set_state_machine.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_PROPERTIES and ModifierId = #ZONE_GROUP_PROPERTIES_SET_STATE_MACHINE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupProperties_set_state_machine_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set the state machine (color) of a user group.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupProperties_set_state_machine.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_PROPERTIES and ModifierId = #ZONE_GROUP_PROPERTIES_SET_STATE_MACHINE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] StateMachine The new state machine id (color).
 */
typedef void (*ZoneGroupProperties_set_state_machine_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint8_t StateMachine);



/** @} */
/**
 * @defgroup Controller Controller
 *
 * This group of API allows configuration of the control algorithms.
 * @{
 */
 /**
 * 1) Currently it's not possible to change sampling period of PID (parameter 'Ts'). It must be set to '1'.
2) Parameters 'Imin', 'Imax' limit result of expression 'Integral*Ts/Ti', not 'Integral' alone.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ControllerHeating_set_config_response_callback_t callback.
 * To receive this request from other bus members register the #ControllerHeating_set_config_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] ControllerMode 0=off; 1=PID; 2=zone-follower; 3=fixed-action; 4=manual
 * @param [in] Kp Proportional factor (PID; 0..4000) (unit is 0.025)
 * @param [in] Ts Sampling time (PID; 1..60) (unit is 1 minute)
 * @param [in] Ti Integrator time constant (PID; 1..720) (unit is 1 minute)
 * @param [in] Kd Differential factor (PID; 0..1000)
 * @param [in] Imin Integrator minimal value (PID; -4000..4000) (signed with unit of 0.025 K)
 * @param [in] Imax Integrator maximal value (PID; -4000..4000) (signed with unit of 0.025 K)
 * @param [in] Ymin Minimal control value (PID; 100..200) (sensor type 51)
 * @param [in] Ymax Maximal control value (PID; 100..200) (sensor type 51)
 * @param [in] AntiWindUp Anti wind-up enabled (PID; 0..1)
 * @param [in] KeepFloorWarm t.b.d.
 * @param [in] SourceZoneId Zone ID of source zone (zone-follower)
 * @param [in] Offset Control value offset (zone-follower; -100..300) (signed with unit of 1%)
 * @param [in] ManualValue Manual control value (manual; 100..200) (sensor type 51)
 * @param [in] EmergencyValue Fixed control value in case of malfunction (all; 100..200) (sensort type 51)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ControllerHeating_set_config(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t ControllerMode, uint16_t Kp, uint8_t Ts, uint16_t Ti, uint16_t Kd, uint16_t Imin, uint16_t Imax, uint8_t Ymin, uint8_t Ymax, uint8_t AntiWindUp, uint8_t KeepFloorWarm, uint16_t SourceZoneId, uint16_t Offset, uint8_t ManualValue, uint8_t EmergencyValue);

/**
 * 1) Currently it's not possible to change sampling period of PID (parameter 'Ts'). It must be set to '1'.
2) Parameters 'Imin', 'Imax' limit result of expression 'Integral*Ts/Ti', not 'Integral' alone.
 * 
 * 
 * Response callback function prototype for call #ControllerHeating_set_config.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CONTROLLER_HEATING and ModifierId = #CONTROLLER_HEATING_SET_CONFIG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ControllerHeating_set_config_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * 1) Currently it's not possible to change sampling period of PID (parameter 'Ts'). It must be set to '1'.
2) Parameters 'Imin', 'Imax' limit result of expression 'Integral*Ts/Ti', not 'Integral' alone.
 * 
 * 
 * Request callback function prototype for call #ControllerHeating_set_config.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CONTROLLER_HEATING and ModifierId = #CONTROLLER_HEATING_SET_CONFIG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] ControllerMode 0=off; 1=PID; 2=zone-follower; 3=fixed-action; 4=manual
 * @param [in] Kp Proportional factor (PID; 0..4000) (unit is 0.025)
 * @param [in] Ts Sampling time (PID; 1..60) (unit is 1 minute)
 * @param [in] Ti Integrator time constant (PID; 1..720) (unit is 1 minute)
 * @param [in] Kd Differential factor (PID; 0..1000)
 * @param [in] Imin Integrator minimal value (PID; -4000..4000) (signed with unit of 0.025 K)
 * @param [in] Imax Integrator maximal value (PID; -4000..4000) (signed with unit of 0.025 K)
 * @param [in] Ymin Minimal control value (PID; 100..200) (sensor type 51)
 * @param [in] Ymax Maximal control value (PID; 100..200) (sensor type 51)
 * @param [in] AntiWindUp Anti wind-up enabled (PID; 0..1)
 * @param [in] KeepFloorWarm t.b.d.
 * @param [in] SourceZoneId Zone ID of source zone (zone-follower)
 * @param [in] Offset Control value offset (zone-follower; -100..300) (signed with unit of 1%)
 * @param [in] ManualValue Manual control value (manual; 100..200) (sensor type 51)
 * @param [in] EmergencyValue Fixed control value in case of malfunction (all; 100..200) (sensort type 51)
 */
typedef void (*ControllerHeating_set_config_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t ControllerMode, uint16_t Kp, uint8_t Ts, uint16_t Ti, uint16_t Kd, uint16_t Imin, uint16_t Imax, uint8_t Ymin, uint8_t Ymax, uint8_t AntiWindUp, uint8_t KeepFloorWarm, uint16_t SourceZoneId, uint16_t Offset, uint8_t ManualValue, uint8_t EmergencyValue);

/**
 * 
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ControllerHeating_get_config_response_callback_t callback.
 * To receive this request from other bus members register the #ControllerHeating_get_config_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [out] ControllerMode 0=off; 1=PID; 2=zone-follower; 3=fixed-action; 4=manual
 * @param [out] Kp Proportional factor
 * @param [out] Ts Sampling time
 * @param [out] Ti Integrator time constant
 * @param [out] Kd Differential factor
 * @param [out] Imin Integrator minimal value
 * @param [out] Imax Integrator maximal value
 * @param [out] Ymin Minimal control value
 * @param [out] Ymax Maximal control value
 * @param [out] AntiWindUp Anti wind-up enabled
 * @param [out] KeepFloorWarm t.b.d.
 * @param [out] SourceZoneId Zone ID of source zone for zone-follower
 * @param [out] Offset Control value offset
 * @param [out] ManualValue Manual control value
 * @param [out] EmergencyValue Fixed control value in case of malfunction
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ControllerHeating_get_config(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t *ControllerMode, uint16_t *Kp, uint8_t *Ts, uint16_t *Ti, uint16_t *Kd, uint16_t *Imin, uint16_t *Imax, uint8_t *Ymin, uint8_t *Ymax, uint8_t *AntiWindUp, uint8_t *KeepFloorWarm, uint16_t *SourceZoneId, uint16_t *Offset, uint8_t *ManualValue, uint8_t *EmergencyValue);

/**
 * 
 * 
 * 
 * Response callback function prototype for call #ControllerHeating_get_config.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CONTROLLER_HEATING and ModifierId = #CONTROLLER_HEATING_GET_CONFIG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ControllerMode 0=off; 1=PID; 2=zone-follower; 3=fixed-action; 4=manual
 * @param [in] Kp Proportional factor
 * @param [in] Ts Sampling time
 * @param [in] Ti Integrator time constant
 * @param [in] Kd Differential factor
 * @param [in] Imin Integrator minimal value
 * @param [in] Imax Integrator maximal value
 * @param [in] Ymin Minimal control value
 * @param [in] Ymax Maximal control value
 * @param [in] AntiWindUp Anti wind-up enabled
 * @param [in] KeepFloorWarm t.b.d.
 * @param [in] SourceZoneId Zone ID of source zone for zone-follower
 * @param [in] Offset Control value offset
 * @param [in] ManualValue Manual control value
 * @param [in] EmergencyValue Fixed control value in case of malfunction
 */
typedef void (*ControllerHeating_get_config_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t ControllerMode, uint16_t Kp, uint8_t Ts, uint16_t Ti, uint16_t Kd, uint16_t Imin, uint16_t Imax, uint8_t Ymin, uint8_t Ymax, uint8_t AntiWindUp, uint8_t KeepFloorWarm, uint16_t SourceZoneId, uint16_t Offset, uint8_t ManualValue, uint8_t EmergencyValue);

/**
 * 
 * 
 * 
 * Request callback function prototype for call #ControllerHeating_get_config.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CONTROLLER_HEATING and ModifierId = #CONTROLLER_HEATING_GET_CONFIG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 */
typedef void (*ControllerHeating_get_config_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId);

/**
 * Return inputs/output of PID controller and its internal values.
If PID is not running then error 'ERROR_REQUEST_CAN_NOT_BE_EXECUTED' is returned.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ControllerHeating_get_internals_response_callback_t callback.
 * To receive this request from other bus members register the #ControllerHeating_get_internals_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [out] t recent temperature (sensor type 9)
 * @param [out] tref recent temperature reference (sensor type 50)
 * @param [out] E temperature error (signed with unit of 0.025 K)
 * @param [out] Eprev temperature error in previous step (signed with unit of 0.025 K)
 * @param [out] Integral integrator state (signed with unit of 0.025 K)
 * @param [out] Yp output - proportional (signed with unit of 0.01 %)
 * @param [out] Yi output - integral (signed with unit of 0.01 %)
 * @param [out] Yd output - derivative (signed with unit of 0.01 %)
 * @param [out] Y controller action value (sensor type 51)
 * @param [out] AntiWindUp anti wind-up status (0=inactive; 1=active)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ControllerHeating_get_internals(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint16_t *t, uint16_t *tref, uint16_t *E, uint16_t *Eprev, uint32_t *Integral, uint32_t *Yp, uint32_t *Yi, uint32_t *Yd, uint8_t *Y, uint8_t *AntiWindUp);

/**
 * Return inputs/output of PID controller and its internal values.
If PID is not running then error 'ERROR_REQUEST_CAN_NOT_BE_EXECUTED' is returned.
 * 
 * 
 * Response callback function prototype for call #ControllerHeating_get_internals.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CONTROLLER_HEATING and ModifierId = #CONTROLLER_HEATING_GET_INTERNALS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] t recent temperature (sensor type 9)
 * @param [in] tref recent temperature reference (sensor type 50)
 * @param [in] E temperature error (signed with unit of 0.025 K)
 * @param [in] Eprev temperature error in previous step (signed with unit of 0.025 K)
 * @param [in] Integral integrator state (signed with unit of 0.025 K)
 * @param [in] Yp output - proportional (signed with unit of 0.01 %)
 * @param [in] Yi output - integral (signed with unit of 0.01 %)
 * @param [in] Yd output - derivative (signed with unit of 0.01 %)
 * @param [in] Y controller action value (sensor type 51)
 * @param [in] AntiWindUp anti wind-up status (0=inactive; 1=active)
 */
typedef void (*ControllerHeating_get_internals_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t t, uint16_t tref, uint16_t E, uint16_t Eprev, uint32_t Integral, uint32_t Yp, uint32_t Yi, uint32_t Yd, uint8_t Y, uint8_t AntiWindUp);

/**
 * Return inputs/output of PID controller and its internal values.
If PID is not running then error 'ERROR_REQUEST_CAN_NOT_BE_EXECUTED' is returned.
 * 
 * 
 * Request callback function prototype for call #ControllerHeating_get_internals.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CONTROLLER_HEATING and ModifierId = #CONTROLLER_HEATING_GET_INTERNALS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 */
typedef void (*ControllerHeating_get_internals_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId);

/**
 * 
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ControllerHeating_set_operation_modes_response_callback_t callback.
 * To receive this request from other bus members register the #ControllerHeating_set_operation_modes_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] OperationMode0 
 * @param [in] OperationMode1 
 * @param [in] OperationMode2 
 * @param [in] OperationMode3 
 * @param [in] OperationMode4 
 * @param [in] OperationMode5 
 * @param [in] OperationMode6 
 * @param [in] OperationMode7 
 * @param [in] OperationMode8 
 * @param [in] OperationMode9 
 * @param [in] OperationMode10 
 * @param [in] OperationMode11 
 * @param [in] OperationMode12 
 * @param [in] OperationMode13 
 * @param [in] OperationMode14 
 * @param [in] OperationMode15 
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ControllerHeating_set_operation_modes(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint16_t OperationMode0, uint16_t OperationMode1, uint16_t OperationMode2, uint16_t OperationMode3, uint16_t OperationMode4, uint16_t OperationMode5, uint16_t OperationMode6, uint16_t OperationMode7, uint16_t OperationMode8, uint16_t OperationMode9, uint16_t OperationMode10, uint16_t OperationMode11, uint16_t OperationMode12, uint16_t OperationMode13, uint16_t OperationMode14, uint16_t OperationMode15);

/**
 * 
 * 
 * 
 * Response callback function prototype for call #ControllerHeating_set_operation_modes.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CONTROLLER_HEATING and ModifierId = #CONTROLLER_HEATING_SET_OPERATION_MODES
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ControllerHeating_set_operation_modes_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * 
 * 
 * 
 * Request callback function prototype for call #ControllerHeating_set_operation_modes.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CONTROLLER_HEATING and ModifierId = #CONTROLLER_HEATING_SET_OPERATION_MODES
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] OperationMode0 
 * @param [in] OperationMode1 
 * @param [in] OperationMode2 
 * @param [in] OperationMode3 
 * @param [in] OperationMode4 
 * @param [in] OperationMode5 
 * @param [in] OperationMode6 
 * @param [in] OperationMode7 
 * @param [in] OperationMode8 
 * @param [in] OperationMode9 
 * @param [in] OperationMode10 
 * @param [in] OperationMode11 
 * @param [in] OperationMode12 
 * @param [in] OperationMode13 
 * @param [in] OperationMode14 
 * @param [in] OperationMode15 
 */
typedef void (*ControllerHeating_set_operation_modes_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint16_t OperationMode0, uint16_t OperationMode1, uint16_t OperationMode2, uint16_t OperationMode3, uint16_t OperationMode4, uint16_t OperationMode5, uint16_t OperationMode6, uint16_t OperationMode7, uint16_t OperationMode8, uint16_t OperationMode9, uint16_t OperationMode10, uint16_t OperationMode11, uint16_t OperationMode12, uint16_t OperationMode13, uint16_t OperationMode14, uint16_t OperationMode15);

/**
 * 
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ControllerHeating_get_operation_modes_response_callback_t callback.
 * To receive this request from other bus members register the #ControllerHeating_get_operation_modes_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [out] OperationMode0 
 * @param [out] OperationMode1 
 * @param [out] OperationMode2 
 * @param [out] OperationMode3 
 * @param [out] OperationMode4 
 * @param [out] OperationMode5 
 * @param [out] OperationMode6 
 * @param [out] OperationMode7 
 * @param [out] OperationMode8 
 * @param [out] OperationMode9 
 * @param [out] OperationMode10 
 * @param [out] OperationMode11 
 * @param [out] OperationMode12 
 * @param [out] OperationMode13 
 * @param [out] OperationMode14 
 * @param [out] OperationMode15 
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ControllerHeating_get_operation_modes(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint16_t *OperationMode0, uint16_t *OperationMode1, uint16_t *OperationMode2, uint16_t *OperationMode3, uint16_t *OperationMode4, uint16_t *OperationMode5, uint16_t *OperationMode6, uint16_t *OperationMode7, uint16_t *OperationMode8, uint16_t *OperationMode9, uint16_t *OperationMode10, uint16_t *OperationMode11, uint16_t *OperationMode12, uint16_t *OperationMode13, uint16_t *OperationMode14, uint16_t *OperationMode15);

/**
 * 
 * 
 * 
 * Response callback function prototype for call #ControllerHeating_get_operation_modes.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CONTROLLER_HEATING and ModifierId = #CONTROLLER_HEATING_GET_OPERATION_MODES
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] OperationMode0 
 * @param [in] OperationMode1 
 * @param [in] OperationMode2 
 * @param [in] OperationMode3 
 * @param [in] OperationMode4 
 * @param [in] OperationMode5 
 * @param [in] OperationMode6 
 * @param [in] OperationMode7 
 * @param [in] OperationMode8 
 * @param [in] OperationMode9 
 * @param [in] OperationMode10 
 * @param [in] OperationMode11 
 * @param [in] OperationMode12 
 * @param [in] OperationMode13 
 * @param [in] OperationMode14 
 * @param [in] OperationMode15 
 */
typedef void (*ControllerHeating_get_operation_modes_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t OperationMode0, uint16_t OperationMode1, uint16_t OperationMode2, uint16_t OperationMode3, uint16_t OperationMode4, uint16_t OperationMode5, uint16_t OperationMode6, uint16_t OperationMode7, uint16_t OperationMode8, uint16_t OperationMode9, uint16_t OperationMode10, uint16_t OperationMode11, uint16_t OperationMode12, uint16_t OperationMode13, uint16_t OperationMode14, uint16_t OperationMode15);

/**
 * 
 * 
 * 
 * Request callback function prototype for call #ControllerHeating_get_operation_modes.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CONTROLLER_HEATING and ModifierId = #CONTROLLER_HEATING_GET_OPERATION_MODES
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 */
typedef void (*ControllerHeating_get_operation_modes_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId);

/**
 * 
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ControllerHeating_set_state_response_callback_t callback.
 * To receive this request from other bus members register the #ControllerHeating_set_state_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] State 0=internal; 1=external; 2=external_backup; 3=emergency
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ControllerHeating_set_state(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t State);

/**
 * 
 * 
 * 
 * Response callback function prototype for call #ControllerHeating_set_state.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CONTROLLER_HEATING and ModifierId = #CONTROLLER_HEATING_SET_STATE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ControllerHeating_set_state_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * 
 * 
 * 
 * Request callback function prototype for call #ControllerHeating_set_state.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CONTROLLER_HEATING and ModifierId = #CONTROLLER_HEATING_SET_STATE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] State 0=internal; 1=external; 2=external_backup; 3=emergency
 */
typedef void (*ControllerHeating_set_state_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t State);

/**
 * 
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ControllerHeating_get_state_response_callback_t callback.
 * To receive this request from other bus members register the #ControllerHeating_get_state_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [out] State 0=internal; 1=external; 2=external_backup; 3=emergency
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ControllerHeating_get_state(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t *State);

/**
 * 
 * 
 * 
 * Response callback function prototype for call #ControllerHeating_get_state.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CONTROLLER_HEATING and ModifierId = #CONTROLLER_HEATING_GET_STATE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] State 0=internal; 1=external; 2=external_backup; 3=emergency
 */
typedef void (*ControllerHeating_get_state_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t State);

/**
 * 
 * 
 * 
 * Request callback function prototype for call #ControllerHeating_get_state.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CONTROLLER_HEATING and ModifierId = #CONTROLLER_HEATING_GET_STATE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 */
typedef void (*ControllerHeating_get_state_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId);



/**
 * 
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_HEATING_CONTROLLER_STATE and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] State 0=internal; 1=external; 2=external_backup; 3=emergency
 */
typedef void (*EventHeatingControllerState_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t State);

/** @} */
/**
 * @defgroup Scene Scene
 *
 * This group of API calls addresses scenes and their properties.
 * @{
 */
 /**
 * Returns the properties of a scene. 
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupSceneInfo_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupSceneInfo_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] SceneId Scene ID.
 * @param [out] Name The name of this scene (21 character, zero terminated string). (pass a reference to a preallocated buffer of at least 21 bytes.)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupSceneInfo(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint8_t SceneId, uint8_t *Name);

/**
 * Returns the properties of a scene. 
 * 
 * 
 * Response callback function prototype for call #ZoneGroupSceneInfo.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_SCENE_INFO and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Name The name of this scene (21 character, zero terminated string).
 */
typedef void (*ZoneGroupSceneInfo_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, const uint8_t *Name);

/**
 * Returns the properties of a scene. 
 * 
 * 
 * Request callback function prototype for call #ZoneGroupSceneInfo.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_SCENE_INFO and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] SceneId Scene ID.
 */
typedef void (*ZoneGroupSceneInfo_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint8_t SceneId);

/**
 * Set the name of a scene.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupSceneProperties_set_name_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupSceneProperties_set_name_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] SceneId Scene ID.
 * @param [in] Name The new name of this scene (21 character, zero terminated string).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupSceneProperties_set_name(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint8_t SceneId, const uint8_t *Name);

/**
 * Set the name of a scene.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupSceneProperties_set_name.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_SCENE_PROPERTIES and ModifierId = #ZONE_GROUP_SCENE_PROPERTIES_SET_NAME
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupSceneProperties_set_name_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set the name of a scene.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupSceneProperties_set_name.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_SCENE_PROPERTIES and ModifierId = #ZONE_GROUP_SCENE_PROPERTIES_SET_NAME
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] SceneId Scene ID.
 * @param [in] Name The new name of this scene (21 character, zero terminated string).
 */
typedef void (*ZoneGroupSceneProperties_set_name_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint8_t SceneId, const uint8_t *Name);

/**
 * Execute actions on all devices of a zone/group. Call a scene.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupActionRequest_action_call_scene_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupActionRequest_action_call_scene_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] SceneId Scene ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupActionRequest_action_call_scene(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t SceneId);

/**
 * Execute actions on all devices of a zone/group. Call a scene.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupActionRequest_action_call_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_CALL_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupActionRequest_action_call_scene_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on all devices of a zone/group. Call a scene.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupActionRequest_action_call_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_CALL_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] SceneId Scene ID.
 */
typedef void (*ZoneGroupActionRequest_action_call_scene_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t SceneId);

/**
 * Execute actions on all devices of a zone/group. Save the current state in given scene.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupActionRequest_action_save_scene_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupActionRequest_action_save_scene_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] SceneId Scene ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupActionRequest_action_save_scene(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t SceneId);

/**
 * Execute actions on all devices of a zone/group. Save the current state in given scene.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupActionRequest_action_save_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_SAVE_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupActionRequest_action_save_scene_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on all devices of a zone/group. Save the current state in given scene.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupActionRequest_action_save_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_SAVE_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] SceneId Scene ID.
 */
typedef void (*ZoneGroupActionRequest_action_save_scene_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t SceneId);

/**
 * Execute actions on all devices of a zone/group. Instruct the devices to undo the last scene call.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupActionRequest_action_undo_scene_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupActionRequest_action_undo_scene_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupActionRequest_action_undo_scene(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId);

/**
 * Execute actions on all devices of a zone/group. Instruct the devices to undo the last scene call.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupActionRequest_action_undo_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_UNDO_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupActionRequest_action_undo_scene_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on all devices of a zone/group. Instruct the devices to undo the last scene call.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupActionRequest_action_undo_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_UNDO_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 */
typedef void (*ZoneGroupActionRequest_action_undo_scene_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId);

/**
 * Execute actions on all devices of a zone/group. Let all devices of the zone/group blink their load.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupActionRequest_action_blink_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupActionRequest_action_blink_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupActionRequest_action_blink(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId);

/**
 * Execute actions on all devices of a zone/group. Let all devices of the zone/group blink their load.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupActionRequest_action_blink.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_BLINK
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupActionRequest_action_blink_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on all devices of a zone/group. Let all devices of the zone/group blink their load.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupActionRequest_action_blink.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_BLINK
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 */
typedef void (*ZoneGroupActionRequest_action_blink_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId);

/**
 * Execute actions on all devices of a zone/group. Instruct the devices to undo the last scene call if it was the scene with the given scene ID.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupActionRequest_action_undo_scene_number_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupActionRequest_action_undo_scene_number_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] SceneId Scene ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupActionRequest_action_undo_scene_number(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t SceneId);

/**
 * Execute actions on all devices of a zone/group. Instruct the devices to undo the last scene call if it was the scene with the given scene ID.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupActionRequest_action_undo_scene_number.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_UNDO_SCENE_NUMBER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupActionRequest_action_undo_scene_number_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on all devices of a zone/group. Instruct the devices to undo the last scene call if it was the scene with the given scene ID.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupActionRequest_action_undo_scene_number.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_UNDO_SCENE_NUMBER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] SceneId Scene ID.
 */
typedef void (*ZoneGroupActionRequest_action_undo_scene_number_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t SceneId);

/**
 * Execute actions on all devices of a zone/group. Call a scene in the zone/group. Overwrite any locally selected state.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupActionRequest_action_force_call_scene_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupActionRequest_action_force_call_scene_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] SceneId Scene ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupActionRequest_action_force_call_scene(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t SceneId);

/**
 * Execute actions on all devices of a zone/group. Call a scene in the zone/group. Overwrite any locally selected state.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupActionRequest_action_force_call_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_FORCE_CALL_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupActionRequest_action_force_call_scene_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on all devices of a zone/group. Call a scene in the zone/group. Overwrite any locally selected state.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupActionRequest_action_force_call_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_FORCE_CALL_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] SceneId Scene ID.
 */
typedef void (*ZoneGroupActionRequest_action_force_call_scene_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t SceneId);

/**
 * Execute actions on all devices of a zone/group. Set the output to the given value independent of any scene configurations.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupActionRequest_action_set_outval_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupActionRequest_action_set_outval_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] Value Output value (0-255).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupActionRequest_action_set_outval(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t Value);

/**
 * Execute actions on all devices of a zone/group. Set the output to the given value independent of any scene configurations.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupActionRequest_action_set_outval.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_SET_OUTVAL
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupActionRequest_action_set_outval_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on all devices of a zone/group. Set the output to the given value independent of any scene configurations.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupActionRequest_action_set_outval.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_SET_OUTVAL
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] Value Output value (0-255).
 */
typedef void (*ZoneGroupActionRequest_action_set_outval_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t Value);

/**
 * Execute actions on all devices of a zone/group. Set local priority on all devices that have #SceneId active.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupActionRequest_action_set_scene_local_priority_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupActionRequest_action_set_scene_local_priority_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] SceneId Scene ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupActionRequest_action_set_scene_local_priority(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t SceneId);

/**
 * Execute actions on all devices of a zone/group. Set local priority on all devices that have #SceneId active.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupActionRequest_action_set_scene_local_priority.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_SET_SCENE_LOCAL_PRIORITY
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupActionRequest_action_set_scene_local_priority_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on all devices of a zone/group. Set local priority on all devices that have #SceneId active.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupActionRequest_action_set_scene_local_priority.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_SET_SCENE_LOCAL_PRIORITY
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] SceneId Scene ID.
 */
typedef void (*ZoneGroupActionRequest_action_set_scene_local_priority_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t SceneId);

/**
 * Execute actions on all devices of a zone/group. Start Programming mode.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupActionRequest_action_programming_mode_on_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupActionRequest_action_programming_mode_on_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupActionRequest_action_programming_mode_on(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId);

/**
 * Execute actions on all devices of a zone/group. Start Programming mode.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupActionRequest_action_programming_mode_on.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_PROGRAMMING_MODE_ON
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupActionRequest_action_programming_mode_on_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on all devices of a zone/group. Start Programming mode.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupActionRequest_action_programming_mode_on.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_PROGRAMMING_MODE_ON
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 */
typedef void (*ZoneGroupActionRequest_action_programming_mode_on_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId);

/**
 * Execute actions on all devices of a zone/group. Finish programming mode.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupActionRequest_action_programming_mode_off_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupActionRequest_action_programming_mode_off_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupActionRequest_action_programming_mode_off(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId);

/**
 * Execute actions on all devices of a zone/group. Finish programming mode.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupActionRequest_action_programming_mode_off.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_PROGRAMMING_MODE_OFF
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupActionRequest_action_programming_mode_off_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on all devices of a zone/group. Finish programming mode.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupActionRequest_action_programming_mode_off.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_PROGRAMMING_MODE_OFF
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 */
typedef void (*ZoneGroupActionRequest_action_programming_mode_off_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId);

/**
 * Execute actions on all devices of a zone/group. Preselect the group in this zone.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupActionRequest_action_select_group_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupActionRequest_action_select_group_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupActionRequest_action_select_group(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId);

/**
 * Execute actions on all devices of a zone/group. Preselect the group in this zone.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupActionRequest_action_select_group.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_SELECT_GROUP
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupActionRequest_action_select_group_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on all devices of a zone/group. Preselect the group in this zone.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupActionRequest_action_select_group.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_SELECT_GROUP
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 */
typedef void (*ZoneGroupActionRequest_action_select_group_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId);

/**
 * Execute actions on all devices of a zone/group. Register local priority.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupActionRequest_action_register_scene_local_priority_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupActionRequest_action_register_scene_local_priority_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] SceneId Scene ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupActionRequest_action_register_scene_local_priority(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t SceneId);

/**
 * Execute actions on all devices of a zone/group. Register local priority.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupActionRequest_action_register_scene_local_priority.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_REGISTER_SCENE_LOCAL_PRIORITY
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupActionRequest_action_register_scene_local_priority_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on all devices of a zone/group. Register local priority.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupActionRequest_action_register_scene_local_priority.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_REGISTER_SCENE_LOCAL_PRIORITY
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] SceneId Scene ID.
 */
typedef void (*ZoneGroupActionRequest_action_register_scene_local_priority_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t SceneId);

/**
 * Execute actions on all devices of a zone/group. Prepare the devices for dimming from zero.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupActionRequest_action_call_scene_min_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupActionRequest_action_call_scene_min_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] SceneId Scene ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupActionRequest_action_call_scene_min(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t SceneId);

/**
 * Execute actions on all devices of a zone/group. Prepare the devices for dimming from zero.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupActionRequest_action_call_scene_min.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_CALL_SCENE_MIN
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupActionRequest_action_call_scene_min_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on all devices of a zone/group. Prepare the devices for dimming from zero.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupActionRequest_action_call_scene_min.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_CALL_SCENE_MIN
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] SceneId Scene ID.
 */
typedef void (*ZoneGroupActionRequest_action_call_scene_min_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t SceneId);

/**
 * Execute actions on all devices of a zone/group. A device has reached its final position during calibration mode.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupActionRequest_action_local_stop_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupActionRequest_action_local_stop_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupActionRequest_action_local_stop(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId);

/**
 * Execute actions on all devices of a zone/group. A device has reached its final position during calibration mode.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupActionRequest_action_local_stop.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_LOCAL_STOP
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupActionRequest_action_local_stop_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on all devices of a zone/group. A device has reached its final position during calibration mode.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupActionRequest_action_local_stop.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_LOCAL_STOP
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 */
typedef void (*ZoneGroupActionRequest_action_local_stop_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId);

/**
 * Execute actions on all devices of a zone/group. Increase value of selected output channel.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupActionRequest_action_opc_inc_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupActionRequest_action_opc_inc_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] ChannelId Output channel id.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupActionRequest_action_opc_inc(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t ChannelId);

/**
 * Execute actions on all devices of a zone/group. Increase value of selected output channel.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupActionRequest_action_opc_inc.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_OPC_INC
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupActionRequest_action_opc_inc_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on all devices of a zone/group. Increase value of selected output channel.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupActionRequest_action_opc_inc.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_OPC_INC
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] ChannelId Output channel id.
 */
typedef void (*ZoneGroupActionRequest_action_opc_inc_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t ChannelId);

/**
 * Execute actions on all devices of a zone/group. Decrease value of selected output channel.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupActionRequest_action_opc_dec_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupActionRequest_action_opc_dec_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] ChannelId Output channel id.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupActionRequest_action_opc_dec(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t ChannelId);

/**
 * Execute actions on all devices of a zone/group. Decrease value of selected output channel.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupActionRequest_action_opc_dec.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_OPC_DEC
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupActionRequest_action_opc_dec_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on all devices of a zone/group. Decrease value of selected output channel.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupActionRequest_action_opc_dec.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_OPC_DEC
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] ChannelId Output channel id.
 */
typedef void (*ZoneGroupActionRequest_action_opc_dec_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t ChannelId);

/**
 * Execute actions on all devices of a zone/group. Stop dimming value of selected output channel.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupActionRequest_action_opc_stop_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupActionRequest_action_opc_stop_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] ChannelId Output channel id.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupActionRequest_action_opc_stop(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t ChannelId);

/**
 * Execute actions on all devices of a zone/group. Stop dimming value of selected output channel.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupActionRequest_action_opc_stop.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_OPC_STOP
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupActionRequest_action_opc_stop_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on all devices of a zone/group. Stop dimming value of selected output channel.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupActionRequest_action_opc_stop.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_OPC_STOP
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] ChannelId Output channel id.
 */
typedef void (*ZoneGroupActionRequest_action_opc_stop_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t ChannelId);

/**
 * Execute actions on all devices of a zone/group. Send extra command.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupActionRequest_action_extra_command_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupActionRequest_action_extra_command_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] Command Commands: 0 = Unlock, 1 = Lock.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupActionRequest_action_extra_command(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t Command);

/**
 * Execute actions on all devices of a zone/group. Send extra command.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupActionRequest_action_extra_command.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_EXTRA_COMMAND
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupActionRequest_action_extra_command_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on all devices of a zone/group. Send extra command.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupActionRequest_action_extra_command.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_ACTION_REQUEST and ModifierId = #ZONE_GROUP_ACTION_REQUEST_ACTION_EXTRA_COMMAND
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] OriginDeviceId Device ID of the origin device (0 if unknown).
 * @param [in] Command Commands: 0 = Unlock, 1 = Lock.
 */
typedef void (*ZoneGroupActionRequest_action_extra_command_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint16_t OriginDeviceId, uint8_t Command);

/**
 * Distribute sensor values to devices. 
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupSensorPush_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupSensorPush_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] dSUID dSUID of sensor value source device. A dSUID of 0 overrides the setting in the Push table and sends out the value in any case.
 * @param [in] SensorType Type of sensor value.
 * @param [in] Value 12-bit sensor value.
 * @param [in] Precision 0=use bits 11:2, 1=use bits 9:0 for push.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupSensorPush(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, dsuid_t dSUID, uint8_t SensorType, uint16_t Value, uint8_t Precision);

/**
 * Distribute sensor values to devices. 
 * 
 * 
 * Response callback function prototype for call #ZoneGroupSensorPush.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_SENSOR_PUSH and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupSensorPush_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Distribute sensor values to devices. 
 * 
 * 
 * Request callback function prototype for call #ZoneGroupSensorPush.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_SENSOR_PUSH and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Zone ID.
 * @param [in] GroupId Group ID.
 * @param [in] dSUID dSUID of sensor value source device. A dSUID of 0 overrides the setting in the Push table and sends out the value in any case.
 * @param [in] SensorType Type of sensor value.
 * @param [in] Value 12-bit sensor value.
 * @param [in] Precision 0=use bits 11:2, 1=use bits 9:0 for push.
 */
typedef void (*ZoneGroupSensorPush_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, dsuid_t dSUID, uint8_t SensorType, uint16_t Value, uint8_t Precision);



/** @} */
/**
 * @defgroup Device Device
 *
 * This group of API calls addresses single devices and their properties.
 * @{
 */
 /**
 * Returns the properties of a device. Select the device sequentially from all active devices of a zone (0 based).
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceInfo_by_index_only_active_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceInfo_by_index_only_active_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneIdReq 0 for all zones
 * @param [in] DeviceIndex 0 .. ZoneDeviceCount
 * @param [out] DeviceId Device identifier in the digitalSTROM network.
 * @param [out] VendorId Device vendor identification.
 * @param [out] ProductId Product identifier.
 * @param [out] FunctionId Functionality declaration.
 * @param [out] Version Device software version
 * @param [out] ZoneId Device is member of this zone.
 * @param [out] State 0=Inactive, 1=Active
 * @param [out] Locked 0=Not locked, 1=Locked. If set, any action requests are ignored by the dSM.
 * @param [out] OutputMode Cached device MODE register (Class=3, Offset=0).
 * @param [out] LTMode Cached device LTMODE register (Class=3, Offset=0x1e)
 * @param [out] Groups Bitfield of group memberships. 1=Group member (pass a reference to a preallocated buffer of at least 8 bytes.)
 * @param [out] Name Device name (21 character, zero terminated string). (pass a reference to a preallocated buffer of at least 21 bytes.)
 * @param [out] dSUID dSUID of the device (pass a reference to a preallocated buffer of at least 17 bytes.)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceInfo_by_index_only_active(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneIdReq, uint16_t DeviceIndex, uint16_t *DeviceId, uint16_t *VendorId, uint16_t *ProductId, uint16_t *FunctionId, uint16_t *Version, uint16_t *ZoneId, uint8_t *State, uint8_t *Locked, uint8_t *OutputMode, uint8_t *LTMode, uint8_t *Groups, uint8_t *Name, dsuid_t *dSUID);

/**
 * Returns the properties of a device. Select the device sequentially from all active devices of a zone (0 based).
 * 
 * 
 * Response callback function prototype for call #DeviceInfo_by_index_only_active.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_INFO and ModifierId = #DEVICE_INFO_BY_INDEX_ONLY_ACTIVE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device identifier in the digitalSTROM network.
 * @param [in] VendorId Device vendor identification.
 * @param [in] ProductId Product identifier.
 * @param [in] FunctionId Functionality declaration.
 * @param [in] Version Device software version
 * @param [in] ZoneId Device is member of this zone.
 * @param [in] State 0=Inactive, 1=Active
 * @param [in] Locked 0=Not locked, 1=Locked. If set, any action requests are ignored by the dSM.
 * @param [in] OutputMode Cached device MODE register (Class=3, Offset=0).
 * @param [in] LTMode Cached device LTMODE register (Class=3, Offset=0x1e)
 * @param [in] Groups Bitfield of group memberships. 1=Group member
 * @param [in] Name Device name (21 character, zero terminated string).
 * @param [in] dSUID dSUID of the device
 */
typedef void (*DeviceInfo_by_index_only_active_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint16_t VendorId, uint16_t ProductId, uint16_t FunctionId, uint16_t Version, uint16_t ZoneId, uint8_t State, uint8_t Locked, uint8_t OutputMode, uint8_t LTMode, const uint8_t *Groups, const uint8_t *Name, dsuid_t dSUID);

/**
 * Returns the properties of a device. Select the device sequentially from all active devices of a zone (0 based).
 * 
 * 
 * Request callback function prototype for call #DeviceInfo_by_index_only_active.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_INFO and ModifierId = #DEVICE_INFO_BY_INDEX_ONLY_ACTIVE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneIdReq 0 for all zones
 * @param [in] DeviceIndex 0 .. ZoneDeviceCount
 */
typedef void (*DeviceInfo_by_index_only_active_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneIdReq, uint16_t DeviceIndex);

/**
 * Returns the properties of a device. Select the device sequentially from all inactive devices of a zone (0 based).
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceInfo_by_index_only_inactive_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceInfo_by_index_only_inactive_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneIdReq 0 for all zones
 * @param [in] DeviceIndex 0 .. ZoneDeviceCount
 * @param [out] DeviceId Device identifier in the digitalSTROM network.
 * @param [out] VendorId Device vendor identification.
 * @param [out] ProductId Product identifier.
 * @param [out] FunctionId Functionality declaration.
 * @param [out] Version Device software version
 * @param [out] ZoneId Device is member of this zone.
 * @param [out] State 0=Inactive, 1=Active
 * @param [out] Locked 0=Not locked, 1=Locked. If set, any action requests are ignored by the dSM.
 * @param [out] OutputMode Cached device MODE register (Class=3, Offset=0).
 * @param [out] LTMode Cached device LTMODE register (Class=3, Offset=0x1e)
 * @param [out] Groups Bitfield of group memberships. 1=Group member (pass a reference to a preallocated buffer of at least 8 bytes.)
 * @param [out] Name Device name (21 character, zero terminated string). (pass a reference to a preallocated buffer of at least 21 bytes.)
 * @param [out] dSUID dSUID of the device (pass a reference to a preallocated buffer of at least 17 bytes.)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceInfo_by_index_only_inactive(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneIdReq, uint16_t DeviceIndex, uint16_t *DeviceId, uint16_t *VendorId, uint16_t *ProductId, uint16_t *FunctionId, uint16_t *Version, uint16_t *ZoneId, uint8_t *State, uint8_t *Locked, uint8_t *OutputMode, uint8_t *LTMode, uint8_t *Groups, uint8_t *Name, dsuid_t *dSUID);

/**
 * Returns the properties of a device. Select the device sequentially from all inactive devices of a zone (0 based).
 * 
 * 
 * Response callback function prototype for call #DeviceInfo_by_index_only_inactive.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_INFO and ModifierId = #DEVICE_INFO_BY_INDEX_ONLY_INACTIVE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device identifier in the digitalSTROM network.
 * @param [in] VendorId Device vendor identification.
 * @param [in] ProductId Product identifier.
 * @param [in] FunctionId Functionality declaration.
 * @param [in] Version Device software version
 * @param [in] ZoneId Device is member of this zone.
 * @param [in] State 0=Inactive, 1=Active
 * @param [in] Locked 0=Not locked, 1=Locked. If set, any action requests are ignored by the dSM.
 * @param [in] OutputMode Cached device MODE register (Class=3, Offset=0).
 * @param [in] LTMode Cached device LTMODE register (Class=3, Offset=0x1e)
 * @param [in] Groups Bitfield of group memberships. 1=Group member
 * @param [in] Name Device name (21 character, zero terminated string).
 * @param [in] dSUID dSUID of the device
 */
typedef void (*DeviceInfo_by_index_only_inactive_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint16_t VendorId, uint16_t ProductId, uint16_t FunctionId, uint16_t Version, uint16_t ZoneId, uint8_t State, uint8_t Locked, uint8_t OutputMode, uint8_t LTMode, const uint8_t *Groups, const uint8_t *Name, dsuid_t dSUID);

/**
 * Returns the properties of a device. Select the device sequentially from all inactive devices of a zone (0 based).
 * 
 * 
 * Request callback function prototype for call #DeviceInfo_by_index_only_inactive.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_INFO and ModifierId = #DEVICE_INFO_BY_INDEX_ONLY_INACTIVE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneIdReq 0 for all zones
 * @param [in] DeviceIndex 0 .. ZoneDeviceCount
 */
typedef void (*DeviceInfo_by_index_only_inactive_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneIdReq, uint16_t DeviceIndex);

/**
 * Returns the properties of a device. Select the device sequentially from all devices of a zone (0 based).
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceInfo_by_index_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceInfo_by_index_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneIdReq 0 for all zones
 * @param [in] DeviceIndex 0 .. ZoneDeviceCount
 * @param [out] DeviceId Device identifier in the digitalSTROM network.
 * @param [out] VendorId Device vendor identification.
 * @param [out] ProductId Product identifier.
 * @param [out] FunctionId Functionality declaration.
 * @param [out] Version Device software version
 * @param [out] ZoneId Device is member of this zone.
 * @param [out] State 0=Inactive, 1=Active
 * @param [out] Locked 0=Not locked, 1=Locked. If set, any action requests are ignored by the dSM.
 * @param [out] OutputMode Cached device MODE register (Class=3, Offset=0).
 * @param [out] LTMode Cached device LTMODE register (Class=3, Offset=0x1e)
 * @param [out] Groups Bitfield of group memberships. 1=Group member (pass a reference to a preallocated buffer of at least 8 bytes.)
 * @param [out] Name Device name (21 character, zero terminated string). (pass a reference to a preallocated buffer of at least 21 bytes.)
 * @param [out] dSUID dSUID of the device (pass a reference to a preallocated buffer of at least 17 bytes.)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceInfo_by_index(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneIdReq, uint16_t DeviceIndex, uint16_t *DeviceId, uint16_t *VendorId, uint16_t *ProductId, uint16_t *FunctionId, uint16_t *Version, uint16_t *ZoneId, uint8_t *State, uint8_t *Locked, uint8_t *OutputMode, uint8_t *LTMode, uint8_t *Groups, uint8_t *Name, dsuid_t *dSUID);

/**
 * Returns the properties of a device. Select the device sequentially from all devices of a zone (0 based).
 * 
 * 
 * Response callback function prototype for call #DeviceInfo_by_index.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_INFO and ModifierId = #DEVICE_INFO_BY_INDEX
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device identifier in the digitalSTROM network.
 * @param [in] VendorId Device vendor identification.
 * @param [in] ProductId Product identifier.
 * @param [in] FunctionId Functionality declaration.
 * @param [in] Version Device software version
 * @param [in] ZoneId Device is member of this zone.
 * @param [in] State 0=Inactive, 1=Active
 * @param [in] Locked 0=Not locked, 1=Locked. If set, any action requests are ignored by the dSM.
 * @param [in] OutputMode Cached device MODE register (Class=3, Offset=0).
 * @param [in] LTMode Cached device LTMODE register (Class=3, Offset=0x1e)
 * @param [in] Groups Bitfield of group memberships. 1=Group member
 * @param [in] Name Device name (21 character, zero terminated string).
 * @param [in] dSUID dSUID of the device
 */
typedef void (*DeviceInfo_by_index_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint16_t VendorId, uint16_t ProductId, uint16_t FunctionId, uint16_t Version, uint16_t ZoneId, uint8_t State, uint8_t Locked, uint8_t OutputMode, uint8_t LTMode, const uint8_t *Groups, const uint8_t *Name, dsuid_t dSUID);

/**
 * Returns the properties of a device. Select the device sequentially from all devices of a zone (0 based).
 * 
 * 
 * Request callback function prototype for call #DeviceInfo_by_index.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_INFO and ModifierId = #DEVICE_INFO_BY_INDEX
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneIdReq 0 for all zones
 * @param [in] DeviceIndex 0 .. ZoneDeviceCount
 */
typedef void (*DeviceInfo_by_index_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneIdReq, uint16_t DeviceIndex);

/**
 * Returns the properties of a device. Select the device by device ID.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceInfo_by_device_id_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceInfo_by_device_id_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceIdReq Device ID.
 * @param [out] DeviceId Device identifier in the digitalSTROM network.
 * @param [out] VendorId Device vendor identification.
 * @param [out] ProductId Product identifier.
 * @param [out] FunctionId Functionality declaration.
 * @param [out] Version Device software version
 * @param [out] ZoneId Device is member of this zone.
 * @param [out] State 0=Inactive, 1=Active
 * @param [out] Locked 0=Not locked, 1=Locked. If set, any action requests are ignored by the dSM.
 * @param [out] OutputMode Cached device MODE register (Class=3, Offset=0).
 * @param [out] LTMode Cached device LTMODE register (Class=3, Offset=0x1e)
 * @param [out] Groups Bitfield of group memberships. 1=Group member (pass a reference to a preallocated buffer of at least 8 bytes.)
 * @param [out] Name Device name (21 character, zero terminated string). (pass a reference to a preallocated buffer of at least 21 bytes.)
 * @param [out] dSUID dSUID of the device (pass a reference to a preallocated buffer of at least 17 bytes.)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceInfo_by_device_id(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceIdReq, uint16_t *DeviceId, uint16_t *VendorId, uint16_t *ProductId, uint16_t *FunctionId, uint16_t *Version, uint16_t *ZoneId, uint8_t *State, uint8_t *Locked, uint8_t *OutputMode, uint8_t *LTMode, uint8_t *Groups, uint8_t *Name, dsuid_t *dSUID);

/**
 * Returns the properties of a device. Select the device by device ID.
 * 
 * 
 * Response callback function prototype for call #DeviceInfo_by_device_id.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_INFO and ModifierId = #DEVICE_INFO_BY_DEVICE_ID
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device identifier in the digitalSTROM network.
 * @param [in] VendorId Device vendor identification.
 * @param [in] ProductId Product identifier.
 * @param [in] FunctionId Functionality declaration.
 * @param [in] Version Device software version
 * @param [in] ZoneId Device is member of this zone.
 * @param [in] State 0=Inactive, 1=Active
 * @param [in] Locked 0=Not locked, 1=Locked. If set, any action requests are ignored by the dSM.
 * @param [in] OutputMode Cached device MODE register (Class=3, Offset=0).
 * @param [in] LTMode Cached device LTMODE register (Class=3, Offset=0x1e)
 * @param [in] Groups Bitfield of group memberships. 1=Group member
 * @param [in] Name Device name (21 character, zero terminated string).
 * @param [in] dSUID dSUID of the device
 */
typedef void (*DeviceInfo_by_device_id_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint16_t VendorId, uint16_t ProductId, uint16_t FunctionId, uint16_t Version, uint16_t ZoneId, uint8_t State, uint8_t Locked, uint8_t OutputMode, uint8_t LTMode, const uint8_t *Groups, const uint8_t *Name, dsuid_t dSUID);

/**
 * Returns the properties of a device. Select the device by device ID.
 * 
 * 
 * Request callback function prototype for call #DeviceInfo_by_device_id.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_INFO and ModifierId = #DEVICE_INFO_BY_DEVICE_ID
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceIdReq Device ID.
 */
typedef void (*DeviceInfo_by_device_id_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceIdReq);

/**
 * Returns the state of a device. 
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceState_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceState_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [out] ActiveFlag 0=inactive, 1=active.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceState(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t *ActiveFlag);

/**
 * Returns the state of a device. 
 * 
 * 
 * Response callback function prototype for call #DeviceState.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_STATE and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ActiveFlag 0=inactive, 1=active.
 */
typedef void (*DeviceState_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t ActiveFlag);

/**
 * Returns the state of a device. 
 * 
 * 
 * Request callback function prototype for call #DeviceState.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_STATE and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 */
typedef void (*DeviceState_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId);

/**
 * Requests statistics data of a device. Response data is sent with an event (#EventDeviceStatistics_event_callback_t). #DeviceStatisticsRequest_get_sync is a synchronous convenience function with the same functionality. 
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceStatisticsRequest_get_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceStatisticsRequest_get_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ParamOffset Index in statistics structure (0xff gets all).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceStatisticsRequest_get(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t ParamOffset);

/**
 * Requests statistics data of a device. Response data is sent with an event (#EventDeviceStatistics_event_callback_t). #DeviceStatisticsRequest_get_sync is a synchronous convenience function with the same functionality. 
 * 
 * 
 * Response callback function prototype for call #DeviceStatisticsRequest_get.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_STATISTICS_REQUEST and ModifierId = #DEVICE_STATISTICS_REQUEST_GET
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceStatisticsRequest_get_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Requests statistics data of a device. Response data is sent with an event (#EventDeviceStatistics_event_callback_t). #DeviceStatisticsRequest_get_sync is a synchronous convenience function with the same functionality. 
 * 
 * 
 * Request callback function prototype for call #DeviceStatisticsRequest_get.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_STATISTICS_REQUEST and ModifierId = #DEVICE_STATISTICS_REQUEST_GET
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ParamOffset Index in statistics structure (0xff gets all).
 */
typedef void (*DeviceStatisticsRequest_get_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t ParamOffset);

/**
 * Move the device into a new zone.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceProperties_set_zone_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceProperties_set_zone_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ZoneId Add device to this zone.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceProperties_set_zone(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint16_t ZoneId);

/**
 * Move the device into a new zone.
 * 
 * 
 * Response callback function prototype for call #DeviceProperties_set_zone.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_SET_ZONE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceProperties_set_zone_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Move the device into a new zone.
 * 
 * 
 * Request callback function prototype for call #DeviceProperties_set_zone.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_SET_ZONE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ZoneId Add device to this zone.
 */
typedef void (*DeviceProperties_set_zone_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint16_t ZoneId);

/**
 * If locked flag is set, the dSM does not execute any action triggered from this device.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceProperties_set_locked_flag_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceProperties_set_locked_flag_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] LockedFlag 0=not locked, 1=locked.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceProperties_set_locked_flag(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t LockedFlag);

/**
 * If locked flag is set, the dSM does not execute any action triggered from this device.
 * 
 * 
 * Response callback function prototype for call #DeviceProperties_set_locked_flag.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_SET_LOCKED_FLAG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceProperties_set_locked_flag_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * If locked flag is set, the dSM does not execute any action triggered from this device.
 * 
 * 
 * Request callback function prototype for call #DeviceProperties_set_locked_flag.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_SET_LOCKED_FLAG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] LockedFlag 0=not locked, 1=locked.
 */
typedef void (*DeviceProperties_set_locked_flag_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t LockedFlag);

/**
 * Set the name of the device.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceProperties_set_name_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceProperties_set_name_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] Name New name of the device (21 character, zero terminated string).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceProperties_set_name(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, const uint8_t *Name);

/**
 * Set the name of the device.
 * 
 * 
 * Response callback function prototype for call #DeviceProperties_set_name.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_SET_NAME
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceProperties_set_name_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set the name of the device.
 * 
 * 
 * Request callback function prototype for call #DeviceProperties_set_name.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_SET_NAME
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] Name New name of the device (21 character, zero terminated string).
 */
typedef void (*DeviceProperties_set_name_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, const uint8_t *Name);

/**
 * Define the active group for the button of the device.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceProperties_set_button_active_group_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceProperties_set_button_active_group_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] GroupId Active group ID for this button (1-63).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceProperties_set_button_active_group(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t GroupId);

/**
 * Define the active group for the button of the device.
 * 
 * 
 * Response callback function prototype for call #DeviceProperties_set_button_active_group.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_SET_BUTTON_ACTIVE_GROUP
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceProperties_set_button_active_group_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Define the active group for the button of the device.
 * 
 * 
 * Request callback function prototype for call #DeviceProperties_set_button_active_group.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_SET_BUTTON_ACTIVE_GROUP
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] GroupId Active group ID for this button (1-63).
 */
typedef void (*DeviceProperties_set_button_active_group_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t GroupId);

/**
 * Reset active group of button to default.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceProperties_reset_button_active_group_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceProperties_reset_button_active_group_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceProperties_reset_button_active_group(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId);

/**
 * Reset active group of button to default.
 * 
 * 
 * Response callback function prototype for call #DeviceProperties_reset_button_active_group.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_RESET_BUTTON_ACTIVE_GROUP
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceProperties_reset_button_active_group_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Reset active group of button to default.
 * 
 * 
 * Request callback function prototype for call #DeviceProperties_reset_button_active_group.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_RESET_BUTTON_ACTIVE_GROUP
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 */
typedef void (*DeviceProperties_reset_button_active_group_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId);

/**
 * Set if the button triggers the local priority.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceProperties_set_button_set_local_priority_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceProperties_set_button_set_local_priority_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SetLocalPriority 0=Button does not trigger a SetLocalPriority, 1=Button triggers a SetLocalPriority.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceProperties_set_button_set_local_priority(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t SetLocalPriority);

/**
 * Set if the button triggers the local priority.
 * 
 * 
 * Response callback function prototype for call #DeviceProperties_set_button_set_local_priority.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_SET_BUTTON_SET_LOCAL_PRIORITY
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceProperties_set_button_set_local_priority_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set if the button triggers the local priority.
 * 
 * 
 * Request callback function prototype for call #DeviceProperties_set_button_set_local_priority.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_SET_BUTTON_SET_LOCAL_PRIORITY
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SetLocalPriority 0=Button does not trigger a SetLocalPriority, 1=Button triggers a SetLocalPriority.
 */
typedef void (*DeviceProperties_set_button_set_local_priority_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t SetLocalPriority);

/**
 * Set if the button triggers no ComingHome call.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceProperties_set_button_set_no_coming_home_call_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceProperties_set_button_set_no_coming_home_call_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] NoComingHomeCall 0=Button triggers a ComingHome when apartment is in Absent mode, 1=Button does not trigger a ComingHome.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceProperties_set_button_set_no_coming_home_call(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t NoComingHomeCall);

/**
 * Set if the button triggers no ComingHome call.
 * 
 * 
 * Response callback function prototype for call #DeviceProperties_set_button_set_no_coming_home_call.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_SET_BUTTON_SET_NO_COMING_HOME_CALL
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceProperties_set_button_set_no_coming_home_call_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set if the button triggers no ComingHome call.
 * 
 * 
 * Request callback function prototype for call #DeviceProperties_set_button_set_no_coming_home_call.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_SET_BUTTON_SET_NO_COMING_HOME_CALL
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] NoComingHomeCall 0=Button triggers a ComingHome when apartment is in Absent mode, 1=Button does not trigger a ComingHome.
 */
typedef void (*DeviceProperties_set_button_set_no_coming_home_call_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t NoComingHomeCall);

/**
 * Set if the button acts on its zone or on the whole apartment.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceProperties_set_button_set_apartment_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceProperties_set_button_set_apartment_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] WholeApartment 0=Button acts on its zone, 1=Button acts on the whole Apartment.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceProperties_set_button_set_apartment(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t WholeApartment);

/**
 * Set if the button acts on its zone or on the whole apartment.
 * 
 * 
 * Response callback function prototype for call #DeviceProperties_set_button_set_apartment.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_SET_BUTTON_SET_APARTMENT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceProperties_set_button_set_apartment_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set if the button acts on its zone or on the whole apartment.
 * 
 * 
 * Request callback function prototype for call #DeviceProperties_set_button_set_apartment.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_SET_BUTTON_SET_APARTMENT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] WholeApartment 0=Button acts on its zone, 1=Button acts on the whole Apartment.
 */
typedef void (*DeviceProperties_set_button_set_apartment_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t WholeApartment);

/**
 * Set the output channel of the device's button. If the device doesn't support output channels, the channel id is not sent to the device.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceProperties_set_button_set_output_channel_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceProperties_set_button_set_output_channel_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ChannelId Set to 0 for inactivating output channel operation.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceProperties_set_button_set_output_channel(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t ChannelId);

/**
 * Set the output channel of the device's button. If the device doesn't support output channels, the channel id is not sent to the device.
 * 
 * 
 * Response callback function prototype for call #DeviceProperties_set_button_set_output_channel.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_SET_BUTTON_SET_OUTPUT_CHANNEL
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceProperties_set_button_set_output_channel_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set the output channel of the device's button. If the device doesn't support output channels, the channel id is not sent to the device.
 * 
 * 
 * Request callback function prototype for call #DeviceProperties_set_button_set_output_channel.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_SET_BUTTON_SET_OUTPUT_CHANNEL
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ChannelId Set to 0 for inactivating output channel operation.
 */
typedef void (*DeviceProperties_set_button_set_output_channel_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t ChannelId);

/**
 * Set the global group of the device's button. If the device doesn't support global groups, the group id is not sent to the device.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceProperties_set_button_set_global_group_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceProperties_set_button_set_global_group_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] GroupId Group Id.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceProperties_set_button_set_global_group(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t GroupId);

/**
 * Set the global group of the device's button. If the device doesn't support global groups, the group id is not sent to the device.
 * 
 * 
 * Response callback function prototype for call #DeviceProperties_set_button_set_global_group.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_SET_BUTTON_SET_GLOBAL_GROUP
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceProperties_set_button_set_global_group_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set the global group of the device's button. If the device doesn't support global groups, the group id is not sent to the device.
 * 
 * 
 * Request callback function prototype for call #DeviceProperties_set_button_set_global_group.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_PROPERTIES and ModifierId = #DEVICE_PROPERTIES_SET_BUTTON_SET_GLOBAL_GROUP
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] GroupId Group Id.
 */
typedef void (*DeviceProperties_set_button_set_global_group_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t GroupId);

/**
 * Returns the state of the button of a device. Select the device by DeviceId.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceButtonInfo_by_device_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceButtonInfo_by_device_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [out] ButtonId Button Id from LTNUMGRP0
 * @param [out] GroupMembership Group Membership of Button from LTNUMGRP0
 * @param [out] Group Buttons active group
 * @param [out] Flags Description:
    - Bit 0 - SetLocalPriority: 0=Button does not trigger a SetLocalPriority, 1=Button triggers a SetLocalPriority
    - Bit 1 - NoComingHomeCall: 0=Button triggers a ComingHome when apartment is in Absent mode, 1=Button does not trigger a ComingHome
    - Bit 2 - WholeApartment: 0=Button acts on its zone, 1=Button acts on the whole Apartment.
    - Bit 3-7 - reserved
                
 * @param [out] ChannelId Channel Id from PBCHANNEL
 * @param [out] GlobalGroup Global Group from PBGROUP
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceButtonInfo_by_device(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t *ButtonId, uint8_t *GroupMembership, uint8_t *Group, uint8_t *Flags, uint8_t *ChannelId, uint8_t *GlobalGroup);

/**
 * Returns the state of the button of a device. Select the device by DeviceId.
 * 
 * 
 * Response callback function prototype for call #DeviceButtonInfo_by_device.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_BUTTON_INFO and ModifierId = #DEVICE_BUTTON_INFO_BY_DEVICE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ButtonId Button Id from LTNUMGRP0
 * @param [in] GroupMembership Group Membership of Button from LTNUMGRP0
 * @param [in] Group Buttons active group
 * @param [in] Flags Description:
    - Bit 0 - SetLocalPriority: 0=Button does not trigger a SetLocalPriority, 1=Button triggers a SetLocalPriority
    - Bit 1 - NoComingHomeCall: 0=Button triggers a ComingHome when apartment is in Absent mode, 1=Button does not trigger a ComingHome
    - Bit 2 - WholeApartment: 0=Button acts on its zone, 1=Button acts on the whole Apartment.
    - Bit 3-7 - reserved
                
 * @param [in] ChannelId Channel Id from PBCHANNEL
 * @param [in] GlobalGroup Global Group from PBGROUP
 */
typedef void (*DeviceButtonInfo_by_device_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t ButtonId, uint8_t GroupMembership, uint8_t Group, uint8_t Flags, uint8_t ChannelId, uint8_t GlobalGroup);

/**
 * Returns the state of the button of a device. Select the device by DeviceId.
 * 
 * 
 * Request callback function prototype for call #DeviceButtonInfo_by_device.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_BUTTON_INFO and ModifierId = #DEVICE_BUTTON_INFO_BY_DEVICE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 */
typedef void (*DeviceButtonInfo_by_device_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId);

/**
 * Returns the configuration table for the binary inputs. Get the number of available Binary Inputs.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceBinaryInput_get_count_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceBinaryInput_get_count_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [out] Count The Number of Binary Inputs.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceBinaryInput_get_count(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t *Count);

/**
 * Returns the configuration table for the binary inputs. Get the number of available Binary Inputs.
 * 
 * 
 * Response callback function prototype for call #DeviceBinaryInput_get_count.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_BINARY_INPUT and ModifierId = #DEVICE_BINARY_INPUT_GET_COUNT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Count The Number of Binary Inputs.
 */
typedef void (*DeviceBinaryInput_get_count_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Count);

/**
 * Returns the configuration table for the binary inputs. Get the number of available Binary Inputs.
 * 
 * 
 * Request callback function prototype for call #DeviceBinaryInput_get_count.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_BINARY_INPUT and ModifierId = #DEVICE_BINARY_INPUT_GET_COUNT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 */
typedef void (*DeviceBinaryInput_get_count_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId);

/**
 * Returns the configuration table for the binary inputs. Select the device by DeviceId.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceBinaryInput_get_by_index_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceBinaryInput_get_by_index_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] InputIndex Index of the Binary Input.
 * @param [out] TargetGroupType 0=Standard Groups; 1=Global groups; 2=Apartment-wide signals
 * @param [out] TargetGroup Target group for the resulting action
 * @param [out] BinaryInputType Type of the binary input.
 * @param [out] ButtonId Button Id (same encoding like the NUM of LTNUMGRP0)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceBinaryInput_get_by_index(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t InputIndex, uint8_t *TargetGroupType, uint8_t *TargetGroup, uint8_t *BinaryInputType, uint8_t *ButtonId);

/**
 * Returns the configuration table for the binary inputs. Select the device by DeviceId.
 * 
 * 
 * Response callback function prototype for call #DeviceBinaryInput_get_by_index.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_BINARY_INPUT and ModifierId = #DEVICE_BINARY_INPUT_GET_BY_INDEX
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] TargetGroupType 0=Standard Groups; 1=Global groups; 2=Apartment-wide signals
 * @param [in] TargetGroup Target group for the resulting action
 * @param [in] BinaryInputType Type of the binary input.
 * @param [in] ButtonId Button Id (same encoding like the NUM of LTNUMGRP0)
 */
typedef void (*DeviceBinaryInput_get_by_index_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t TargetGroupType, uint8_t TargetGroup, uint8_t BinaryInputType, uint8_t ButtonId);

/**
 * Returns the configuration table for the binary inputs. Select the device by DeviceId.
 * 
 * 
 * Request callback function prototype for call #DeviceBinaryInput_get_by_index.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_BINARY_INPUT and ModifierId = #DEVICE_BINARY_INPUT_GET_BY_INDEX
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] InputIndex Index of the Binary Input.
 */
typedef void (*DeviceBinaryInput_get_by_index_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t InputIndex);

/**
 * Add the device to this group.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceGroupMembershipModify_add_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceGroupMembershipModify_add_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] GroupId Group ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceGroupMembershipModify_add(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t GroupId);

/**
 * Add the device to this group.
 * 
 * 
 * Response callback function prototype for call #DeviceGroupMembershipModify_add.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_GROUP_MEMBERSHIP_MODIFY and ModifierId = #DEVICE_GROUP_MEMBERSHIP_MODIFY_ADD
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceGroupMembershipModify_add_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Add the device to this group.
 * 
 * 
 * Request callback function prototype for call #DeviceGroupMembershipModify_add.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_GROUP_MEMBERSHIP_MODIFY and ModifierId = #DEVICE_GROUP_MEMBERSHIP_MODIFY_ADD
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] GroupId Group ID.
 */
typedef void (*DeviceGroupMembershipModify_add_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t GroupId);

/**
 * remove the device from this group.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceGroupMembershipModify_remove_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceGroupMembershipModify_remove_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] GroupId Group ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceGroupMembershipModify_remove(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t GroupId);

/**
 * remove the device from this group.
 * 
 * 
 * Response callback function prototype for call #DeviceGroupMembershipModify_remove.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_GROUP_MEMBERSHIP_MODIFY and ModifierId = #DEVICE_GROUP_MEMBERSHIP_MODIFY_REMOVE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceGroupMembershipModify_remove_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * remove the device from this group.
 * 
 * 
 * Request callback function prototype for call #DeviceGroupMembershipModify_remove.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_GROUP_MEMBERSHIP_MODIFY and ModifierId = #DEVICE_GROUP_MEMBERSHIP_MODIFY_REMOVE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] GroupId Group ID.
 */
typedef void (*DeviceGroupMembershipModify_remove_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t GroupId);

/**
 * Query transmission quality. Answer is returned with a #EventTestTransmissionQuality_event_callback_t event. #TestTransmissionQuality_get_sync is a synchronous convenience function with the same functionality.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #TestTransmissionQuality_get_response_callback_t callback.
 * To receive this request from other bus members register the #TestTransmissionQuality_get_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int TestTransmissionQuality_get(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId);

/**
 * Query transmission quality. Answer is returned with a #EventTestTransmissionQuality_event_callback_t event. #TestTransmissionQuality_get_sync is a synchronous convenience function with the same functionality.
 * 
 * 
 * Response callback function prototype for call #TestTransmissionQuality_get.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #TEST_TRANSMISSION_QUALITY and ModifierId = #TEST_TRANSMISSION_QUALITY_GET
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*TestTransmissionQuality_get_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Query transmission quality. Answer is returned with a #EventTestTransmissionQuality_event_callback_t event. #TestTransmissionQuality_get_sync is a synchronous convenience function with the same functionality.
 * 
 * 
 * Request callback function prototype for call #TestTransmissionQuality_get.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #TEST_TRANSMISSION_QUALITY and ModifierId = #TEST_TRANSMISSION_QUALITY_GET
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 */
typedef void (*TestTransmissionQuality_get_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId);

/**
 * Ping a single device. Answer is returned with a #EventTestDevicePresence_event_callback_t event. 
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #TestDevicePresence_response_callback_t callback.
 * To receive this request from other bus members register the #TestDevicePresence_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int TestDevicePresence(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId);

/**
 * Ping a single device. Answer is returned with a #EventTestDevicePresence_event_callback_t event. 
 * 
 * 
 * Response callback function prototype for call #TestDevicePresence.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #TEST_DEVICE_PRESENCE and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*TestDevicePresence_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Ping a single device. Answer is returned with a #EventTestDevicePresence_event_callback_t event. 
 * 
 * 
 * Request callback function prototype for call #TestDevicePresence.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #TEST_DEVICE_PRESENCE and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 */
typedef void (*TestDevicePresence_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId);

/**
 * Execute actions on a single device. Call a scene.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceActionRequest_action_call_scene_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceActionRequest_action_call_scene_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SceneId Scene ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceActionRequest_action_call_scene(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t SceneId);

/**
 * Execute actions on a single device. Call a scene.
 * 
 * 
 * Response callback function prototype for call #DeviceActionRequest_action_call_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_CALL_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceActionRequest_action_call_scene_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on a single device. Call a scene.
 * 
 * 
 * Request callback function prototype for call #DeviceActionRequest_action_call_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_CALL_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SceneId Scene ID.
 */
typedef void (*DeviceActionRequest_action_call_scene_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t SceneId);

/**
 * Execute actions on a single device. Save the current state in given scene.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceActionRequest_action_save_scene_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceActionRequest_action_save_scene_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SceneId Scene ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceActionRequest_action_save_scene(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t SceneId);

/**
 * Execute actions on a single device. Save the current state in given scene.
 * 
 * 
 * Response callback function prototype for call #DeviceActionRequest_action_save_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_SAVE_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceActionRequest_action_save_scene_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on a single device. Save the current state in given scene.
 * 
 * 
 * Request callback function prototype for call #DeviceActionRequest_action_save_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_SAVE_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SceneId Scene ID.
 */
typedef void (*DeviceActionRequest_action_save_scene_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t SceneId);

/**
 * Execute actions on a single device. Instruct the device to undo the last scene call.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceActionRequest_action_undo_scene_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceActionRequest_action_undo_scene_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceActionRequest_action_undo_scene(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId);

/**
 * Execute actions on a single device. Instruct the device to undo the last scene call.
 * 
 * 
 * Response callback function prototype for call #DeviceActionRequest_action_undo_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_UNDO_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceActionRequest_action_undo_scene_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on a single device. Instruct the device to undo the last scene call.
 * 
 * 
 * Request callback function prototype for call #DeviceActionRequest_action_undo_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_UNDO_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 */
typedef void (*DeviceActionRequest_action_undo_scene_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId);

/**
 * Execute actions on a single device. Let the device blink its load.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceActionRequest_action_blink_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceActionRequest_action_blink_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceActionRequest_action_blink(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId);

/**
 * Execute actions on a single device. Let the device blink its load.
 * 
 * 
 * Response callback function prototype for call #DeviceActionRequest_action_blink.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_BLINK
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceActionRequest_action_blink_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on a single device. Let the device blink its load.
 * 
 * 
 * Request callback function prototype for call #DeviceActionRequest_action_blink.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_BLINK
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 */
typedef void (*DeviceActionRequest_action_blink_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId);

/**
 * Execute actions on a single device. Instruct the device to undo the last scene call if it was the scene with the given scene ID.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceActionRequest_action_undo_scene_number_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceActionRequest_action_undo_scene_number_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SceneId Scene ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceActionRequest_action_undo_scene_number(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t SceneId);

/**
 * Execute actions on a single device. Instruct the device to undo the last scene call if it was the scene with the given scene ID.
 * 
 * 
 * Response callback function prototype for call #DeviceActionRequest_action_undo_scene_number.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_UNDO_SCENE_NUMBER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceActionRequest_action_undo_scene_number_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on a single device. Instruct the device to undo the last scene call if it was the scene with the given scene ID.
 * 
 * 
 * Request callback function prototype for call #DeviceActionRequest_action_undo_scene_number.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_UNDO_SCENE_NUMBER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SceneId Scene ID.
 */
typedef void (*DeviceActionRequest_action_undo_scene_number_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t SceneId);

/**
 * Execute actions on a single device. Call a scene. Overwrite any locally selected state.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceActionRequest_action_force_call_scene_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceActionRequest_action_force_call_scene_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SceneId Scene ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceActionRequest_action_force_call_scene(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t SceneId);

/**
 * Execute actions on a single device. Call a scene. Overwrite any locally selected state.
 * 
 * 
 * Response callback function prototype for call #DeviceActionRequest_action_force_call_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_FORCE_CALL_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceActionRequest_action_force_call_scene_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on a single device. Call a scene. Overwrite any locally selected state.
 * 
 * 
 * Request callback function prototype for call #DeviceActionRequest_action_force_call_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_FORCE_CALL_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SceneId Scene ID.
 */
typedef void (*DeviceActionRequest_action_force_call_scene_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t SceneId);

/**
 * Execute actions on a single device. Set the output to the given value independent of any scene configurations.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceActionRequest_action_set_outval_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceActionRequest_action_set_outval_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] Value Output value (0-255).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceActionRequest_action_set_outval(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t Value);

/**
 * Execute actions on a single device. Set the output to the given value independent of any scene configurations.
 * 
 * 
 * Response callback function prototype for call #DeviceActionRequest_action_set_outval.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_SET_OUTVAL
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceActionRequest_action_set_outval_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on a single device. Set the output to the given value independent of any scene configurations.
 * 
 * 
 * Request callback function prototype for call #DeviceActionRequest_action_set_outval.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_SET_OUTVAL
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] Value Output value (0-255).
 */
typedef void (*DeviceActionRequest_action_set_outval_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t Value);

/**
 * Execute actions on a single device. Start Programming mode.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceActionRequest_action_programming_mode_on_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceActionRequest_action_programming_mode_on_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceActionRequest_action_programming_mode_on(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId);

/**
 * Execute actions on a single device. Start Programming mode.
 * 
 * 
 * Response callback function prototype for call #DeviceActionRequest_action_programming_mode_on.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_PROGRAMMING_MODE_ON
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceActionRequest_action_programming_mode_on_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on a single device. Start Programming mode.
 * 
 * 
 * Request callback function prototype for call #DeviceActionRequest_action_programming_mode_on.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_PROGRAMMING_MODE_ON
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 */
typedef void (*DeviceActionRequest_action_programming_mode_on_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId);

/**
 * Execute actions on a single device. Finish programming mode.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceActionRequest_action_programming_mode_off_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceActionRequest_action_programming_mode_off_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceActionRequest_action_programming_mode_off(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId);

/**
 * Execute actions on a single device. Finish programming mode.
 * 
 * 
 * Response callback function prototype for call #DeviceActionRequest_action_programming_mode_off.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_PROGRAMMING_MODE_OFF
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceActionRequest_action_programming_mode_off_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on a single device. Finish programming mode.
 * 
 * 
 * Request callback function prototype for call #DeviceActionRequest_action_programming_mode_off.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_PROGRAMMING_MODE_OFF
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 */
typedef void (*DeviceActionRequest_action_programming_mode_off_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId);

/**
 * Execute actions on a single device. Increase value of selected output channel.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceActionRequest_action_opc_inc_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceActionRequest_action_opc_inc_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ChannelId Output channel id.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceActionRequest_action_opc_inc(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t ChannelId);

/**
 * Execute actions on a single device. Increase value of selected output channel.
 * 
 * 
 * Response callback function prototype for call #DeviceActionRequest_action_opc_inc.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_OPC_INC
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceActionRequest_action_opc_inc_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on a single device. Increase value of selected output channel.
 * 
 * 
 * Request callback function prototype for call #DeviceActionRequest_action_opc_inc.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_OPC_INC
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ChannelId Output channel id.
 */
typedef void (*DeviceActionRequest_action_opc_inc_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t ChannelId);

/**
 * Execute actions on a single device. Decrease value of selected output channel.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceActionRequest_action_opc_dec_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceActionRequest_action_opc_dec_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ChannelId Output channel id.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceActionRequest_action_opc_dec(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t ChannelId);

/**
 * Execute actions on a single device. Decrease value of selected output channel.
 * 
 * 
 * Response callback function prototype for call #DeviceActionRequest_action_opc_dec.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_OPC_DEC
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceActionRequest_action_opc_dec_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on a single device. Decrease value of selected output channel.
 * 
 * 
 * Request callback function prototype for call #DeviceActionRequest_action_opc_dec.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_OPC_DEC
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ChannelId Output channel id.
 */
typedef void (*DeviceActionRequest_action_opc_dec_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t ChannelId);

/**
 * Execute actions on a single device. Stop dimming value of selected output channel.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceActionRequest_action_opc_stop_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceActionRequest_action_opc_stop_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ChannelId Output channel id.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceActionRequest_action_opc_stop(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t ChannelId);

/**
 * Execute actions on a single device. Stop dimming value of selected output channel.
 * 
 * 
 * Response callback function prototype for call #DeviceActionRequest_action_opc_stop.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_OPC_STOP
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceActionRequest_action_opc_stop_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on a single device. Stop dimming value of selected output channel.
 * 
 * 
 * Request callback function prototype for call #DeviceActionRequest_action_opc_stop.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_OPC_STOP
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ChannelId Output channel id.
 */
typedef void (*DeviceActionRequest_action_opc_stop_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t ChannelId);

/**
 * Execute actions on a single device. Send extra command.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceActionRequest_action_extra_command_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceActionRequest_action_extra_command_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] Command Commands: 0 = Unlock, 1 = Lock.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceActionRequest_action_extra_command(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t Command);

/**
 * Execute actions on a single device. Send extra command.
 * 
 * 
 * Response callback function prototype for call #DeviceActionRequest_action_extra_command.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_EXTRA_COMMAND
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceActionRequest_action_extra_command_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Execute actions on a single device. Send extra command.
 * 
 * 
 * Request callback function prototype for call #DeviceActionRequest_action_extra_command.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_ACTION_REQUEST and ModifierId = #DEVICE_ACTION_REQUEST_ACTION_EXTRA_COMMAND
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] Command Commands: 0 = Unlock, 1 = Lock.
 */
typedef void (*DeviceActionRequest_action_extra_command_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t Command);

/**
 * Read a configuration parameter of a specific digitalSTROM device. The response is returned asynchronously with an #EventDeviceConfig_event_callback_t. #DeviceConfig_get_sync_8 and #DeviceConfig_get_sync_16 are synchronous convenience functions with the same functionality.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceConfig_get_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceConfig_get_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ConfigClass Configuration class (Bank).
 * @param [in] ConfigIndex Index in class.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceConfig_get(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t ConfigClass, uint8_t ConfigIndex);

/**
 * Read a configuration parameter of a specific digitalSTROM device. The response is returned asynchronously with an #EventDeviceConfig_event_callback_t. #DeviceConfig_get_sync_8 and #DeviceConfig_get_sync_16 are synchronous convenience functions with the same functionality.
 * 
 * 
 * Response callback function prototype for call #DeviceConfig_get.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_CONFIG and ModifierId = #DEVICE_CONFIG_GET
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceConfig_get_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Read a configuration parameter of a specific digitalSTROM device. The response is returned asynchronously with an #EventDeviceConfig_event_callback_t. #DeviceConfig_get_sync_8 and #DeviceConfig_get_sync_16 are synchronous convenience functions with the same functionality.
 * 
 * 
 * Request callback function prototype for call #DeviceConfig_get.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_CONFIG and ModifierId = #DEVICE_CONFIG_GET
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ConfigClass Configuration class (Bank).
 * @param [in] ConfigIndex Index in class.
 */
typedef void (*DeviceConfig_get_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t ConfigClass, uint8_t ConfigIndex);

/**
 * Write a configuration parameter of a specific digitalSTROM device.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceConfig_set_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceConfig_set_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ConfigClass Configuration class (Bank).
 * @param [in] ConfigIndex Index in class.
 * @param [in] Value Parameter value.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceConfig_set(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t ConfigClass, uint8_t ConfigIndex, uint8_t Value);

/**
 * Write a configuration parameter of a specific digitalSTROM device.
 * 
 * 
 * Response callback function prototype for call #DeviceConfig_set.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_CONFIG and ModifierId = #DEVICE_CONFIG_SET
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceConfig_set_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Write a configuration parameter of a specific digitalSTROM device.
 * 
 * 
 * Request callback function prototype for call #DeviceConfig_set.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_CONFIG and ModifierId = #DEVICE_CONFIG_SET
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ConfigClass Configuration class (Bank).
 * @param [in] ConfigIndex Index in class.
 * @param [in] Value Parameter value.
 */
typedef void (*DeviceConfig_set_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t ConfigClass, uint8_t ConfigIndex, uint8_t Value);

/**
 * Read the current value of an output channel of a digitalSTROM device. The response is returned asynchronously with an #EventDeviceOPCConfig_event_callback_t. #DeviceOPCConfig_get_sync_8 and #DeviceOPCConfig_get_sync_16 are synchronous convenience functions with the same functionality.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceOPCConfig_get_current_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceOPCConfig_get_current_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ChannelId ID of the selected output channel.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceOPCConfig_get_current(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t ChannelId);

/**
 * Read the current value of an output channel of a digitalSTROM device. The response is returned asynchronously with an #EventDeviceOPCConfig_event_callback_t. #DeviceOPCConfig_get_sync_8 and #DeviceOPCConfig_get_sync_16 are synchronous convenience functions with the same functionality.
 * 
 * 
 * Response callback function prototype for call #DeviceOPCConfig_get_current.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_O_P_C_CONFIG and ModifierId = #DEVICE_O_P_C_CONFIG_GET_CURRENT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceOPCConfig_get_current_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Read the current value of an output channel of a digitalSTROM device. The response is returned asynchronously with an #EventDeviceOPCConfig_event_callback_t. #DeviceOPCConfig_get_sync_8 and #DeviceOPCConfig_get_sync_16 are synchronous convenience functions with the same functionality.
 * 
 * 
 * Request callback function prototype for call #DeviceOPCConfig_get_current.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_O_P_C_CONFIG and ModifierId = #DEVICE_O_P_C_CONFIG_GET_CURRENT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ChannelId ID of the selected output channel.
 */
typedef void (*DeviceOPCConfig_get_current_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t ChannelId);

/**
 * Write the current value of an output channel of a digitalSTROM device. After the write the new value and all previously not yet activated values are activated.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceOPCConfig_set_current_and_apply_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceOPCConfig_set_current_and_apply_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ChannelId ID of the selected output channel.
 * @param [in] Size Write size: 0=8bit, 1=16bit.
 * @param [in] Value Parameter value.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceOPCConfig_set_current_and_apply(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t ChannelId, uint8_t Size, uint16_t Value);

/**
 * Write the current value of an output channel of a digitalSTROM device. After the write the new value and all previously not yet activated values are activated.
 * 
 * 
 * Response callback function prototype for call #DeviceOPCConfig_set_current_and_apply.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_O_P_C_CONFIG and ModifierId = #DEVICE_O_P_C_CONFIG_SET_CURRENT_AND_APPLY
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceOPCConfig_set_current_and_apply_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Write the current value of an output channel of a digitalSTROM device. After the write the new value and all previously not yet activated values are activated.
 * 
 * 
 * Request callback function prototype for call #DeviceOPCConfig_set_current_and_apply.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_O_P_C_CONFIG and ModifierId = #DEVICE_O_P_C_CONFIG_SET_CURRENT_AND_APPLY
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ChannelId ID of the selected output channel.
 * @param [in] Size Write size: 0=8bit, 1=16bit.
 * @param [in] Value Parameter value.
 */
typedef void (*DeviceOPCConfig_set_current_and_apply_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t ChannelId, uint8_t Size, uint16_t Value);

/**
 * Write the current value of an output channel of a digitalSTROM device. After the write the new value is not activated yet.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceOPCConfig_set_current_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceOPCConfig_set_current_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ChannelId ID of the selected output channel.
 * @param [in] Size Write size: 0=8bit, 1=16bit.
 * @param [in] Value Parameter value.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceOPCConfig_set_current(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t ChannelId, uint8_t Size, uint16_t Value);

/**
 * Write the current value of an output channel of a digitalSTROM device. After the write the new value is not activated yet.
 * 
 * 
 * Response callback function prototype for call #DeviceOPCConfig_set_current.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_O_P_C_CONFIG and ModifierId = #DEVICE_O_P_C_CONFIG_SET_CURRENT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceOPCConfig_set_current_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Write the current value of an output channel of a digitalSTROM device. After the write the new value is not activated yet.
 * 
 * 
 * Request callback function prototype for call #DeviceOPCConfig_set_current.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_O_P_C_CONFIG and ModifierId = #DEVICE_O_P_C_CONFIG_SET_CURRENT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ChannelId ID of the selected output channel.
 * @param [in] Size Write size: 0=8bit, 1=16bit.
 * @param [in] Value Parameter value.
 */
typedef void (*DeviceOPCConfig_set_current_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t ChannelId, uint8_t Size, uint16_t Value);

/**
 * Read the scene value of an output channel of a digitalSTROM device. The response is returned asynchronously with an #EventDeviceSceneValue_event_callback_t. #DeviceSceneValue_get_sync_8 and #DeviceSceneValue_get_sync_16 are synchronous convenience functions with the same functionality.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceOPCConfig_get_scene_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceOPCConfig_get_scene_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ChannelId ID of the selected output channel.
 * @param [in] SceneId Scene ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceOPCConfig_get_scene(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t ChannelId, uint8_t SceneId);

/**
 * Read the scene value of an output channel of a digitalSTROM device. The response is returned asynchronously with an #EventDeviceSceneValue_event_callback_t. #DeviceSceneValue_get_sync_8 and #DeviceSceneValue_get_sync_16 are synchronous convenience functions with the same functionality.
 * 
 * 
 * Response callback function prototype for call #DeviceOPCConfig_get_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_O_P_C_CONFIG and ModifierId = #DEVICE_O_P_C_CONFIG_GET_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceOPCConfig_get_scene_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Read the scene value of an output channel of a digitalSTROM device. The response is returned asynchronously with an #EventDeviceSceneValue_event_callback_t. #DeviceSceneValue_get_sync_8 and #DeviceSceneValue_get_sync_16 are synchronous convenience functions with the same functionality.
 * 
 * 
 * Request callback function prototype for call #DeviceOPCConfig_get_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_O_P_C_CONFIG and ModifierId = #DEVICE_O_P_C_CONFIG_GET_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ChannelId ID of the selected output channel.
 * @param [in] SceneId Scene ID.
 */
typedef void (*DeviceOPCConfig_get_scene_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t ChannelId, uint8_t SceneId);

/**
 * Write the scene value of an output channel of a digitalSTROM device. After the write the new value is saved.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceOPCConfig_set_scene_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceOPCConfig_set_scene_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ChannelId ID of the selected output channel.
 * @param [in] Size Write size: 0=8bit, 1=16bit.
 * @param [in] SceneId Scene ID.
 * @param [in] Value Parameter value.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceOPCConfig_set_scene(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t ChannelId, uint8_t Size, uint8_t SceneId, uint16_t Value);

/**
 * Write the scene value of an output channel of a digitalSTROM device. After the write the new value is saved.
 * 
 * 
 * Response callback function prototype for call #DeviceOPCConfig_set_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_O_P_C_CONFIG and ModifierId = #DEVICE_O_P_C_CONFIG_SET_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceOPCConfig_set_scene_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Write the scene value of an output channel of a digitalSTROM device. After the write the new value is saved.
 * 
 * 
 * Request callback function prototype for call #DeviceOPCConfig_set_scene.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_O_P_C_CONFIG and ModifierId = #DEVICE_O_P_C_CONFIG_SET_SCENE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ChannelId ID of the selected output channel.
 * @param [in] Size Write size: 0=8bit, 1=16bit.
 * @param [in] SceneId Scene ID.
 * @param [in] Value Parameter value.
 */
typedef void (*DeviceOPCConfig_set_scene_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t ChannelId, uint8_t Size, uint8_t SceneId, uint16_t Value);

/**
 * Read the scene config value for a scene of a digitalSTROM device. The response is returned asynchronously with an #EventDeviceSceneValueConfig_event_callback_t. #DeviceSceneValueConfig_get_sync_8 and #DeviceSceneValueConfig_get_sync_16 are synchronous convenience functions with the same functionality.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceOPCConfig_get_scene_config_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceOPCConfig_get_scene_config_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SceneId Scene ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceOPCConfig_get_scene_config(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t SceneId);

/**
 * Read the scene config value for a scene of a digitalSTROM device. The response is returned asynchronously with an #EventDeviceSceneValueConfig_event_callback_t. #DeviceSceneValueConfig_get_sync_8 and #DeviceSceneValueConfig_get_sync_16 are synchronous convenience functions with the same functionality.
 * 
 * 
 * Response callback function prototype for call #DeviceOPCConfig_get_scene_config.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_O_P_C_CONFIG and ModifierId = #DEVICE_O_P_C_CONFIG_GET_SCENE_CONFIG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceOPCConfig_get_scene_config_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Read the scene config value for a scene of a digitalSTROM device. The response is returned asynchronously with an #EventDeviceSceneValueConfig_event_callback_t. #DeviceSceneValueConfig_get_sync_8 and #DeviceSceneValueConfig_get_sync_16 are synchronous convenience functions with the same functionality.
 * 
 * 
 * Request callback function prototype for call #DeviceOPCConfig_get_scene_config.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_O_P_C_CONFIG and ModifierId = #DEVICE_O_P_C_CONFIG_GET_SCENE_CONFIG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SceneId Scene ID.
 */
typedef void (*DeviceOPCConfig_get_scene_config_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t SceneId);

/**
 * Write the scene config value for a scene of a digitalSTROM device. After the write the new value is saved.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceOPCConfig_set_scene_config_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceOPCConfig_set_scene_config_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SceneId Scene ID.
 * @param [in] Value Parameter value.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceOPCConfig_set_scene_config(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t SceneId, uint16_t Value);

/**
 * Write the scene config value for a scene of a digitalSTROM device. After the write the new value is saved.
 * 
 * 
 * Response callback function prototype for call #DeviceOPCConfig_set_scene_config.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_O_P_C_CONFIG and ModifierId = #DEVICE_O_P_C_CONFIG_SET_SCENE_CONFIG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceOPCConfig_set_scene_config_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Write the scene config value for a scene of a digitalSTROM device. After the write the new value is saved.
 * 
 * 
 * Request callback function prototype for call #DeviceOPCConfig_set_scene_config.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_O_P_C_CONFIG and ModifierId = #DEVICE_O_P_C_CONFIG_SET_SCENE_CONFIG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SceneId Scene ID.
 * @param [in] Value Parameter value.
 */
typedef void (*DeviceOPCConfig_set_scene_config_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t SceneId, uint16_t Value);

/**
 * Read don't care flags bitfield for a scene of a digitalSTROM device. The response is returned asynchronously with an #EventDeviceSceneValueConfig_event_callback_t. #DeviceSceneValueConfig_get_sync_8 and #DeviceSceneValueConfig_get_sync_16 are synchronous convenience functions with the same functionality.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceOPCConfig_get_dc_flags_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceOPCConfig_get_dc_flags_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SceneId Scene ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceOPCConfig_get_dc_flags(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t SceneId);

/**
 * Read don't care flags bitfield for a scene of a digitalSTROM device. The response is returned asynchronously with an #EventDeviceSceneValueConfig_event_callback_t. #DeviceSceneValueConfig_get_sync_8 and #DeviceSceneValueConfig_get_sync_16 are synchronous convenience functions with the same functionality.
 * 
 * 
 * Response callback function prototype for call #DeviceOPCConfig_get_dc_flags.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_O_P_C_CONFIG and ModifierId = #DEVICE_O_P_C_CONFIG_GET_DC_FLAGS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceOPCConfig_get_dc_flags_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Read don't care flags bitfield for a scene of a digitalSTROM device. The response is returned asynchronously with an #EventDeviceSceneValueConfig_event_callback_t. #DeviceSceneValueConfig_get_sync_8 and #DeviceSceneValueConfig_get_sync_16 are synchronous convenience functions with the same functionality.
 * 
 * 
 * Request callback function prototype for call #DeviceOPCConfig_get_dc_flags.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_O_P_C_CONFIG and ModifierId = #DEVICE_O_P_C_CONFIG_GET_DC_FLAGS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SceneId Scene ID.
 */
typedef void (*DeviceOPCConfig_get_dc_flags_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t SceneId);

/**
 * Write don't care flags bitfield for a scene of a digitalSTROM device. After the write the new value is saved.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceOPCConfig_set_dc_flags_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceOPCConfig_set_dc_flags_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SceneId Scene ID.
 * @param [in] Value Parameter value.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceOPCConfig_set_dc_flags(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t SceneId, uint16_t Value);

/**
 * Write don't care flags bitfield for a scene of a digitalSTROM device. After the write the new value is saved.
 * 
 * 
 * Response callback function prototype for call #DeviceOPCConfig_set_dc_flags.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_O_P_C_CONFIG and ModifierId = #DEVICE_O_P_C_CONFIG_SET_DC_FLAGS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceOPCConfig_set_dc_flags_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Write don't care flags bitfield for a scene of a digitalSTROM device. After the write the new value is saved.
 * 
 * 
 * Request callback function prototype for call #DeviceOPCConfig_set_dc_flags.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_O_P_C_CONFIG and ModifierId = #DEVICE_O_P_C_CONFIG_SET_DC_FLAGS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SceneId Scene ID.
 * @param [in] Value Parameter value.
 */
typedef void (*DeviceOPCConfig_set_dc_flags_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t SceneId, uint16_t Value);

/**
 * Get the output channel count of a digitalSTROM device.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceOPCTable_get_count_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceOPCTable_get_count_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [out] Count Number of OutputChannels.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceOPCTable_get_count(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t *Count);

/**
 * Get the output channel count of a digitalSTROM device.
 * 
 * 
 * Response callback function prototype for call #DeviceOPCTable_get_count.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_O_P_C_TABLE and ModifierId = #DEVICE_O_P_C_TABLE_GET_COUNT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Count Number of OutputChannels.
 */
typedef void (*DeviceOPCTable_get_count_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Count);

/**
 * Get the output channel count of a digitalSTROM device.
 * 
 * 
 * Request callback function prototype for call #DeviceOPCTable_get_count.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_O_P_C_TABLE and ModifierId = #DEVICE_O_P_C_TABLE_GET_COUNT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 */
typedef void (*DeviceOPCTable_get_count_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId);

/**
 * Get the output channel of a digitalSTROM device.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceOPCTable_get_by_index_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceOPCTable_get_by_index_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] Index Index of the OutputChannel.
 * @param [out] ChannelId ChannelId of the OutputChannel.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceOPCTable_get_by_index(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t Index, uint8_t *ChannelId);

/**
 * Get the output channel of a digitalSTROM device.
 * 
 * 
 * Response callback function prototype for call #DeviceOPCTable_get_by_index.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_O_P_C_TABLE and ModifierId = #DEVICE_O_P_C_TABLE_GET_BY_INDEX
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ChannelId ChannelId of the OutputChannel.
 */
typedef void (*DeviceOPCTable_get_by_index_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t ChannelId);

/**
 * Get the output channel of a digitalSTROM device.
 * 
 * 
 * Request callback function prototype for call #DeviceOPCTable_get_by_index.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_O_P_C_TABLE and ModifierId = #DEVICE_O_P_C_TABLE_GET_BY_INDEX
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] Index Index of the OutputChannel.
 */
typedef void (*DeviceOPCTable_get_by_index_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t Index);

/**
 * Access device sensors. Get the value of sensor SensorIndex. Value is returned with event callback #EventDeviceSensor_value_event_callback_t. #DeviceSensor_get_value_sync is a synchronous convenience function with the same functionality.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceSensor_get_value_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceSensor_get_value_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SensorIndex Index of the requested sensor on the device.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceSensor_get_value(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t SensorIndex);

/**
 * Access device sensors. Get the value of sensor SensorIndex. Value is returned with event callback #EventDeviceSensor_value_event_callback_t. #DeviceSensor_get_value_sync is a synchronous convenience function with the same functionality.
 * 
 * 
 * Response callback function prototype for call #DeviceSensor_get_value.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_SENSOR and ModifierId = #DEVICE_SENSOR_GET_VALUE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceSensor_get_value_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Access device sensors. Get the value of sensor SensorIndex. Value is returned with event callback #EventDeviceSensor_value_event_callback_t. #DeviceSensor_get_value_sync is a synchronous convenience function with the same functionality.
 * 
 * 
 * Request callback function prototype for call #DeviceSensor_get_value.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_SENSOR and ModifierId = #DEVICE_SENSOR_GET_VALUE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SensorIndex Index of the requested sensor on the device.
 */
typedef void (*DeviceSensor_get_value_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t SensorIndex);

/**
 * Access device sensors. Get the number of available sensors.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceSensor_get_count_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceSensor_get_count_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [out] Count The Number of sensors.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceSensor_get_count(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t *Count);

/**
 * Access device sensors. Get the number of available sensors.
 * 
 * 
 * Response callback function prototype for call #DeviceSensor_get_count.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_SENSOR and ModifierId = #DEVICE_SENSOR_GET_COUNT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Count The Number of sensors.
 */
typedef void (*DeviceSensor_get_count_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Count);

/**
 * Access device sensors. Get the number of available sensors.
 * 
 * 
 * Request callback function prototype for call #DeviceSensor_get_count.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_SENSOR and ModifierId = #DEVICE_SENSOR_GET_COUNT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 */
typedef void (*DeviceSensor_get_count_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId);

/**
 * Access device sensors. Select the device by DeviceId.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceSensor_get_by_index_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceSensor_get_by_index_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SensorIndex Index of the requested sensor on the device.
 * @param [out] Type Type of the sensor
 * @param [out] PollInterval Default Polling Interval (seconds)
 * @param [out] Broadcast 0: Zone, 1: Global (Broadcast).
 * @param [out] PushConvert Push value for sensors are only 10 Bit (instead of 12 Bit):
    0: lower 2 bits are not important
    1: upper 2 bits are not important
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceSensor_get_by_index(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t SensorIndex, uint8_t *Type, uint32_t *PollInterval, uint8_t *Broadcast, uint8_t *PushConvert);

/**
 * Access device sensors. Select the device by DeviceId.
 * 
 * 
 * Response callback function prototype for call #DeviceSensor_get_by_index.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_SENSOR and ModifierId = #DEVICE_SENSOR_GET_BY_INDEX
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Type Type of the sensor
 * @param [in] PollInterval Default Polling Interval (seconds)
 * @param [in] Broadcast 0: Zone, 1: Global (Broadcast).
 * @param [in] PushConvert Push value for sensors are only 10 Bit (instead of 12 Bit):
    0: lower 2 bits are not important
    1: upper 2 bits are not important
 */
typedef void (*DeviceSensor_get_by_index_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Type, uint32_t PollInterval, uint8_t Broadcast, uint8_t PushConvert);

/**
 * Access device sensors. Select the device by DeviceId.
 * 
 * 
 * Request callback function prototype for call #DeviceSensor_get_by_index.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_SENSOR and ModifierId = #DEVICE_SENSOR_GET_BY_INDEX
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] SensorIndex Index of the requested sensor on the device.
 */
typedef void (*DeviceSensor_get_by_index_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t SensorIndex);

/**
 * Removes inactive devices from the data model. 
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #CircuitRemoveInactiveDevices_response_callback_t callback.
 * To receive this request from other bus members register the #CircuitRemoveInactiveDevices_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * 
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int CircuitRemoveInactiveDevices(DsmApiHandle_t handle, dsuid_t dSMdSUID);

/**
 * Removes inactive devices from the data model. 
 * 
 * 
 * Response callback function prototype for call #CircuitRemoveInactiveDevices.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CIRCUIT_REMOVE_INACTIVE_DEVICES and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*CircuitRemoveInactiveDevices_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Removes inactive devices from the data model. 
 * 
 * 
 * Request callback function prototype for call #CircuitRemoveInactiveDevices.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CIRCUIT_REMOVE_INACTIVE_DEVICES and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*CircuitRemoveInactiveDevices_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Removes the device selected by DeviceId from the data model.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #CircuitRemoveDevice_by_id_response_callback_t callback.
 * To receive this request from other bus members register the #CircuitRemoveDevice_by_id_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Device ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int CircuitRemoveDevice_by_id(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId);

/**
 * Removes the device selected by DeviceId from the data model.
 * 
 * 
 * Response callback function prototype for call #CircuitRemoveDevice_by_id.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CIRCUIT_REMOVE_DEVICE and ModifierId = #CIRCUIT_REMOVE_DEVICE_BY_ID
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*CircuitRemoveDevice_by_id_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Removes the device selected by DeviceId from the data model.
 * 
 * 
 * Request callback function prototype for call #CircuitRemoveDevice_by_id.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CIRCUIT_REMOVE_DEVICE and ModifierId = #CIRCUIT_REMOVE_DEVICE_BY_ID
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 */
typedef void (*CircuitRemoveDevice_by_id_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId);

/**
 * Removes the device selected by dSUID from the data model.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #CircuitRemoveDevice_by_dsuid_response_callback_t callback.
 * To receive this request from other bus members register the #CircuitRemoveDevice_by_dsuid_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] dSUID dSUID of the device.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int CircuitRemoveDevice_by_dsuid(DsmApiHandle_t handle, dsuid_t dSMdSUID, dsuid_t dSUID);

/**
 * Removes the device selected by dSUID from the data model.
 * 
 * 
 * Response callback function prototype for call #CircuitRemoveDevice_by_dsuid.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CIRCUIT_REMOVE_DEVICE and ModifierId = #CIRCUIT_REMOVE_DEVICE_BY_DSUID
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*CircuitRemoveDevice_by_dsuid_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Removes the device selected by dSUID from the data model.
 * 
 * 
 * Request callback function prototype for call #CircuitRemoveDevice_by_dsuid.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CIRCUIT_REMOVE_DEVICE and ModifierId = #CIRCUIT_REMOVE_DEVICE_BY_DSUID
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] dSUID dSUID of the device.
 */
typedef void (*CircuitRemoveDevice_by_dsuid_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, dsuid_t dSUID);



/**
 * Result of the #TestTransmissionQuality_get call. 
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_TEST_TRANSMISSION_QUALITY and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID of the answering device.
 * @param [in] DownstreamQuality Bit-Error-Rate (BER) on the downstream channel.
 * @param [in] UpstreamQuality Reception quality on the upstream channel.
 */
typedef void (*EventTestTransmissionQuality_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t DownstreamQuality, uint16_t UpstreamQuality);

/**
 * Result of the #TestDevicePresence call. 
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_TEST_DEVICE_PRESENCE and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID of the answering device.
 * @param [in] Present True if device was successfully pinged, false otherwise.
 */
typedef void (*EventTestDevicePresence_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t Present);

/**
 * Device is now active.
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DEVICE_ACCESSIBILITY and ModifierId = #EVENT_DEVICE_ACCESSIBILITY_ON
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device identifier in the digitalSTROM network.
 * @param [in] ZoneId Zone of the device.
 * @param [in] VendorId VendorId
 * @param [in] ProductId ProductId
 * @param [in] FunctionId FunctionId
 * @param [in] Version Version
 * @param [in] dSUID dSUID
 */
typedef void (*EventDeviceAccessibility_on_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint16_t ZoneId, uint16_t VendorId, uint16_t ProductId, uint16_t FunctionId, uint16_t Version, dsuid_t dSUID);

/**
 * Device is now inactive.
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DEVICE_ACCESSIBILITY and ModifierId = #EVENT_DEVICE_ACCESSIBILITY_OFF
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device identifier in the digitalSTROM network.
 * @param [in] ZoneId Zone of the device.
 * @param [in] VendorId VendorId
 * @param [in] ProductId ProductId
 * @param [in] FunctionId FunctionId
 * @param [in] Version Version
 * @param [in] dSUID dSUID
 */
typedef void (*EventDeviceAccessibility_off_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint16_t ZoneId, uint16_t VendorId, uint16_t ProductId, uint16_t FunctionId, uint16_t Version, dsuid_t dSUID);

/**
 * Statistics data of a device. 
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DEVICE_STATISTICS and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] Offset Statistics offset.
 * @param [in] Value Statistics value.
 */
typedef void (*EventDeviceStatistics_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t Offset, uint16_t Value);

/**
 * Sent by the dSM if a button click was received on a group with no associated usage model (StateMachineGroupId). 
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DEVICE_ACTION and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ZoneId Zone of the device.
 * @param [in] GroupId Group of the button.
 * @param [in] ButtonNr Button number.
 * @param [in] ClickType Click type.
 */
typedef void (*EventDeviceAction_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint16_t ZoneId, uint8_t GroupId, uint8_t ButtonNr, uint8_t ClickType);

/**
 * Sent by the dSM if a direct scene call was received on a group with no associated usage model or from a button configured as SERVER_BUTTON. 
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DEVICE_DIRECT_ACTION and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ZoneId Zone of the device.
 * @param [in] GroupId Group of the button.
 * @param [in] ActionId Action ID.
 */
typedef void (*EventDeviceDirectAction_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint16_t ZoneId, uint8_t GroupId, uint16_t ActionId);

/**
 * Device was switched locally. 
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DEVICE_LOCAL_ACTION and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ZoneId Zone of the device.
 * @param [in] State 0=local off; 1=local on
 */
typedef void (*EventDeviceLocalAction_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint16_t ZoneId, uint8_t State);

/**
 * Parameter response of a device. 
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DEVICE_CONFIG and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 * @param [in] ConfigClass Configuration class (Bank).
 * @param [in] ConfigIndex Index in class.
 * @param [in] Value Parameter value.
 */
typedef void (*EventDeviceConfig_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t ConfigClass, uint8_t ConfigIndex, uint8_t Value);

/**
 * Response to a sensor value request.
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DEVICE_SENSOR and ModifierId = #EVENT_DEVICE_SENSOR_VALUE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId DeviceId
 * @param [in] SensorIndex Index of the requested sensor on the device.
 * @param [in] SensorValue Current value of the sensor (12 bit).
 */
typedef void (*EventDeviceSensor_value_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t SensorIndex, uint16_t SensorValue);

/**
 * Sensor event.
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DEVICE_SENSOR and ModifierId = #EVENT_DEVICE_SENSOR_EVENT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId DeviceId
 * @param [in] EventIndex Index of the sensor event according to the device event table.
 */
typedef void (*EventDeviceSensor_event_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t EventIndex);

/**
 * A binary input has changed its value.
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DEVICE_SENSOR and ModifierId = #EVENT_DEVICE_SENSOR_BINARYINPUTEVENT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId DeviceId
 * @param [in] EventIndex Index of the binary input according to the device binary input table.
 * @param [in] EventType Type of the binary input.
 * @param [in] State New value of the binary input.
 */
typedef void (*EventDeviceSensor_binaryInputEvent_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t EventIndex, uint8_t EventType, uint8_t State);

/**
 * A device gives up its attempts to register with the dSM. 
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DEVICE_GIVE_UP and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] SerialNumber SerialNumber of the device giving up.
 * @param [in] CircuitId CircuitId
 */
typedef void (*EventDeviceGiveUp_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint32_t SerialNumber, uint8_t CircuitId);

/**
 * Device was changed. 
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DEVICE_MODEL_CHANGED and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Device ID.
 */
typedef void (*EventDeviceModelChanged_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId);

/** @} */
/**
 * @defgroup Circuit Circuit
 *
 * This group of API calls addresses functions and properties of the whole circuit attached to the dSM.
 * @{
 */
 /**
 * Dynamically change the behavior of the pinging of devices. Two types of device pinging are supported. One ping round:  During the one ping round, every known (both active and inactive) dSD is ping'ed. Upon failure to respond, the same dSD is ping'ed up to two more times before the ping proceeds to the next dSD. Once all known dSDs have been pinged, the one ping round terminates. The time between any two consecutive pings is configurable. Automatic mode:  In automatic mode, the dSM repeatedly loops over all known dSDs and pings everyone exactly once per loop. The time between any two consecutive pings in this mode is, again, configurable. In both ping modes, the time between consecutive pings can not be configured to be lower than 3000 ms. Start automatic (continuous) ping rounds.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #CircuitPingDevices_automatic_response_callback_t callback.
 * To receive this request from other bus members register the #CircuitPingDevices_automatic_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] IntervalTime Time between ping commands [milliseconds]. 0: take default value from config.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int CircuitPingDevices_automatic(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t IntervalTime);

/**
 * Dynamically change the behavior of the pinging of devices. Two types of device pinging are supported. One ping round:  During the one ping round, every known (both active and inactive) dSD is ping'ed. Upon failure to respond, the same dSD is ping'ed up to two more times before the ping proceeds to the next dSD. Once all known dSDs have been pinged, the one ping round terminates. The time between any two consecutive pings is configurable. Automatic mode:  In automatic mode, the dSM repeatedly loops over all known dSDs and pings everyone exactly once per loop. The time between any two consecutive pings in this mode is, again, configurable. In both ping modes, the time between consecutive pings can not be configured to be lower than 3000 ms. Start automatic (continuous) ping rounds.
 * 
 * 
 * Response callback function prototype for call #CircuitPingDevices_automatic.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CIRCUIT_PING_DEVICES and ModifierId = #CIRCUIT_PING_DEVICES_AUTOMATIC
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*CircuitPingDevices_automatic_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Dynamically change the behavior of the pinging of devices. Two types of device pinging are supported. One ping round:  During the one ping round, every known (both active and inactive) dSD is ping'ed. Upon failure to respond, the same dSD is ping'ed up to two more times before the ping proceeds to the next dSD. Once all known dSDs have been pinged, the one ping round terminates. The time between any two consecutive pings is configurable. Automatic mode:  In automatic mode, the dSM repeatedly loops over all known dSDs and pings everyone exactly once per loop. The time between any two consecutive pings in this mode is, again, configurable. In both ping modes, the time between consecutive pings can not be configured to be lower than 3000 ms. Start automatic (continuous) ping rounds.
 * 
 * 
 * Request callback function prototype for call #CircuitPingDevices_automatic.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CIRCUIT_PING_DEVICES and ModifierId = #CIRCUIT_PING_DEVICES_AUTOMATIC
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] IntervalTime Time between ping commands [milliseconds]. 0: take default value from config.
 */
typedef void (*CircuitPingDevices_automatic_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t IntervalTime);

/**
 * Dynamically change the behavior of the pinging of devices. Two types of device pinging are supported. One ping round:  During the one ping round, every known (both active and inactive) dSD is ping'ed. Upon failure to respond, the same dSD is ping'ed up to two more times before the ping proceeds to the next dSD. Once all known dSDs have been pinged, the one ping round terminates. The time between any two consecutive pings is configurable. Automatic mode:  In automatic mode, the dSM repeatedly loops over all known dSDs and pings everyone exactly once per loop. The time between any two consecutive pings in this mode is, again, configurable. In both ping modes, the time between consecutive pings can not be configured to be lower than 3000 ms. Execute one ping round with the given OneTimeIntervalTime and switches to automatic mode afterwards.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #CircuitPingDevices_one_time_automatic_response_callback_t callback.
 * To receive this request from other bus members register the #CircuitPingDevices_one_time_automatic_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] OneTimeIntervalTime Time between ping commands [milliseconds] in one-time round. 0: take default value from config.
 * @param [in] AutoIntervalTime Time between ping commands [milliseconds] consecutive automatic rounds. 0: take default value value from config.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int CircuitPingDevices_one_time_automatic(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t OneTimeIntervalTime, uint16_t AutoIntervalTime);

/**
 * Dynamically change the behavior of the pinging of devices. Two types of device pinging are supported. One ping round:  During the one ping round, every known (both active and inactive) dSD is ping'ed. Upon failure to respond, the same dSD is ping'ed up to two more times before the ping proceeds to the next dSD. Once all known dSDs have been pinged, the one ping round terminates. The time between any two consecutive pings is configurable. Automatic mode:  In automatic mode, the dSM repeatedly loops over all known dSDs and pings everyone exactly once per loop. The time between any two consecutive pings in this mode is, again, configurable. In both ping modes, the time between consecutive pings can not be configured to be lower than 3000 ms. Execute one ping round with the given OneTimeIntervalTime and switches to automatic mode afterwards.
 * 
 * 
 * Response callback function prototype for call #CircuitPingDevices_one_time_automatic.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CIRCUIT_PING_DEVICES and ModifierId = #CIRCUIT_PING_DEVICES_ONE_TIME_AUTOMATIC
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*CircuitPingDevices_one_time_automatic_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Dynamically change the behavior of the pinging of devices. Two types of device pinging are supported. One ping round:  During the one ping round, every known (both active and inactive) dSD is ping'ed. Upon failure to respond, the same dSD is ping'ed up to two more times before the ping proceeds to the next dSD. Once all known dSDs have been pinged, the one ping round terminates. The time between any two consecutive pings is configurable. Automatic mode:  In automatic mode, the dSM repeatedly loops over all known dSDs and pings everyone exactly once per loop. The time between any two consecutive pings in this mode is, again, configurable. In both ping modes, the time between consecutive pings can not be configured to be lower than 3000 ms. Execute one ping round with the given OneTimeIntervalTime and switches to automatic mode afterwards.
 * 
 * 
 * Request callback function prototype for call #CircuitPingDevices_one_time_automatic.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CIRCUIT_PING_DEVICES and ModifierId = #CIRCUIT_PING_DEVICES_ONE_TIME_AUTOMATIC
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] OneTimeIntervalTime Time between ping commands [milliseconds] in one-time round. 0: take default value from config.
 * @param [in] AutoIntervalTime Time between ping commands [milliseconds] consecutive automatic rounds. 0: take default value value from config.
 */
typedef void (*CircuitPingDevices_one_time_automatic_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t OneTimeIntervalTime, uint16_t AutoIntervalTime);

/**
 * Dynamically change the behavior of the pinging of devices. Two types of device pinging are supported. One ping round:  During the one ping round, every known (both active and inactive) dSD is ping'ed. Upon failure to respond, the same dSD is ping'ed up to two more times before the ping proceeds to the next dSD. Once all known dSDs have been pinged, the one ping round terminates. The time between any two consecutive pings is configurable. Automatic mode:  In automatic mode, the dSM repeatedly loops over all known dSDs and pings everyone exactly once per loop. The time between any two consecutive pings in this mode is, again, configurable. In both ping modes, the time between consecutive pings can not be configured to be lower than 3000 ms. Execute one ping round.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #CircuitPingDevices_one_time_off_response_callback_t callback.
 * To receive this request from other bus members register the #CircuitPingDevices_one_time_off_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] IntervalTime Time between ping commands [milliseconds]. 0: take default value from config.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int CircuitPingDevices_one_time_off(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t IntervalTime);

/**
 * Dynamically change the behavior of the pinging of devices. Two types of device pinging are supported. One ping round:  During the one ping round, every known (both active and inactive) dSD is ping'ed. Upon failure to respond, the same dSD is ping'ed up to two more times before the ping proceeds to the next dSD. Once all known dSDs have been pinged, the one ping round terminates. The time between any two consecutive pings is configurable. Automatic mode:  In automatic mode, the dSM repeatedly loops over all known dSDs and pings everyone exactly once per loop. The time between any two consecutive pings in this mode is, again, configurable. In both ping modes, the time between consecutive pings can not be configured to be lower than 3000 ms. Execute one ping round.
 * 
 * 
 * Response callback function prototype for call #CircuitPingDevices_one_time_off.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CIRCUIT_PING_DEVICES and ModifierId = #CIRCUIT_PING_DEVICES_ONE_TIME_OFF
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*CircuitPingDevices_one_time_off_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Dynamically change the behavior of the pinging of devices. Two types of device pinging are supported. One ping round:  During the one ping round, every known (both active and inactive) dSD is ping'ed. Upon failure to respond, the same dSD is ping'ed up to two more times before the ping proceeds to the next dSD. Once all known dSDs have been pinged, the one ping round terminates. The time between any two consecutive pings is configurable. Automatic mode:  In automatic mode, the dSM repeatedly loops over all known dSDs and pings everyone exactly once per loop. The time between any two consecutive pings in this mode is, again, configurable. In both ping modes, the time between consecutive pings can not be configured to be lower than 3000 ms. Execute one ping round.
 * 
 * 
 * Request callback function prototype for call #CircuitPingDevices_one_time_off.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CIRCUIT_PING_DEVICES and ModifierId = #CIRCUIT_PING_DEVICES_ONE_TIME_OFF
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] IntervalTime Time between ping commands [milliseconds]. 0: take default value from config.
 */
typedef void (*CircuitPingDevices_one_time_off_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t IntervalTime);

/**
 * Dynamically change the behavior of the pinging of devices. Two types of device pinging are supported. One ping round:  During the one ping round, every known (both active and inactive) dSD is ping'ed. Upon failure to respond, the same dSD is ping'ed up to two more times before the ping proceeds to the next dSD. Once all known dSDs have been pinged, the one ping round terminates. The time between any two consecutive pings is configurable. Automatic mode:  In automatic mode, the dSM repeatedly loops over all known dSDs and pings everyone exactly once per loop. The time between any two consecutive pings in this mode is, again, configurable. In both ping modes, the time between consecutive pings can not be configured to be lower than 3000 ms. Stops any running ping round and disables further pinging.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #CircuitPingDevices_off_response_callback_t callback.
 * To receive this request from other bus members register the #CircuitPingDevices_off_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * 
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int CircuitPingDevices_off(DsmApiHandle_t handle, dsuid_t dSMdSUID);

/**
 * Dynamically change the behavior of the pinging of devices. Two types of device pinging are supported. One ping round:  During the one ping round, every known (both active and inactive) dSD is ping'ed. Upon failure to respond, the same dSD is ping'ed up to two more times before the ping proceeds to the next dSD. Once all known dSDs have been pinged, the one ping round terminates. The time between any two consecutive pings is configurable. Automatic mode:  In automatic mode, the dSM repeatedly loops over all known dSDs and pings everyone exactly once per loop. The time between any two consecutive pings in this mode is, again, configurable. In both ping modes, the time between consecutive pings can not be configured to be lower than 3000 ms. Stops any running ping round and disables further pinging.
 * 
 * 
 * Response callback function prototype for call #CircuitPingDevices_off.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CIRCUIT_PING_DEVICES and ModifierId = #CIRCUIT_PING_DEVICES_OFF
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*CircuitPingDevices_off_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Dynamically change the behavior of the pinging of devices. Two types of device pinging are supported. One ping round:  During the one ping round, every known (both active and inactive) dSD is ping'ed. Upon failure to respond, the same dSD is ping'ed up to two more times before the ping proceeds to the next dSD. Once all known dSDs have been pinged, the one ping round terminates. The time between any two consecutive pings is configurable. Automatic mode:  In automatic mode, the dSM repeatedly loops over all known dSDs and pings everyone exactly once per loop. The time between any two consecutive pings in this mode is, again, configurable. In both ping modes, the time between consecutive pings can not be configured to be lower than 3000 ms. Stops any running ping round and disables further pinging.
 * 
 * 
 * Request callback function prototype for call #CircuitPingDevices_off.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CIRCUIT_PING_DEVICES and ModifierId = #CIRCUIT_PING_DEVICES_OFF
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*CircuitPingDevices_off_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Return the current energy and power metering values.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #CircuitEnergyMeterValue_get_response_callback_t callback.
 * To receive this request from other bus members register the #CircuitEnergyMeterValue_get_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] PowerW Current power [W].
 * @param [out] EnergyWh Accumulated energy [Wh].
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int CircuitEnergyMeterValue_get(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint32_t *PowerW, uint32_t *EnergyWh);

/**
 * Return the current energy and power metering values.
 * 
 * 
 * Response callback function prototype for call #CircuitEnergyMeterValue_get.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CIRCUIT_ENERGY_METER_VALUE and ModifierId = #CIRCUIT_ENERGY_METER_VALUE_GET
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] PowerW Current power [W].
 * @param [in] EnergyWh Accumulated energy [Wh].
 */
typedef void (*CircuitEnergyMeterValue_get_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint32_t PowerW, uint32_t EnergyWh);

/**
 * Return the current energy and power metering values.
 * 
 * 
 * Request callback function prototype for call #CircuitEnergyMeterValue_get.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CIRCUIT_ENERGY_METER_VALUE and ModifierId = #CIRCUIT_ENERGY_METER_VALUE_GET
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*CircuitEnergyMeterValue_get_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Return the current energy and power metering values. Reset energy accumulator afterwards.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #CircuitEnergyMeterValue_reset_response_callback_t callback.
 * To receive this request from other bus members register the #CircuitEnergyMeterValue_reset_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] PowerW Current power [W].
 * @param [out] EnergyWh Accumulated energy [Wh].
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int CircuitEnergyMeterValue_reset(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint32_t *PowerW, uint32_t *EnergyWh);

/**
 * Return the current energy and power metering values. Reset energy accumulator afterwards.
 * 
 * 
 * Response callback function prototype for call #CircuitEnergyMeterValue_reset.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CIRCUIT_ENERGY_METER_VALUE and ModifierId = #CIRCUIT_ENERGY_METER_VALUE_RESET
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] PowerW Current power [W].
 * @param [in] EnergyWh Accumulated energy [Wh].
 */
typedef void (*CircuitEnergyMeterValue_reset_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint32_t PowerW, uint32_t EnergyWh);

/**
 * Return the current energy and power metering values. Reset energy accumulator afterwards.
 * 
 * 
 * Request callback function prototype for call #CircuitEnergyMeterValue_reset.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CIRCUIT_ENERGY_METER_VALUE and ModifierId = #CIRCUIT_ENERGY_METER_VALUE_RESET
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*CircuitEnergyMeterValue_reset_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Read the values necessary for metering calibration.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #CircuitEnergyMeterValue_calibration_response_callback_t callback.
 * To receive this request from other bus members register the #CircuitEnergyMeterValue_calibration_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] Uaverage Average of all voltage measurements during the last second.
 * @param [out] I14average Average of all current measurements (low range) during the last second.
 * @param [out] I180average Average of all current measurements (high range) during the last second.
 * @param [out] PActiveLow Calibrated energy measurement of the last second (low range).
 * @param [out] PActiveHigh Calibrated energy measurement of the last second (high range).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int CircuitEnergyMeterValue_calibration(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t *Uaverage, uint16_t *I14average, uint16_t *I180average, uint32_t *PActiveLow, uint32_t *PActiveHigh);

/**
 * Read the values necessary for metering calibration.
 * 
 * 
 * Response callback function prototype for call #CircuitEnergyMeterValue_calibration.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CIRCUIT_ENERGY_METER_VALUE and ModifierId = #CIRCUIT_ENERGY_METER_VALUE_CALIBRATION
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Uaverage Average of all voltage measurements during the last second.
 * @param [in] I14average Average of all current measurements (low range) during the last second.
 * @param [in] I180average Average of all current measurements (high range) during the last second.
 * @param [in] PActiveLow Calibrated energy measurement of the last second (low range).
 * @param [in] PActiveHigh Calibrated energy measurement of the last second (high range).
 */
typedef void (*CircuitEnergyMeterValue_calibration_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t Uaverage, uint16_t I14average, uint16_t I180average, uint32_t PActiveLow, uint32_t PActiveHigh);

/**
 * Read the values necessary for metering calibration.
 * 
 * 
 * Request callback function prototype for call #CircuitEnergyMeterValue_calibration.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CIRCUIT_ENERGY_METER_VALUE and ModifierId = #CIRCUIT_ENERGY_METER_VALUE_CALIBRATION
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*CircuitEnergyMeterValue_calibration_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Return the current energy and power metering values.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #CircuitEnergyMeterValue_Ws_get_response_callback_t callback.
 * To receive this request from other bus members register the #CircuitEnergyMeterValue_Ws_get_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] PowerW Current power [W].
 * @param [out] EnergyWs Accumulated energy [Ws].
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int CircuitEnergyMeterValue_Ws_get(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint32_t *PowerW, uint32_t *EnergyWs);

/**
 * Return the current energy and power metering values.
 * 
 * 
 * Response callback function prototype for call #CircuitEnergyMeterValue_Ws_get.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CIRCUIT_ENERGY_METER_VALUE and ModifierId = #CIRCUIT_ENERGY_METER_VALUE_WS_GET
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] PowerW Current power [W].
 * @param [in] EnergyWs Accumulated energy [Ws].
 */
typedef void (*CircuitEnergyMeterValue_Ws_get_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint32_t PowerW, uint32_t EnergyWs);

/**
 * Return the current energy and power metering values.
 * 
 * 
 * Request callback function prototype for call #CircuitEnergyMeterValue_Ws_get.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CIRCUIT_ENERGY_METER_VALUE and ModifierId = #CIRCUIT_ENERGY_METER_VALUE_WS_GET
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*CircuitEnergyMeterValue_Ws_get_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Return the current active and reactive power metering values. Also calculated phase.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #CircuitCurrentMeterValue_get_response_callback_t callback.
 * To receive this request from other bus members register the #CircuitCurrentMeterValue_get_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] PowerW Current active power [W].
 * @param [out] PowerQ Current reactive power [var].
 * @param [out] Phi Phase [rad] (multiplied with 2^14).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int CircuitCurrentMeterValue_get(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t *PowerW, uint16_t *PowerQ, uint16_t *Phi);

/**
 * Return the current active and reactive power metering values. Also calculated phase.
 * 
 * 
 * Response callback function prototype for call #CircuitCurrentMeterValue_get.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #CIRCUIT_CURRENT_METER_VALUE and ModifierId = #CIRCUIT_CURRENT_METER_VALUE_GET
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] PowerW Current active power [W].
 * @param [in] PowerQ Current reactive power [var].
 * @param [in] Phi Phase [rad] (multiplied with 2^14).
 */
typedef void (*CircuitCurrentMeterValue_get_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t PowerW, uint16_t PowerQ, uint16_t Phi);

/**
 * Return the current active and reactive power metering values. Also calculated phase.
 * 
 * 
 * Request callback function prototype for call #CircuitCurrentMeterValue_get.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #CIRCUIT_CURRENT_METER_VALUE and ModifierId = #CIRCUIT_CURRENT_METER_VALUE_GET
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*CircuitCurrentMeterValue_get_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);



/** @} */
/**
 * @defgroup dSM dSM
 *
 * This group of API calls addresses information and settings of the dSM itself.
 * @{
 */
 /**
 * Returns the properties of the dSM. 
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMInfo_response_callback_t callback.
 * To receive this request from other bus members register the #dSMInfo_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] HWVersion Hardware version
 * @param [out] ARMSWVersion ARM Software version
 * @param [out] DSPSWVersion DSP Software version
 * @param [out] ApiVersion dSM-API version
 * @param [out] DSID dSID (pass a reference to a preallocated buffer of at least 12 bytes.)
 * @param [out] Name Name (21 character, zero terminated string). (pass a reference to a preallocated buffer of at least 21 bytes.)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMInfo(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint32_t *HWVersion, uint32_t *ARMSWVersion, uint32_t *DSPSWVersion, uint16_t *ApiVersion, dsid_t *DSID, uint8_t *Name);

/**
 * Returns the properties of the dSM. 
 * 
 * 
 * Response callback function prototype for call #dSMInfo.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_INFO and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] HWVersion Hardware version
 * @param [in] ARMSWVersion ARM Software version
 * @param [in] DSPSWVersion DSP Software version
 * @param [in] ApiVersion dSM-API version
 * @param [in] DSID dSID
 * @param [in] Name Name (21 character, zero terminated string).
 */
typedef void (*dSMInfo_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint32_t HWVersion, uint32_t ARMSWVersion, uint32_t DSPSWVersion, uint16_t ApiVersion, dsid_t DSID, const uint8_t *Name);

/**
 * Returns the properties of the dSM. 
 * 
 * 
 * Request callback function prototype for call #dSMInfo.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_INFO and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMInfo_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Set the name.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMProperties_set_name_response_callback_t callback.
 * To receive this request from other bus members register the #dSMProperties_set_name_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] Name The new name of the dSM (21 character, zero terminated string).
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMProperties_set_name(DsmApiHandle_t handle, dsuid_t dSMdSUID, const uint8_t *Name);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Set the name.
 * 
 * 
 * Response callback function prototype for call #dSMProperties_set_name.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_SET_NAME
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMProperties_set_name_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Set the name.
 * 
 * 
 * Request callback function prototype for call #dSMProperties_set_name.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_SET_NAME
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Name The new name of the dSM (21 character, zero terminated string).
 */
typedef void (*dSMProperties_set_name_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, const uint8_t *Name);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Set the apartment ID.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMProperties_set_apartment_id_response_callback_t callback.
 * To receive this request from other bus members register the #dSMProperties_set_apartment_id_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ApartmentId Apartment ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMProperties_set_apartment_id(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t ApartmentId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Set the apartment ID.
 * 
 * 
 * Response callback function prototype for call #dSMProperties_set_apartment_id.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_SET_APARTMENT_ID
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMProperties_set_apartment_id_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Set the apartment ID.
 * 
 * 
 * Request callback function prototype for call #dSMProperties_set_apartment_id.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_SET_APARTMENT_ID
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ApartmentId Apartment ID.
 */
typedef void (*dSMProperties_set_apartment_id_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t ApartmentId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Set the temperature limits.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMProperties_set_temperature_limits_response_callback_t callback.
 * To receive this request from other bus members register the #dSMProperties_set_temperature_limits_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] WarnTemperature Temperature-Warning level. dSM stops transmitting downstream upon reaching this level.
 * @param [in] ErrorTemperature Temperature-Error level. dSM halts. A power cycle is needed for recovery.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMProperties_set_temperature_limits(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t WarnTemperature, uint8_t ErrorTemperature);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Set the temperature limits.
 * 
 * 
 * Response callback function prototype for call #dSMProperties_set_temperature_limits.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_SET_TEMPERATURE_LIMITS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMProperties_set_temperature_limits_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Set the temperature limits.
 * 
 * 
 * Request callback function prototype for call #dSMProperties_set_temperature_limits.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_SET_TEMPERATURE_LIMITS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] WarnTemperature Temperature-Warning level. dSM stops transmitting downstream upon reaching this level.
 * @param [in] ErrorTemperature Temperature-Error level. dSM halts. A power cycle is needed for recovery.
 */
typedef void (*dSMProperties_set_temperature_limits_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t WarnTemperature, uint8_t ErrorTemperature);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the configured apartment ID.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMProperties_get_apartment_id_response_callback_t callback.
 * To receive this request from other bus members register the #dSMProperties_get_apartment_id_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] ApartmentId Apartment ID.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMProperties_get_apartment_id(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t *ApartmentId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the configured apartment ID.
 * 
 * 
 * Response callback function prototype for call #dSMProperties_get_apartment_id.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_GET_APARTMENT_ID
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ApartmentId Apartment ID.
 */
typedef void (*dSMProperties_get_apartment_id_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t ApartmentId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the configured apartment ID.
 * 
 * 
 * Request callback function prototype for call #dSMProperties_get_apartment_id.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_GET_APARTMENT_ID
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMProperties_get_apartment_id_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the configured temperature limits.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMProperties_get_temperature_limits_response_callback_t callback.
 * To receive this request from other bus members register the #dSMProperties_get_temperature_limits_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] WarnTemperature Temperature-Warning level. dSM stops transmitting downstream upon reaching this level.
 * @param [out] ErrorTemperature Temperature-Error level. dSM halts. A power cycle is needed for recovery.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMProperties_get_temperature_limits(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t *WarnTemperature, uint8_t *ErrorTemperature);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the configured temperature limits.
 * 
 * 
 * Response callback function prototype for call #dSMProperties_get_temperature_limits.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_GET_TEMPERATURE_LIMITS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] WarnTemperature Temperature-Warning level. dSM stops transmitting downstream upon reaching this level.
 * @param [in] ErrorTemperature Temperature-Error level. dSM halts. A power cycle is needed for recovery.
 */
typedef void (*dSMProperties_get_temperature_limits_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t WarnTemperature, uint8_t ErrorTemperature);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the configured temperature limits.
 * 
 * 
 * Request callback function prototype for call #dSMProperties_get_temperature_limits.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_GET_TEMPERATURE_LIMITS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMProperties_get_temperature_limits_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the configured temperature.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMProperties_get_current_temperature_response_callback_t callback.
 * To receive this request from other bus members register the #dSMProperties_get_current_temperature_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] Temperature dSM internal temperature [Degree Celcius]
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMProperties_get_current_temperature(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t *Temperature);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the configured temperature.
 * 
 * 
 * Response callback function prototype for call #dSMProperties_get_current_temperature.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_GET_CURRENT_TEMPERATURE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Temperature dSM internal temperature [Degree Celcius]
 */
typedef void (*dSMProperties_get_current_temperature_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t Temperature);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the configured temperature.
 * 
 * 
 * Request callback function prototype for call #dSMProperties_get_current_temperature.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_GET_CURRENT_TEMPERATURE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMProperties_get_current_temperature_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Set persistent dSM configuration flags.
    
- Bit 0: Show 'Green' in ready state.
- Bit 2-1: Default ping behavior: 0: no ping, 1: auto (continuous) ping, 2: one-time ping, 3: 24h ping mode
- Bit 3: reserved
- Bit 4: Lock new registered devices.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMProperties_set_flags_response_callback_t callback.
 * To receive this request from other bus members register the #dSMProperties_set_flags_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] Flags Bitfield of flags. 1=Set flag, 0=Clear Flag
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMProperties_set_flags(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t Flags);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Set persistent dSM configuration flags.
    
- Bit 0: Show 'Green' in ready state.
- Bit 2-1: Default ping behavior: 0: no ping, 1: auto (continuous) ping, 2: one-time ping, 3: 24h ping mode
- Bit 3: reserved
- Bit 4: Lock new registered devices.
 * 
 * 
 * Response callback function prototype for call #dSMProperties_set_flags.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_SET_FLAGS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMProperties_set_flags_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Set persistent dSM configuration flags.
    
- Bit 0: Show 'Green' in ready state.
- Bit 2-1: Default ping behavior: 0: no ping, 1: auto (continuous) ping, 2: one-time ping, 3: 24h ping mode
- Bit 3: reserved
- Bit 4: Lock new registered devices.
 * 
 * 
 * Request callback function prototype for call #dSMProperties_set_flags.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_SET_FLAGS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Flags Bitfield of flags. 1=Set flag, 0=Clear Flag
 */
typedef void (*dSMProperties_set_flags_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Flags);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get persistent dSM configuration flags.
    
- Bit 0: Show 'Green' in ready state.
- Bit 2-1: Default ping behavior: 0: no ping, 1: auto (continuous) ping, 2: one-time ping, 3: 24h ping mode
- Bit 3: reserved
- Bit 4: Lock new registered devices.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMProperties_get_flags_response_callback_t callback.
 * To receive this request from other bus members register the #dSMProperties_get_flags_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] Flags Bitfield of flags. 1=Flag set, 0=Flag cleared
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMProperties_get_flags(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t *Flags);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get persistent dSM configuration flags.
    
- Bit 0: Show 'Green' in ready state.
- Bit 2-1: Default ping behavior: 0: no ping, 1: auto (continuous) ping, 2: one-time ping, 3: 24h ping mode
- Bit 3: reserved
- Bit 4: Lock new registered devices.
 * 
 * 
 * Response callback function prototype for call #dSMProperties_get_flags.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_GET_FLAGS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Flags Bitfield of flags. 1=Flag set, 0=Flag cleared
 */
typedef void (*dSMProperties_get_flags_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Flags);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get persistent dSM configuration flags.
    
- Bit 0: Show 'Green' in ready state.
- Bit 2-1: Default ping behavior: 0: no ping, 1: auto (continuous) ping, 2: one-time ping, 3: 24h ping mode
- Bit 3: reserved
- Bit 4: Lock new registered devices.
 * 
 * 
 * Request callback function prototype for call #dSMProperties_get_flags.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_GET_FLAGS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMProperties_get_flags_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the last estimated power-down duration.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMProperties_get_power_down_duration_response_callback_t callback.
 * To receive this request from other bus members register the #dSMProperties_get_power_down_duration_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] Duration 0=short, 1=long
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMProperties_get_power_down_duration(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t *Duration);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the last estimated power-down duration.
 * 
 * 
 * Response callback function prototype for call #dSMProperties_get_power_down_duration.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_GET_POWER_DOWN_DURATION
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Duration 0=short, 1=long
 */
typedef void (*dSMProperties_get_power_down_duration_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Duration);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the last estimated power-down duration.
 * 
 * 
 * Request callback function prototype for call #dSMProperties_get_power_down_duration.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_GET_POWER_DOWN_DURATION
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMProperties_get_power_down_duration_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Set the default pinging intervals.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMProperties_set_ping_intervals_response_callback_t callback.
 * To receive this request from other bus members register the #dSMProperties_set_ping_intervals_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] AutoPingInterval Time between ping commands in automatic (continuous) mode [milliseconds].
 * @param [in] OnePingInterval Time between ping commands in one-time rounds [milliseconds].
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMProperties_set_ping_intervals(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t AutoPingInterval, uint16_t OnePingInterval);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Set the default pinging intervals.
 * 
 * 
 * Response callback function prototype for call #dSMProperties_set_ping_intervals.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_SET_PING_INTERVALS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMProperties_set_ping_intervals_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Set the default pinging intervals.
 * 
 * 
 * Request callback function prototype for call #dSMProperties_set_ping_intervals.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_SET_PING_INTERVALS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] AutoPingInterval Time between ping commands in automatic (continuous) mode [milliseconds].
 * @param [in] OnePingInterval Time between ping commands in one-time rounds [milliseconds].
 */
typedef void (*dSMProperties_set_ping_intervals_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t AutoPingInterval, uint16_t OnePingInterval);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the default pinging intervals.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMProperties_get_ping_intervals_response_callback_t callback.
 * To receive this request from other bus members register the #dSMProperties_get_ping_intervals_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] AutoPingInterval Time between ping commands in automatic (continuous) mode [milliseconds].
 * @param [out] OnePingInterval Time between ping commands in one-time rounds [milliseconds].
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMProperties_get_ping_intervals(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t *AutoPingInterval, uint16_t *OnePingInterval);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the default pinging intervals.
 * 
 * 
 * Response callback function prototype for call #dSMProperties_get_ping_intervals.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_GET_PING_INTERVALS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] AutoPingInterval Time between ping commands in automatic (continuous) mode [milliseconds].
 * @param [in] OnePingInterval Time between ping commands in one-time rounds [milliseconds].
 */
typedef void (*dSMProperties_get_ping_intervals_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t AutoPingInterval, uint16_t OnePingInterval);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the default pinging intervals.
 * 
 * 
 * Request callback function prototype for call #dSMProperties_get_ping_intervals.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_GET_PING_INTERVALS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMProperties_get_ping_intervals_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the stored max temperature.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMProperties_get_max_temperature_response_callback_t callback.
 * To receive this request from other bus members register the #dSMProperties_get_max_temperature_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] MaxTemperature Highest measured temperature.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMProperties_get_max_temperature(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t *MaxTemperature);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the stored max temperature.
 * 
 * 
 * Response callback function prototype for call #dSMProperties_get_max_temperature.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_GET_MAX_TEMPERATURE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] MaxTemperature Highest measured temperature.
 */
typedef void (*dSMProperties_get_max_temperature_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t MaxTemperature);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the stored max temperature.
 * 
 * 
 * Request callback function prototype for call #dSMProperties_get_max_temperature.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_GET_MAX_TEMPERATURE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMProperties_get_max_temperature_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Reset the stored max temperature.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMProperties_reset_max_temperature_response_callback_t callback.
 * To receive this request from other bus members register the #dSMProperties_reset_max_temperature_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * 
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMProperties_reset_max_temperature(DsmApiHandle_t handle, dsuid_t dSMdSUID);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Reset the stored max temperature.
 * 
 * 
 * Response callback function prototype for call #dSMProperties_reset_max_temperature.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_RESET_MAX_TEMPERATURE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMProperties_reset_max_temperature_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Reset the stored max temperature.
 * 
 * 
 * Request callback function prototype for call #dSMProperties_reset_max_temperature.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_RESET_MAX_TEMPERATURE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMProperties_reset_max_temperature_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Set used upstream frequency. Changing this property will result in a DSP restart for reconfiguration.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMProperties_set_upstream_frequency_response_callback_t callback.
 * To receive this request from other bus members register the #dSMProperties_set_upstream_frequency_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] UpstreamFrequency 0: 15/20 kHz; 1: 12/20 kHz; 2: 10/15 kHz; 3: 10/12 kHz
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMProperties_set_upstream_frequency(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t UpstreamFrequency);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Set used upstream frequency. Changing this property will result in a DSP restart for reconfiguration.
 * 
 * 
 * Response callback function prototype for call #dSMProperties_set_upstream_frequency.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_SET_UPSTREAM_FREQUENCY
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMProperties_set_upstream_frequency_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Set used upstream frequency. Changing this property will result in a DSP restart for reconfiguration.
 * 
 * 
 * Request callback function prototype for call #dSMProperties_set_upstream_frequency.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_SET_UPSTREAM_FREQUENCY
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] UpstreamFrequency 0: 15/20 kHz; 1: 12/20 kHz; 2: 10/15 kHz; 3: 10/12 kHz
 */
typedef void (*dSMProperties_set_upstream_frequency_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t UpstreamFrequency);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get used upstream frequency
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMProperties_get_upstream_frequency_response_callback_t callback.
 * To receive this request from other bus members register the #dSMProperties_get_upstream_frequency_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] UpstreamFrequency 0: 15/20 kHz; 1: 12/20 kHz; 2: 10/15 kHz; 3: 10/12 kHz
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMProperties_get_upstream_frequency(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t *UpstreamFrequency);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get used upstream frequency
 * 
 * 
 * Response callback function prototype for call #dSMProperties_get_upstream_frequency.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_GET_UPSTREAM_FREQUENCY
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] UpstreamFrequency 0: 15/20 kHz; 1: 12/20 kHz; 2: 10/15 kHz; 3: 10/12 kHz
 */
typedef void (*dSMProperties_get_upstream_frequency_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t UpstreamFrequency);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get used upstream frequency
 * 
 * 
 * Request callback function prototype for call #dSMProperties_get_upstream_frequency.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_GET_UPSTREAM_FREQUENCY
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMProperties_get_upstream_frequency_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the state of the apartment
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMProperties_get_apartment_state_response_callback_t callback.
 * To receive this request from other bus members register the #dSMProperties_get_apartment_state_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] State 0: Present; 1: Absent; 2: Unknown
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMProperties_get_apartment_state(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t *State);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the state of the apartment
 * 
 * 
 * Response callback function prototype for call #dSMProperties_get_apartment_state.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_GET_APARTMENT_STATE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] State 0: Present; 1: Absent; 2: Unknown
 */
typedef void (*dSMProperties_get_apartment_state_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t State);

/**
 * Change persistent configuration settings of the dSM. Any changes are only active after a dSM reboot. Get the state of the apartment
 * 
 * 
 * Request callback function prototype for call #dSMProperties_get_apartment_state.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_PROPERTIES and ModifierId = #DSM_PROPERTIES_GET_APARTMENT_STATE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMProperties_get_apartment_state_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Returns the current operation state as indicated with the front LEDs. 
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMState_response_callback_t callback.
 * To receive this request from other bus members register the #dSMState_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] Hardware 0=Ok, 1=Updating, 2=Failure
 * @param [out] DSP 0=Ready, 1=Not Ready
 * @param [out] Temperature 0=OK, 1=over warn level, 2=over error level
 * @param [out] Config 0=Ok, 1=Invalid
 * @param [out] dS485 0=Ready, 1=Initializing
 * @param [out] Line 0=Idle, 1=Jumbling (registration)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMState(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t *Hardware, uint8_t *DSP, uint8_t *Temperature, uint8_t *Config, uint8_t *dS485, uint8_t *Line);

/**
 * Returns the current operation state as indicated with the front LEDs. 
 * 
 * 
 * Response callback function prototype for call #dSMState.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_STATE and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Hardware 0=Ok, 1=Updating, 2=Failure
 * @param [in] DSP 0=Ready, 1=Not Ready
 * @param [in] Temperature 0=OK, 1=over warn level, 2=over error level
 * @param [in] Config 0=Ok, 1=Invalid
 * @param [in] dS485 0=Ready, 1=Initializing
 * @param [in] Line 0=Idle, 1=Jumbling (registration)
 */
typedef void (*dSMState_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Hardware, uint8_t DSP, uint8_t Temperature, uint8_t Config, uint8_t dS485, uint8_t Line);

/**
 * Returns the current operation state as indicated with the front LEDs. 
 * 
 * 
 * Request callback function prototype for call #dSMState.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_STATE and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMState_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set dSMdSID and Hardware version.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMConfig_set_dSM_config_response_callback_t callback.
 * To receive this request from other bus members register the #dSMConfig_set_dSM_config_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DSID dSM unique digitalSTROM ID.
 * @param [in] HWVersion Hardware version
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMConfig_set_dSM_config(DsmApiHandle_t handle, dsuid_t dSMdSUID, dsid_t DSID, uint32_t HWVersion);

/**
 * Set dSMdSID and Hardware version.
 * 
 * 
 * Response callback function prototype for call #dSMConfig_set_dSM_config.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_CONFIG and ModifierId = #DSM_CONFIG_SET_DSM_CONFIG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMConfig_set_dSM_config_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set dSMdSID and Hardware version.
 * 
 * 
 * Request callback function prototype for call #dSMConfig_set_dSM_config.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_CONFIG and ModifierId = #DSM_CONFIG_SET_DSM_CONFIG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DSID dSM unique digitalSTROM ID.
 * @param [in] HWVersion Hardware version
 */
typedef void (*dSMConfig_set_dSM_config_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, dsid_t DSID, uint32_t HWVersion);

/**
 * Read DSP configuration as byte stream.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMConfig_get_DSP_config_response_callback_t callback.
 * To receive this request from other bus members register the #dSMConfig_get_DSP_config_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] Size Size of the data in bytes.
 * @param [out] Config Configuration data. (pass a reference to a preallocated buffer of at least 96 bytes.)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMConfig_get_DSP_config(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t *Size, uint8_t *Config);

/**
 * Read DSP configuration as byte stream.
 * 
 * 
 * Response callback function prototype for call #dSMConfig_get_DSP_config.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_CONFIG and ModifierId = #DSM_CONFIG_GET_DSP_CONFIG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Size Size of the data in bytes.
 * @param [in] Config Configuration data.
 */
typedef void (*dSMConfig_get_DSP_config_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Size, const uint8_t *Config);

/**
 * Read DSP configuration as byte stream.
 * 
 * 
 * Request callback function prototype for call #dSMConfig_get_DSP_config.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_CONFIG and ModifierId = #DSM_CONFIG_GET_DSP_CONFIG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMConfig_get_DSP_config_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Program DSP configuration as byte stream. Becomes active after a #dSMReboot or #dSMDebugMode_restart_dsp.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMConfig_set_DSP_config_response_callback_t callback.
 * To receive this request from other bus members register the #dSMConfig_set_DSP_config_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] Size Size of the data in bytes.
 * @param [in] Config Configuration data.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMConfig_set_DSP_config(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t Size, const uint8_t *Config);

/**
 * Program DSP configuration as byte stream. Becomes active after a #dSMReboot or #dSMDebugMode_restart_dsp.
 * 
 * 
 * Response callback function prototype for call #dSMConfig_set_DSP_config.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_CONFIG and ModifierId = #DSM_CONFIG_SET_DSP_CONFIG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMConfig_set_DSP_config_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Program DSP configuration as byte stream. Becomes active after a #dSMReboot or #dSMDebugMode_restart_dsp.
 * 
 * 
 * Request callback function prototype for call #dSMConfig_set_DSP_config.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_CONFIG and ModifierId = #DSM_CONFIG_SET_DSP_CONFIG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Size Size of the data in bytes.
 * @param [in] Config Configuration data.
 */
typedef void (*dSMConfig_set_DSP_config_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Size, const uint8_t *Config);

/**
 * Get a hash of the whole dSM datamodel. The Hash is recalculated on every dSM start-up. If there are any configuration changes durin operation the ConfigurationCount is incremented.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMConfig_get_hash_response_callback_t callback.
 * To receive this request from other bus members register the #dSMConfig_get_hash_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] Hash Datamodel Hash at start-up.
 * @param [out] ConfigurationCount Incremented on every datamodel change during run-time.
 * @param [out] BinaryInputEventCount Incremented on every binary input event during run-time.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMConfig_get_hash(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint32_t *Hash, uint32_t *ConfigurationCount, uint32_t *BinaryInputEventCount);

/**
 * Get a hash of the whole dSM datamodel. The Hash is recalculated on every dSM start-up. If there are any configuration changes durin operation the ConfigurationCount is incremented.
 * 
 * 
 * Response callback function prototype for call #dSMConfig_get_hash.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_CONFIG and ModifierId = #DSM_CONFIG_GET_HASH
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Hash Datamodel Hash at start-up.
 * @param [in] ConfigurationCount Incremented on every datamodel change during run-time.
 * @param [in] BinaryInputEventCount Incremented on every binary input event during run-time.
 */
typedef void (*dSMConfig_get_hash_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint32_t Hash, uint32_t ConfigurationCount, uint32_t BinaryInputEventCount);

/**
 * Get a hash of the whole dSM datamodel. The Hash is recalculated on every dSM start-up. If there are any configuration changes durin operation the ConfigurationCount is incremented.
 * 
 * 
 * Request callback function prototype for call #dSMConfig_get_hash.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_CONFIG and ModifierId = #DSM_CONFIG_GET_HASH
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMConfig_get_hash_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * 
 * 
 * @vdsm_only This function can be used only within a vDsm!

 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #UserProtobufMessageRequest_response_callback_t callback.
 * To receive this request from other bus members register the #UserProtobufMessageRequest_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] Request_Size Size of requested protobuf message.
 * @param [in] Request Requested protobuf message.
 * @param [out] Response_Size Size of response protobuf message.
 * @param [out] Response Response protobuf message. (pass a reference to a preallocated buffer of at least 4096 bytes.)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int UserProtobufMessageRequest(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t Request_Size, const uint8_t *Request, uint16_t *Response_Size, uint8_t *Response);

/**
 * 
 * 
 * @vdsm_only This function can be used only within a vDsm!

 * Response callback function prototype for call #UserProtobufMessageRequest.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #USER_PROTOBUF_MESSAGE_REQUEST and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Response_Size Size of response protobuf message.
 * @param [in] Response Response protobuf message.
 */
typedef void (*UserProtobufMessageRequest_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t Response_Size, const uint8_t *Response);

/**
 * 
 * 
 * @vdsm_only This function can be used only within a vDsm!

 * Request callback function prototype for call #UserProtobufMessageRequest.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #USER_PROTOBUF_MESSAGE_REQUEST and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Request_Size Size of requested protobuf message.
 * @param [in] Request Requested protobuf message.
 */
typedef void (*UserProtobufMessageRequest_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t Request_Size, const uint8_t *Request);

/**
 * Returns dS485 communications statistics.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMStatistics_get_dS485_response_callback_t callback.
 * To receive this request from other bus members register the #dSMStatistics_get_dS485_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] TxToken 
 * @param [out] TxStartupRequest 
 * @param [out] TxStartupResponse 
 * @param [out] TxJoinRequest 
 * @param [out] TxJoinResponse 
 * @param [out] TxGetAddressRequest 
 * @param [out] TxGetAddressResponse 
 * @param [out] TxSetAddressRequest 
 * @param [out] TxSetAddressResponse 
 * @param [out] TxSetSuccessorAddressRequest 
 * @param [out] TxSetSuccessorAddressResponse 
 * @param [out] TxResponse 
 * @param [out] TxDataRequest 
 * @param [out] TxDataResponse 
 * @param [out] TxDataEvent 
 * @param [out] RxResponse 
 * @param [out] RxDataRequest 
 * @param [out] RxDataResponse 
 * @param [out] RxDataEvent 
 * @param [out] StartRegisterStation 
 * @param [out] DoneRegisterStation 
 * @param [out] EnterOperational 
 * @param [out] SuccessorLost 
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMStatistics_get_dS485(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint32_t *TxToken, uint16_t *TxStartupRequest, uint16_t *TxStartupResponse, uint16_t *TxJoinRequest, uint16_t *TxJoinResponse, uint16_t *TxGetAddressRequest, uint16_t *TxGetAddressResponse, uint16_t *TxSetAddressRequest, uint16_t *TxSetAddressResponse, uint16_t *TxSetSuccessorAddressRequest, uint16_t *TxSetSuccessorAddressResponse, uint16_t *TxResponse, uint16_t *TxDataRequest, uint16_t *TxDataResponse, uint16_t *TxDataEvent, uint16_t *RxResponse, uint16_t *RxDataRequest, uint16_t *RxDataResponse, uint16_t *RxDataEvent, uint16_t *StartRegisterStation, uint16_t *DoneRegisterStation, uint16_t *EnterOperational, uint16_t *SuccessorLost);

/**
 * Returns dS485 communications statistics.
 * 
 * 
 * Response callback function prototype for call #dSMStatistics_get_dS485.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_STATISTICS and ModifierId = #DSM_STATISTICS_GET_DS485
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] TxToken 
 * @param [in] TxStartupRequest 
 * @param [in] TxStartupResponse 
 * @param [in] TxJoinRequest 
 * @param [in] TxJoinResponse 
 * @param [in] TxGetAddressRequest 
 * @param [in] TxGetAddressResponse 
 * @param [in] TxSetAddressRequest 
 * @param [in] TxSetAddressResponse 
 * @param [in] TxSetSuccessorAddressRequest 
 * @param [in] TxSetSuccessorAddressResponse 
 * @param [in] TxResponse 
 * @param [in] TxDataRequest 
 * @param [in] TxDataResponse 
 * @param [in] TxDataEvent 
 * @param [in] RxResponse 
 * @param [in] RxDataRequest 
 * @param [in] RxDataResponse 
 * @param [in] RxDataEvent 
 * @param [in] StartRegisterStation 
 * @param [in] DoneRegisterStation 
 * @param [in] EnterOperational 
 * @param [in] SuccessorLost 
 */
typedef void (*dSMStatistics_get_dS485_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint32_t TxToken, uint16_t TxStartupRequest, uint16_t TxStartupResponse, uint16_t TxJoinRequest, uint16_t TxJoinResponse, uint16_t TxGetAddressRequest, uint16_t TxGetAddressResponse, uint16_t TxSetAddressRequest, uint16_t TxSetAddressResponse, uint16_t TxSetSuccessorAddressRequest, uint16_t TxSetSuccessorAddressResponse, uint16_t TxResponse, uint16_t TxDataRequest, uint16_t TxDataResponse, uint16_t TxDataEvent, uint16_t RxResponse, uint16_t RxDataRequest, uint16_t RxDataResponse, uint16_t RxDataEvent, uint16_t StartRegisterStation, uint16_t DoneRegisterStation, uint16_t EnterOperational, uint16_t SuccessorLost);

/**
 * Returns dS485 communications statistics.
 * 
 * 
 * Request callback function prototype for call #dSMStatistics_get_dS485.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_STATISTICS and ModifierId = #DSM_STATISTICS_GET_DS485
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMStatistics_get_dS485_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Reset dS485 communications statistics.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMStatistics_reset_dS485_response_callback_t callback.
 * To receive this request from other bus members register the #dSMStatistics_reset_dS485_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * 
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMStatistics_reset_dS485(DsmApiHandle_t handle, dsuid_t dSMdSUID);

/**
 * Reset dS485 communications statistics.
 * 
 * 
 * Response callback function prototype for call #dSMStatistics_reset_dS485.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_STATISTICS and ModifierId = #DSM_STATISTICS_RESET_DS485
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMStatistics_reset_dS485_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Reset dS485 communications statistics.
 * 
 * 
 * Request callback function prototype for call #dSMStatistics_reset_dS485.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_STATISTICS and ModifierId = #DSM_STATISTICS_RESET_DS485
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMStatistics_reset_dS485_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * 
Retrieve the current statistics of the Upstream receiver. The statistics 
data is transferred in 96 bytes chunks selected by Index. Only Index==0 
updates the statistics. Other Indices just transfer previously fetched data.
                
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMStatistics_get_upstream_response_callback_t callback.
 * To receive this request from other bus members register the #dSMStatistics_get_upstream_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] Index Requested index into statistics structure
 * @param [out] Length Length of data in buffer
 * @param [out] Statistics Statistics as a byte array. (pass a reference to a preallocated buffer of at least 96 bytes.)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMStatistics_get_upstream(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t Index, uint8_t *Length, uint8_t *Statistics);

/**
 * 
Retrieve the current statistics of the Upstream receiver. The statistics 
data is transferred in 96 bytes chunks selected by Index. Only Index==0 
updates the statistics. Other Indices just transfer previously fetched data.
                
 * 
 * 
 * Response callback function prototype for call #dSMStatistics_get_upstream.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_STATISTICS and ModifierId = #DSM_STATISTICS_GET_UPSTREAM
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Length Length of data in buffer
 * @param [in] Statistics Statistics as a byte array.
 */
typedef void (*dSMStatistics_get_upstream_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Length, const uint8_t *Statistics);

/**
 * 
Retrieve the current statistics of the Upstream receiver. The statistics 
data is transferred in 96 bytes chunks selected by Index. Only Index==0 
updates the statistics. Other Indices just transfer previously fetched data.
                
 * 
 * 
 * Request callback function prototype for call #dSMStatistics_get_upstream.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_STATISTICS and ModifierId = #DSM_STATISTICS_GET_UPSTREAM
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Index Requested index into statistics structure
 */
typedef void (*dSMStatistics_get_upstream_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Index);

/**
 * Reset the statistics of the Upstream receiver.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMStatistics_reset_upstream_response_callback_t callback.
 * To receive this request from other bus members register the #dSMStatistics_reset_upstream_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * 
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMStatistics_reset_upstream(DsmApiHandle_t handle, dsuid_t dSMdSUID);

/**
 * Reset the statistics of the Upstream receiver.
 * 
 * 
 * Response callback function prototype for call #dSMStatistics_reset_upstream.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_STATISTICS and ModifierId = #DSM_STATISTICS_RESET_UPSTREAM
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMStatistics_reset_upstream_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Reset the statistics of the Upstream receiver.
 * 
 * 
 * Request callback function prototype for call #dSMStatistics_reset_upstream.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_STATISTICS and ModifierId = #DSM_STATISTICS_RESET_UPSTREAM
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMStatistics_reset_upstream_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Get the current internal debug statistics.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMStatistics_get_internals_response_callback_t callback.
 * To receive this request from other bus members register the #dSMStatistics_get_internals_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] RxShortUpstream Number of received short Upstream messages.
 * @param [out] RxLongUpstream Number of received long Upstream messages.
 * @param [out] TxDownstream Number of transmitted Downstream messages.
 * @param [out] TxErrorSelectA Number of queue overflows in the high-priority Downstream queue (SelectA).
 * @param [out] TxErrorSelectB Number of queue overflows in the low-priority Downstream queue (SelectB).
 * @param [out] DSPResets Number of DSP Resets.
 * @param [out] DSPMsgSizeError Number wrongly sized messages.
 * @param [out] DSPMsgMagicError Number of messages with wrong magic.
 * @param [out] DSPMsgUnknown Number of unknown messages.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMStatistics_get_internals(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint32_t *RxShortUpstream, uint32_t *RxLongUpstream, uint32_t *TxDownstream, uint32_t *TxErrorSelectA, uint32_t *TxErrorSelectB, uint32_t *DSPResets, uint32_t *DSPMsgSizeError, uint32_t *DSPMsgMagicError, uint32_t *DSPMsgUnknown);

/**
 * Get the current internal debug statistics.
 * 
 * 
 * Response callback function prototype for call #dSMStatistics_get_internals.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_STATISTICS and ModifierId = #DSM_STATISTICS_GET_INTERNALS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] RxShortUpstream Number of received short Upstream messages.
 * @param [in] RxLongUpstream Number of received long Upstream messages.
 * @param [in] TxDownstream Number of transmitted Downstream messages.
 * @param [in] TxErrorSelectA Number of queue overflows in the high-priority Downstream queue (SelectA).
 * @param [in] TxErrorSelectB Number of queue overflows in the low-priority Downstream queue (SelectB).
 * @param [in] DSPResets Number of DSP Resets.
 * @param [in] DSPMsgSizeError Number wrongly sized messages.
 * @param [in] DSPMsgMagicError Number of messages with wrong magic.
 * @param [in] DSPMsgUnknown Number of unknown messages.
 */
typedef void (*dSMStatistics_get_internals_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint32_t RxShortUpstream, uint32_t RxLongUpstream, uint32_t TxDownstream, uint32_t TxErrorSelectA, uint32_t TxErrorSelectB, uint32_t DSPResets, uint32_t DSPMsgSizeError, uint32_t DSPMsgMagicError, uint32_t DSPMsgUnknown);

/**
 * Get the current internal debug statistics.
 * 
 * 
 * Request callback function prototype for call #dSMStatistics_get_internals.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_STATISTICS and ModifierId = #DSM_STATISTICS_GET_INTERNALS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMStatistics_get_internals_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Reset the internal debug statistics.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMStatistics_reset_internals_response_callback_t callback.
 * To receive this request from other bus members register the #dSMStatistics_reset_internals_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * 
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMStatistics_reset_internals(DsmApiHandle_t handle, dsuid_t dSMdSUID);

/**
 * Reset the internal debug statistics.
 * 
 * 
 * Response callback function prototype for call #dSMStatistics_reset_internals.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_STATISTICS and ModifierId = #DSM_STATISTICS_RESET_INTERNALS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMStatistics_reset_internals_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Reset the internal debug statistics.
 * 
 * 
 * Request callback function prototype for call #dSMStatistics_reset_internals.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_STATISTICS and ModifierId = #DSM_STATISTICS_RESET_INTERNALS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMStatistics_reset_internals_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Get the pool/event queue margins.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMStatistics_get_pool_margins_response_callback_t callback.
 * To receive this request from other bus members register the #dSMStatistics_get_pool_margins_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] SmallPoolMargin Min number of free queue spots.
 * @param [out] MediumPoolMargin Min number of free queue spots.
 * @param [out] LargePoolMargin Min number of free queue spots.
 * @param [out] FreescaleQueueMargin Min number of free queue spots.
 * @param [out] MMIQueueMargin Min number of free queue spots.
 * @param [out] dSMAPIQueueMargin Min number of free queue spots.
 * @param [out] DatamodelQueueMargin Min number of free queue spots.
 * @param [out] SelectBQueueMargin Min number of free queue spots.
 * @param [out] SelectAQueueMargin Min number of free queue spots.
 * @param [out] SPIQueueMargin Min number of free queue spots.
 * @param [out] dS485QueueMargin Min number of free queue spots.
 * @param [out] ReceiverQueueMargin Min number of free queue spots.
 * @param [out] dSMAPIDeferredQueue Min number of free queue spots.
 * @param [out] dS485TxMessageQueue Min number of free queue spots.
 * @param [out] dS485DeferredTxMessageQueue Min number of free queue spots.
 * @param [out] FreescaleDeferredQueue Min number of free queue spots.
 * @param [out] MMIDeferredQueue Min number of free queue spots.
 * @param [out] SelectADeferredQueue Min number of free queue spots.
 * @param [out] SelectBDeferredCommandQueue Min number of free queue spots.
 * @param [out] SelectBDeferredDsuidQueue Min number of free queue spots.
 * @param [out] SPIFrontPanelDeferredQueue Min number of free queue spots.
 * @param [out] SPIPrioDeferredQueue Min number of free queue spots.
 * @param [out] SPIDSPTxMessageQueue Min number of free queue spots.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMStatistics_get_pool_margins(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t *SmallPoolMargin, uint8_t *MediumPoolMargin, uint8_t *LargePoolMargin, uint8_t *FreescaleQueueMargin, uint8_t *MMIQueueMargin, uint8_t *dSMAPIQueueMargin, uint8_t *DatamodelQueueMargin, uint8_t *SelectBQueueMargin, uint8_t *SelectAQueueMargin, uint8_t *SPIQueueMargin, uint8_t *dS485QueueMargin, uint8_t *ReceiverQueueMargin, uint8_t *dSMAPIDeferredQueue, uint8_t *dS485TxMessageQueue, uint8_t *dS485DeferredTxMessageQueue, uint8_t *FreescaleDeferredQueue, uint8_t *MMIDeferredQueue, uint8_t *SelectADeferredQueue, uint8_t *SelectBDeferredCommandQueue, uint8_t *SelectBDeferredDsuidQueue, uint8_t *SPIFrontPanelDeferredQueue, uint8_t *SPIPrioDeferredQueue, uint8_t *SPIDSPTxMessageQueue);

/**
 * Get the pool/event queue margins.
 * 
 * 
 * Response callback function prototype for call #dSMStatistics_get_pool_margins.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_STATISTICS and ModifierId = #DSM_STATISTICS_GET_POOL_MARGINS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] SmallPoolMargin Min number of free queue spots.
 * @param [in] MediumPoolMargin Min number of free queue spots.
 * @param [in] LargePoolMargin Min number of free queue spots.
 * @param [in] FreescaleQueueMargin Min number of free queue spots.
 * @param [in] MMIQueueMargin Min number of free queue spots.
 * @param [in] dSMAPIQueueMargin Min number of free queue spots.
 * @param [in] DatamodelQueueMargin Min number of free queue spots.
 * @param [in] SelectBQueueMargin Min number of free queue spots.
 * @param [in] SelectAQueueMargin Min number of free queue spots.
 * @param [in] SPIQueueMargin Min number of free queue spots.
 * @param [in] dS485QueueMargin Min number of free queue spots.
 * @param [in] ReceiverQueueMargin Min number of free queue spots.
 * @param [in] dSMAPIDeferredQueue Min number of free queue spots.
 * @param [in] dS485TxMessageQueue Min number of free queue spots.
 * @param [in] dS485DeferredTxMessageQueue Min number of free queue spots.
 * @param [in] FreescaleDeferredQueue Min number of free queue spots.
 * @param [in] MMIDeferredQueue Min number of free queue spots.
 * @param [in] SelectADeferredQueue Min number of free queue spots.
 * @param [in] SelectBDeferredCommandQueue Min number of free queue spots.
 * @param [in] SelectBDeferredDsuidQueue Min number of free queue spots.
 * @param [in] SPIFrontPanelDeferredQueue Min number of free queue spots.
 * @param [in] SPIPrioDeferredQueue Min number of free queue spots.
 * @param [in] SPIDSPTxMessageQueue Min number of free queue spots.
 */
typedef void (*dSMStatistics_get_pool_margins_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t SmallPoolMargin, uint8_t MediumPoolMargin, uint8_t LargePoolMargin, uint8_t FreescaleQueueMargin, uint8_t MMIQueueMargin, uint8_t dSMAPIQueueMargin, uint8_t DatamodelQueueMargin, uint8_t SelectBQueueMargin, uint8_t SelectAQueueMargin, uint8_t SPIQueueMargin, uint8_t dS485QueueMargin, uint8_t ReceiverQueueMargin, uint8_t dSMAPIDeferredQueue, uint8_t dS485TxMessageQueue, uint8_t dS485DeferredTxMessageQueue, uint8_t FreescaleDeferredQueue, uint8_t MMIDeferredQueue, uint8_t SelectADeferredQueue, uint8_t SelectBDeferredCommandQueue, uint8_t SelectBDeferredDsuidQueue, uint8_t SPIFrontPanelDeferredQueue, uint8_t SPIPrioDeferredQueue, uint8_t SPIDSPTxMessageQueue);

/**
 * Get the pool/event queue margins.
 * 
 * 
 * Request callback function prototype for call #dSMStatistics_get_pool_margins.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_STATISTICS and ModifierId = #DSM_STATISTICS_GET_POOL_MARGINS
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMStatistics_get_pool_margins_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Get information about a specific STOP timer.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMStatistics_get_stop_timer_response_callback_t callback.
 * To receive this request from other bus members register the #dSMStatistics_get_stop_timer_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] Index Timer Index.
 * @param [out] LocalZoneId 
 * @param [out] GroupId 
 * @param [out] ButtonId 
 * @param [out] TimeOut in Seconds
 * @param [out] TimerCount 
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMStatistics_get_stop_timer(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t Index, uint8_t *LocalZoneId, uint8_t *GroupId, uint8_t *ButtonId, uint8_t *TimeOut, uint32_t *TimerCount);

/**
 * Get information about a specific STOP timer.
 * 
 * 
 * Response callback function prototype for call #dSMStatistics_get_stop_timer.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_STATISTICS and ModifierId = #DSM_STATISTICS_GET_STOP_TIMER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] LocalZoneId 
 * @param [in] GroupId 
 * @param [in] ButtonId 
 * @param [in] TimeOut in Seconds
 * @param [in] TimerCount 
 */
typedef void (*dSMStatistics_get_stop_timer_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t LocalZoneId, uint8_t GroupId, uint8_t ButtonId, uint8_t TimeOut, uint32_t TimerCount);

/**
 * Get information about a specific STOP timer.
 * 
 * 
 * Request callback function prototype for call #dSMStatistics_get_stop_timer.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_STATISTICS and ModifierId = #DSM_STATISTICS_GET_STOP_TIMER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Index Timer Index.
 */
typedef void (*dSMStatistics_get_stop_timer_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Index);

/**
 * Reboots the dSM. 
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMReboot_response_callback_t callback.
 * To receive this request from other bus members register the #dSMReboot_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * 
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMReboot(DsmApiHandle_t handle, dsuid_t dSMdSUID);

/**
 * Reboots the dSM. 
 * 
 * 
 * Response callback function prototype for call #dSMReboot.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_REBOOT and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMReboot_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Reboots the dSM. 
 * 
 * 
 * Request callback function prototype for call #dSMReboot.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_REBOOT and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMReboot_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Removes all user specific data form the dSM. After that, the dSM reboots. This operation takes around 1 minute to complete. During this time no actions are possible. 
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMFactoryReset_response_callback_t callback.
 * To receive this request from other bus members register the #dSMFactoryReset_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] Password cafeh
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMFactoryReset(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t Password);

/**
 * Removes all user specific data form the dSM. After that, the dSM reboots. This operation takes around 1 minute to complete. During this time no actions are possible. 
 * 
 * 
 * Response callback function prototype for call #dSMFactoryReset.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_FACTORY_RESET and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMFactoryReset_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Removes all user specific data form the dSM. After that, the dSM reboots. This operation takes around 1 minute to complete. During this time no actions are possible. 
 * 
 * 
 * Request callback function prototype for call #dSMFactoryReset.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_FACTORY_RESET and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Password cafeh
 */
typedef void (*dSMFactoryReset_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t Password);

/**
 * Check the validity of the stored image file.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ImageMaintenance_check_image_response_callback_t callback.
 * To receive this request from other bus members register the #ImageMaintenance_check_image_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] ReadCRC 
 * @param [out] ComputedCRC 
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ImageMaintenance_check_image(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t *ReadCRC, uint16_t *ComputedCRC);

/**
 * Check the validity of the stored image file.
 * 
 * 
 * Response callback function prototype for call #ImageMaintenance_check_image.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #IMAGE_MAINTENANCE and ModifierId = #IMAGE_MAINTENANCE_CHECK_IMAGE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ReadCRC 
 * @param [in] ComputedCRC 
 */
typedef void (*ImageMaintenance_check_image_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ReadCRC, uint16_t ComputedCRC);

/**
 * Check the validity of the stored image file.
 * 
 * 
 * Request callback function prototype for call #ImageMaintenance_check_image.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #IMAGE_MAINTENANCE and ModifierId = #IMAGE_MAINTENANCE_CHECK_IMAGE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ImageMaintenance_check_image_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Get file information of the stored image file.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ImageMaintenance_get_image_info_response_callback_t callback.
 * To receive this request from other bus members register the #ImageMaintenance_get_image_info_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] ManufacturerId 
 * @param [out] DeviceId 
 * @param [out] ContentType 
 * @param [out] ContentSize 
 * @param [out] ContentCRC 
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ImageMaintenance_get_image_info(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint32_t *ManufacturerId, uint32_t *DeviceId, uint32_t *ContentType, uint32_t *ContentSize, uint16_t *ContentCRC);

/**
 * Get file information of the stored image file.
 * 
 * 
 * Response callback function prototype for call #ImageMaintenance_get_image_info.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #IMAGE_MAINTENANCE and ModifierId = #IMAGE_MAINTENANCE_GET_IMAGE_INFO
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ManufacturerId 
 * @param [in] DeviceId 
 * @param [in] ContentType 
 * @param [in] ContentSize 
 * @param [in] ContentCRC 
 */
typedef void (*ImageMaintenance_get_image_info_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint32_t ManufacturerId, uint32_t DeviceId, uint32_t ContentType, uint32_t ContentSize, uint16_t ContentCRC);

/**
 * Get file information of the stored image file.
 * 
 * 
 * Request callback function prototype for call #ImageMaintenance_get_image_info.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #IMAGE_MAINTENANCE and ModifierId = #IMAGE_MAINTENANCE_GET_IMAGE_INFO
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ImageMaintenance_get_image_info_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Start update process.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ImageMaintenance_start_update_response_callback_t callback.
 * To receive this request from other bus members register the #ImageMaintenance_start_update_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * 
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ImageMaintenance_start_update(DsmApiHandle_t handle, dsuid_t dSMdSUID);

/**
 * Start update process.
 * 
 * 
 * Response callback function prototype for call #ImageMaintenance_start_update.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #IMAGE_MAINTENANCE and ModifierId = #IMAGE_MAINTENANCE_START_UPDATE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ImageMaintenance_start_update_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Start update process.
 * 
 * 
 * Request callback function prototype for call #ImageMaintenance_start_update.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #IMAGE_MAINTENANCE and ModifierId = #IMAGE_MAINTENANCE_START_UPDATE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ImageMaintenance_start_update_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Remove the stored image file from Flash.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ImageMaintenance_remove_image_response_callback_t callback.
 * To receive this request from other bus members register the #ImageMaintenance_remove_image_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * 
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ImageMaintenance_remove_image(DsmApiHandle_t handle, dsuid_t dSMdSUID);

/**
 * Remove the stored image file from Flash.
 * 
 * 
 * Response callback function prototype for call #ImageMaintenance_remove_image.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #IMAGE_MAINTENANCE and ModifierId = #IMAGE_MAINTENANCE_REMOVE_IMAGE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ImageMaintenance_remove_image_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Remove the stored image file from Flash.
 * 
 * 
 * Request callback function prototype for call #ImageMaintenance_remove_image.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #IMAGE_MAINTENANCE and ModifierId = #IMAGE_MAINTENANCE_REMOVE_IMAGE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ImageMaintenance_remove_image_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Write a new Image to the Flash of the dSM.
The transfer of a image needs several calls. The protocol is the following. First, a write
request has to be done. If successful, data packets are sent. Each packet is numbered.
The packets must be transferred with consecutive, increasing numbers. The dSM knows,
when the last packet is transferred. A transfer can't be canceled, but if a new transfer
is started unless the old one is finished, the old one is implicit canceled. Further steps,
like burning, have to be done with the command Image Maintenance.
ATTENTION: The user has to ensure, that only one transfer is active at once. If a
second transfer is started until the first finished, the behavior is undefined.
Since the transfer is nothing special, the dSM is processing other calls between data
calls. Start the image transfer.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ImageTransfer_write_request_response_callback_t callback.
 * To receive this request from other bus members register the #ImageTransfer_write_request_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ManufacturerId 
 * @param [in] DeviceId 
 * @param [in] ContentType 
 * @param [in] ContentSize 
 * @param [in] ContentCRC 
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ImageTransfer_write_request(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint32_t ManufacturerId, uint32_t DeviceId, uint32_t ContentType, uint32_t ContentSize, uint16_t ContentCRC);

/**
 * Write a new Image to the Flash of the dSM.
The transfer of a image needs several calls. The protocol is the following. First, a write
request has to be done. If successful, data packets are sent. Each packet is numbered.
The packets must be transferred with consecutive, increasing numbers. The dSM knows,
when the last packet is transferred. A transfer can't be canceled, but if a new transfer
is started unless the old one is finished, the old one is implicit canceled. Further steps,
like burning, have to be done with the command Image Maintenance.
ATTENTION: The user has to ensure, that only one transfer is active at once. If a
second transfer is started until the first finished, the behavior is undefined.
Since the transfer is nothing special, the dSM is processing other calls between data
calls. Start the image transfer.
 * 
 * 
 * Response callback function prototype for call #ImageTransfer_write_request.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #IMAGE_TRANSFER and ModifierId = #IMAGE_TRANSFER_WRITE_REQUEST
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ImageTransfer_write_request_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Write a new Image to the Flash of the dSM.
The transfer of a image needs several calls. The protocol is the following. First, a write
request has to be done. If successful, data packets are sent. Each packet is numbered.
The packets must be transferred with consecutive, increasing numbers. The dSM knows,
when the last packet is transferred. A transfer can't be canceled, but if a new transfer
is started unless the old one is finished, the old one is implicit canceled. Further steps,
like burning, have to be done with the command Image Maintenance.
ATTENTION: The user has to ensure, that only one transfer is active at once. If a
second transfer is started until the first finished, the behavior is undefined.
Since the transfer is nothing special, the dSM is processing other calls between data
calls. Start the image transfer.
 * 
 * 
 * Request callback function prototype for call #ImageTransfer_write_request.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #IMAGE_TRANSFER and ModifierId = #IMAGE_TRANSFER_WRITE_REQUEST
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ManufacturerId 
 * @param [in] DeviceId 
 * @param [in] ContentType 
 * @param [in] ContentSize 
 * @param [in] ContentCRC 
 */
typedef void (*ImageTransfer_write_request_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint32_t ManufacturerId, uint32_t DeviceId, uint32_t ContentType, uint32_t ContentSize, uint16_t ContentCRC);

/**
 * Write a new Image to the Flash of the dSM.
The transfer of a image needs several calls. The protocol is the following. First, a write
request has to be done. If successful, data packets are sent. Each packet is numbered.
The packets must be transferred with consecutive, increasing numbers. The dSM knows,
when the last packet is transferred. A transfer can't be canceled, but if a new transfer
is started unless the old one is finished, the old one is implicit canceled. Further steps,
like burning, have to be done with the command Image Maintenance.
ATTENTION: The user has to ensure, that only one transfer is active at once. If a
second transfer is started until the first finished, the behavior is undefined.
Since the transfer is nothing special, the dSM is processing other calls between data
calls. Transfer image data.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ImageTransfer_data_response_callback_t callback.
 * To receive this request from other bus members register the #ImageTransfer_data_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] PacketNr Current packet number.
 * @param [in] Data it's only for the last packet allowed to have less than 64 data bytes.
 * @param [out] ExpectedPacketNr dSM expected this packet.
 * @param [out] ReceivedPacketNr dSM received this packet.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ImageTransfer_data(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint32_t PacketNr, const uint8_t *Data, uint32_t *ExpectedPacketNr, uint32_t *ReceivedPacketNr);

/**
 * Write a new Image to the Flash of the dSM.
The transfer of a image needs several calls. The protocol is the following. First, a write
request has to be done. If successful, data packets are sent. Each packet is numbered.
The packets must be transferred with consecutive, increasing numbers. The dSM knows,
when the last packet is transferred. A transfer can't be canceled, but if a new transfer
is started unless the old one is finished, the old one is implicit canceled. Further steps,
like burning, have to be done with the command Image Maintenance.
ATTENTION: The user has to ensure, that only one transfer is active at once. If a
second transfer is started until the first finished, the behavior is undefined.
Since the transfer is nothing special, the dSM is processing other calls between data
calls. Transfer image data.
 * 
 * 
 * Response callback function prototype for call #ImageTransfer_data.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #IMAGE_TRANSFER and ModifierId = #IMAGE_TRANSFER_DATA
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ExpectedPacketNr dSM expected this packet.
 * @param [in] ReceivedPacketNr dSM received this packet.
 */
typedef void (*ImageTransfer_data_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint32_t ExpectedPacketNr, uint32_t ReceivedPacketNr);

/**
 * Write a new Image to the Flash of the dSM.
The transfer of a image needs several calls. The protocol is the following. First, a write
request has to be done. If successful, data packets are sent. Each packet is numbered.
The packets must be transferred with consecutive, increasing numbers. The dSM knows,
when the last packet is transferred. A transfer can't be canceled, but if a new transfer
is started unless the old one is finished, the old one is implicit canceled. Further steps,
like burning, have to be done with the command Image Maintenance.
ATTENTION: The user has to ensure, that only one transfer is active at once. If a
second transfer is started until the first finished, the behavior is undefined.
Since the transfer is nothing special, the dSM is processing other calls between data
calls. Transfer image data.
 * 
 * 
 * Request callback function prototype for call #ImageTransfer_data.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #IMAGE_TRANSFER and ModifierId = #IMAGE_TRANSFER_DATA
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] PacketNr Current packet number.
 * @param [in] Data it's only for the last packet allowed to have less than 64 data bytes.
 */
typedef void (*ImageTransfer_data_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint32_t PacketNr, const uint8_t *Data);



/**
 * Sent whenever the current operation state as indicated with the front LEDs changed. 
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DSM_STATE_CHANGE and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Hardware 0=Ok, 1=Updating, 2=Failure
 * @param [in] DSP 0=Ready, 1=Not Ready
 * @param [in] Temperature 0=OK, 1=over warn level, 2=over error level
 * @param [in] Config 0=Ok, 1=Invalid
 * @param [in] dS485 0=Ready, 1=Initializing
 * @param [in] Line 0=Idle, 1=Jumbling (registration)
 */
typedef void (*EventDsmStateChange_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Hardware, uint8_t DSP, uint8_t Temperature, uint8_t Config, uint8_t dS485, uint8_t Line);

/**
 * Sent whenever the dsm detects some problems. 
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DSM_ERROR and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Error Error code
 * @param [in] Data Error code specific data
 */
typedef void (*EventDsmError_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t Error, uint32_t Data);

/**
 * Events to sync set calls which send a value to a device. Sent when set device zone request is transmitted to DSP
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DSM_DONE and ModifierId = #EVENT_DSM_DONE_SET_DEVICE_ZONE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId DeviceId which the request was sent
 */
typedef void (*EventDsmDone_set_device_zone_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId);

/**
 * Events to sync set calls which send a value to a device. Sent when set device config request is transmitted to DSP
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DSM_DONE and ModifierId = #EVENT_DSM_DONE_SET_DEVICE_CONFIG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId DeviceId which the request was sent
 * @param [in] ConfigClass Bank of written parameter
 * @param [in] ConfigIndex Offset of written parameter
 */
typedef void (*EventDsmDone_set_device_config_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t ConfigClass, uint8_t ConfigIndex);

/**
 * Events to sync set calls which send a value to a device. Sent when set device button output channel request is transmitted to DSP
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DSM_DONE and ModifierId = #EVENT_DSM_DONE_SET_DEVICE_BUTTON_OUTPUT_CHANNEL
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId DeviceId which the request was sent
 */
typedef void (*EventDsmDone_set_device_button_output_channel_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId);

/**
 * Events to sync set calls which send a value to a device. Sent when set device button global group request is transmitted to DSP
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DSM_DONE and ModifierId = #EVENT_DSM_DONE_SET_DEVICE_BUTTON_GLOBAL_GROUP
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId DeviceId which the request was sent
 */
typedef void (*EventDsmDone_set_device_button_global_group_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId);

/**
 * Events to sync set calls which send a value to a device. Sent when add device group request is transmitted to DSP
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DSM_DONE and ModifierId = #EVENT_DSM_DONE_ADD_DEVICE_TO_GROUP
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId DeviceId which the request was sent
 */
typedef void (*EventDsmDone_add_device_to_group_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId);

/** @} */
/**
 * @defgroup dSLink dSLink
 *
 * This group of API calls addresses the communication with dSLink devices.
 * @{
 */
 /**
 * Send UDI commands to all dSLink devices of a group/zone. UDI device stays selected after the call execution. Used when multiple bytes have to be sent.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupDslinkSend_not_last_byte_no_answer_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupDslinkSend_not_last_byte_no_answer_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Select only devices in this zone.
 * @param [in] GroupId Select only devices in this group.
 * @param [in] Value Value to send to devices.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupDslinkSend_not_last_byte_no_answer(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint8_t Value);

/**
 * Send UDI commands to all dSLink devices of a group/zone. UDI device stays selected after the call execution. Used when multiple bytes have to be sent.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupDslinkSend_not_last_byte_no_answer.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_DSLINK_SEND and ModifierId = #ZONE_GROUP_DSLINK_SEND_NOT_LAST_BYTE_NO_ANSWER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupDslinkSend_not_last_byte_no_answer_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Send UDI commands to all dSLink devices of a group/zone. UDI device stays selected after the call execution. Used when multiple bytes have to be sent.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupDslinkSend_not_last_byte_no_answer.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_DSLINK_SEND and ModifierId = #ZONE_GROUP_DSLINK_SEND_NOT_LAST_BYTE_NO_ANSWER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Select only devices in this zone.
 * @param [in] GroupId Select only devices in this group.
 * @param [in] Value Value to send to devices.
 */
typedef void (*ZoneGroupDslinkSend_not_last_byte_no_answer_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint8_t Value);

/**
 * Send UDI commands to all dSLink devices of a group/zone. UDI device is de-selected after the call. Used only on the last access.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #ZoneGroupDslinkSend_last_byte_no_answer_response_callback_t callback.
 * To receive this request from other bus members register the #ZoneGroupDslinkSend_last_byte_no_answer_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] ZoneId Select only devices in this zone.
 * @param [in] GroupId Select only devices in this group.
 * @param [in] Value Value to send to devices.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int ZoneGroupDslinkSend_last_byte_no_answer(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t ZoneId, uint8_t GroupId, uint8_t Value);

/**
 * Send UDI commands to all dSLink devices of a group/zone. UDI device is de-selected after the call. Used only on the last access.
 * 
 * 
 * Response callback function prototype for call #ZoneGroupDslinkSend_last_byte_no_answer.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #ZONE_GROUP_DSLINK_SEND and ModifierId = #ZONE_GROUP_DSLINK_SEND_LAST_BYTE_NO_ANSWER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*ZoneGroupDslinkSend_last_byte_no_answer_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Send UDI commands to all dSLink devices of a group/zone. UDI device is de-selected after the call. Used only on the last access.
 * 
 * 
 * Request callback function prototype for call #ZoneGroupDslinkSend_last_byte_no_answer.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #ZONE_GROUP_DSLINK_SEND and ModifierId = #ZONE_GROUP_DSLINK_SEND_LAST_BYTE_NO_ANSWER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] ZoneId Select only devices in this zone.
 * @param [in] GroupId Select only devices in this group.
 * @param [in] Value Value to send to devices.
 */
typedef void (*ZoneGroupDslinkSend_last_byte_no_answer_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t ZoneId, uint8_t GroupId, uint8_t Value);

/**
 * Send UDI commands to a single dSLink device. UDI device stays selected after the call execution. Used when multiple bytes have to be sent.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceDslinkSend_not_last_byte_no_answer_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceDslinkSend_not_last_byte_no_answer_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Select only this device.
 * @param [in] Value Value to send to devices.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceDslinkSend_not_last_byte_no_answer(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t Value);

/**
 * Send UDI commands to a single dSLink device. UDI device stays selected after the call execution. Used when multiple bytes have to be sent.
 * 
 * 
 * Response callback function prototype for call #DeviceDslinkSend_not_last_byte_no_answer.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_DSLINK_SEND and ModifierId = #DEVICE_DSLINK_SEND_NOT_LAST_BYTE_NO_ANSWER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceDslinkSend_not_last_byte_no_answer_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Send UDI commands to a single dSLink device. UDI device stays selected after the call execution. Used when multiple bytes have to be sent.
 * 
 * 
 * Request callback function prototype for call #DeviceDslinkSend_not_last_byte_no_answer.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_DSLINK_SEND and ModifierId = #DEVICE_DSLINK_SEND_NOT_LAST_BYTE_NO_ANSWER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Select only this device.
 * @param [in] Value Value to send to devices.
 */
typedef void (*DeviceDslinkSend_not_last_byte_no_answer_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t Value);

/**
 * Send UDI commands to a single dSLink device. UDI device is de-selected after the call. Used only on the last access.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceDslinkSend_last_byte_no_answer_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceDslinkSend_last_byte_no_answer_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Select only this device.
 * @param [in] Value Value to send to devices.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceDslinkSend_last_byte_no_answer(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t Value);

/**
 * Send UDI commands to a single dSLink device. UDI device is de-selected after the call. Used only on the last access.
 * 
 * 
 * Response callback function prototype for call #DeviceDslinkSend_last_byte_no_answer.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_DSLINK_SEND and ModifierId = #DEVICE_DSLINK_SEND_LAST_BYTE_NO_ANSWER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceDslinkSend_last_byte_no_answer_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Send UDI commands to a single dSLink device. UDI device is de-selected after the call. Used only on the last access.
 * 
 * 
 * Request callback function prototype for call #DeviceDslinkSend_last_byte_no_answer.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_DSLINK_SEND and ModifierId = #DEVICE_DSLINK_SEND_LAST_BYTE_NO_ANSWER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Select only this device.
 * @param [in] Value Value to send to devices.
 */
typedef void (*DeviceDslinkSend_last_byte_no_answer_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t Value);

/**
 * Send UDI commands to a single dSLink device. UDI device stays selected after the call execution. Used when multiple bytes have to be sent. The answer is sent with a #EventDslink_response_event_callback_t callback.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceDslinkSend_not_last_byte_with_answer_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceDslinkSend_not_last_byte_with_answer_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Select only this device.
 * @param [in] Value Value to send to devices.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceDslinkSend_not_last_byte_with_answer(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t Value);

/**
 * Send UDI commands to a single dSLink device. UDI device stays selected after the call execution. Used when multiple bytes have to be sent. The answer is sent with a #EventDslink_response_event_callback_t callback.
 * 
 * 
 * Response callback function prototype for call #DeviceDslinkSend_not_last_byte_with_answer.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_DSLINK_SEND and ModifierId = #DEVICE_DSLINK_SEND_NOT_LAST_BYTE_WITH_ANSWER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceDslinkSend_not_last_byte_with_answer_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Send UDI commands to a single dSLink device. UDI device stays selected after the call execution. Used when multiple bytes have to be sent. The answer is sent with a #EventDslink_response_event_callback_t callback.
 * 
 * 
 * Request callback function prototype for call #DeviceDslinkSend_not_last_byte_with_answer.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_DSLINK_SEND and ModifierId = #DEVICE_DSLINK_SEND_NOT_LAST_BYTE_WITH_ANSWER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Select only this device.
 * @param [in] Value Value to send to devices.
 */
typedef void (*DeviceDslinkSend_not_last_byte_with_answer_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t Value);

/**
 * Send UDI commands to a single dSLink device. UDI device is de-selected after the call. Used only on the last access. The answer is sent with a #EventDslink_response_event_callback_t callback.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #DeviceDslinkSend_last_byte_with_answer_response_callback_t callback.
 * To receive this request from other bus members register the #DeviceDslinkSend_last_byte_with_answer_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DeviceId Select only this device.
 * @param [in] Value Value to send to devices.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int DeviceDslinkSend_last_byte_with_answer(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t DeviceId, uint8_t Value);

/**
 * Send UDI commands to a single dSLink device. UDI device is de-selected after the call. Used only on the last access. The answer is sent with a #EventDslink_response_event_callback_t callback.
 * 
 * 
 * Response callback function prototype for call #DeviceDslinkSend_last_byte_with_answer.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DEVICE_DSLINK_SEND and ModifierId = #DEVICE_DSLINK_SEND_LAST_BYTE_WITH_ANSWER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*DeviceDslinkSend_last_byte_with_answer_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Send UDI commands to a single dSLink device. UDI device is de-selected after the call. Used only on the last access. The answer is sent with a #EventDslink_response_event_callback_t callback.
 * 
 * 
 * Request callback function prototype for call #DeviceDslinkSend_last_byte_with_answer.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DEVICE_DSLINK_SEND and ModifierId = #DEVICE_DSLINK_SEND_LAST_BYTE_WITH_ANSWER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Select only this device.
 * @param [in] Value Value to send to devices.
 */
typedef void (*DeviceDslinkSend_last_byte_with_answer_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t Value);



/**
 * Notification from a dSLink enabled device. Response to a UDI read request.
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DSLINK and ModifierId = #EVENT_DSLINK_RESPONSE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Source Device ID.
 * @param [in] Value Read-out value
 */
typedef void (*EventDslink_response_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t Value);

/**
 * Notification from a dSLink enabled device. UDI Request (Interrupt).
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DSLINK and ModifierId = #EVENT_DSLINK_INTERRUPT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId Source Device ID.
 * @param [in] Priority 0=normal, 1=high
 */
typedef void (*EventDslink_interrupt_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t Priority);

/** @} */
/**
 * @defgroup BusMembers BusMembers
 *
 * This group of API calls addresses any device which is registered on the ds485-bus.
 * @{
 */
 /**
 * Get type of bus member.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #BusMember_get_type_response_callback_t callback.
 * To receive this request from other bus members register the #BusMember_get_type_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] Type Type of bus member:
    -  0: ds485d
    -  1: ds485p
    -  8: dSS
    -  9: dSA
    - 16: dSM11
    - 17: dSM12
    - 32: vDSM
    - 33: vDC
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int BusMember_get_type(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t *Type);

/**
 * Get type of bus member.
 * 
 * 
 * Response callback function prototype for call #BusMember_get_type.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #BUS_MEMBER and ModifierId = #BUS_MEMBER_GET_TYPE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Type Type of bus member:
    -  0: ds485d
    -  1: ds485p
    -  8: dSS
    -  9: dSA
    - 16: dSM11
    - 17: dSM12
    - 32: vDSM
    - 33: vDC
 */
typedef void (*BusMember_get_type_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Type);

/**
 * Get type of bus member.
 * 
 * 
 * Request callback function prototype for call #BusMember_get_type.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #BUS_MEMBER and ModifierId = #BUS_MEMBER_GET_TYPE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*BusMember_get_type_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);



/** @} */
/**
 * @defgroup Debug Debug
 *
 * This group of API calls addresses debug functionality used in internal development.
 * @{
 */
 /**
 * Test front LEDs and button. Pressing the front button exits the test mode.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMDebugMode_set_MMI_flag_response_callback_t callback.
 * To receive this request from other bus members register the #dSMDebugMode_set_MMI_flag_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] DebugFlag Flags:
    - Bit 0: LED Blink mode
    - Bit 1: Manual LED test mode on
    - Bit 4: Green LED on
    - Bit 5: Red LED on
    - Bit 6: Blue LED on
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMDebugMode_set_MMI_flag(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t DebugFlag);

/**
 * Test front LEDs and button. Pressing the front button exits the test mode.
 * 
 * 
 * Response callback function prototype for call #dSMDebugMode_set_MMI_flag.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_SET_MMI_FLAG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMDebugMode_set_MMI_flag_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Test front LEDs and button. Pressing the front button exits the test mode.
 * 
 * 
 * Request callback function prototype for call #dSMDebugMode_set_MMI_flag.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_SET_MMI_FLAG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DebugFlag Flags:
    - Bit 0: LED Blink mode
    - Bit 1: Manual LED test mode on
    - Bit 4: Green LED on
    - Bit 5: Red LED on
    - Bit 6: Blue LED on
 */
typedef void (*dSMDebugMode_set_MMI_flag_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t DebugFlag);

/**
 * Get the current state of the LED/button test mode.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMDebugMode_get_MMI_flag_response_callback_t callback.
 * To receive this request from other bus members register the #dSMDebugMode_get_MMI_flag_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] DebugFlag Flags:
    - Bit 0: LED Blink mode
    - Bit 1: Manual LED test mode on
    - Bit 4: Green LED on
    - Bit 5: Red LED on
    - Bit 6: Blue LED on
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMDebugMode_get_MMI_flag(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t *DebugFlag);

/**
 * Get the current state of the LED/button test mode.
 * 
 * 
 * Response callback function prototype for call #dSMDebugMode_get_MMI_flag.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_GET_MMI_FLAG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DebugFlag Flags:
    - Bit 0: LED Blink mode
    - Bit 1: Manual LED test mode on
    - Bit 4: Green LED on
    - Bit 5: Red LED on
    - Bit 6: Blue LED on
 */
typedef void (*dSMDebugMode_get_MMI_flag_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t DebugFlag);

/**
 * Get the current state of the LED/button test mode.
 * 
 * 
 * Request callback function prototype for call #dSMDebugMode_get_MMI_flag.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_GET_MMI_FLAG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMDebugMode_get_MMI_flag_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Stops all actions on SELECT_B (e.g. registration, ping, device properties,...). Reboot dSM to recover functionality.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMDebugMode_stop_select_b_response_callback_t callback.
 * To receive this request from other bus members register the #dSMDebugMode_stop_select_b_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * 
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMDebugMode_stop_select_b(DsmApiHandle_t handle, dsuid_t dSMdSUID);

/**
 * Stops all actions on SELECT_B (e.g. registration, ping, device properties,...). Reboot dSM to recover functionality.
 * 
 * 
 * Response callback function prototype for call #dSMDebugMode_stop_select_b.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_STOP_SELECT_B
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMDebugMode_stop_select_b_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Stops all actions on SELECT_B (e.g. registration, ping, device properties,...). Reboot dSM to recover functionality.
 * 
 * 
 * Request callback function prototype for call #dSMDebugMode_stop_select_b.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_STOP_SELECT_B
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMDebugMode_stop_select_b_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Invalidate active registration on all devices and restart the device registration.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMDebugMode_restart_registration_response_callback_t callback.
 * To receive this request from other bus members register the #dSMDebugMode_restart_registration_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * 
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMDebugMode_restart_registration(DsmApiHandle_t handle, dsuid_t dSMdSUID);

/**
 * Invalidate active registration on all devices and restart the device registration.
 * 
 * 
 * Response callback function prototype for call #dSMDebugMode_restart_registration.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_RESTART_REGISTRATION
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMDebugMode_restart_registration_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Invalidate active registration on all devices and restart the device registration.
 * 
 * 
 * Request callback function prototype for call #dSMDebugMode_restart_registration.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_RESTART_REGISTRATION
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMDebugMode_restart_registration_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Restart the DSP. Use to activate a new DSP configuration.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMDebugMode_restart_dsp_response_callback_t callback.
 * To receive this request from other bus members register the #dSMDebugMode_restart_dsp_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * 
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMDebugMode_restart_dsp(DsmApiHandle_t handle, dsuid_t dSMdSUID);

/**
 * Restart the DSP. Use to activate a new DSP configuration.
 * 
 * 
 * Response callback function prototype for call #dSMDebugMode_restart_dsp.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_RESTART_DSP
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMDebugMode_restart_dsp_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Restart the DSP. Use to activate a new DSP configuration.
 * 
 * 
 * Request callback function prototype for call #dSMDebugMode_restart_dsp.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_RESTART_DSP
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMDebugMode_restart_dsp_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Read raw flash data in 64 byte chunks.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMDebugMode_read_flash_response_callback_t callback.
 * To receive this request from other bus members register the #dSMDebugMode_read_flash_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] Index Chunk index.
 * @param [out] Data Flash contents (pass a reference to a preallocated buffer of at least 64 bytes.)
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMDebugMode_read_flash(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint32_t Index, uint8_t *Data);

/**
 * Read raw flash data in 64 byte chunks.
 * 
 * 
 * Response callback function prototype for call #dSMDebugMode_read_flash.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_READ_FLASH
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Data Flash contents
 */
typedef void (*dSMDebugMode_read_flash_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, const uint8_t *Data);

/**
 * Read raw flash data in 64 byte chunks.
 * 
 * 
 * Request callback function prototype for call #dSMDebugMode_read_flash.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_READ_FLASH
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Index Chunk index.
 */
typedef void (*dSMDebugMode_read_flash_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint32_t Index);

/**
 * Write raw flash data in 64 byte chunks.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMDebugMode_write_flash_response_callback_t callback.
 * To receive this request from other bus members register the #dSMDebugMode_write_flash_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] Index Chunk index.
 * @param [in] Data Flash contents
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMDebugMode_write_flash(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint32_t Index, const uint8_t *Data);

/**
 * Write raw flash data in 64 byte chunks.
 * 
 * 
 * Response callback function prototype for call #dSMDebugMode_write_flash.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_WRITE_FLASH
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMDebugMode_write_flash_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Write raw flash data in 64 byte chunks.
 * 
 * 
 * Request callback function prototype for call #dSMDebugMode_write_flash.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_WRITE_FLASH
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Index Chunk index.
 * @param [in] Data Flash contents
 */
typedef void (*dSMDebugMode_write_flash_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint32_t Index, const uint8_t *Data);

/**
 * Get the state of the digitalSTROM communication logging. 0=disabled, 1=enabled.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMDebugMode_get_communication_log_state_response_callback_t callback.
 * To receive this request from other bus members register the #dSMDebugMode_get_communication_log_state_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [out] State Bit 0: Upstream; Bit 1: Downstream
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMDebugMode_get_communication_log_state(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t *State);

/**
 * Get the state of the digitalSTROM communication logging. 0=disabled, 1=enabled.
 * 
 * 
 * Response callback function prototype for call #dSMDebugMode_get_communication_log_state.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_GET_COMMUNICATION_LOG_STATE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] State Bit 0: Upstream; Bit 1: Downstream
 */
typedef void (*dSMDebugMode_get_communication_log_state_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t State);

/**
 * Get the state of the digitalSTROM communication logging. 0=disabled, 1=enabled.
 * 
 * 
 * Request callback function prototype for call #dSMDebugMode_get_communication_log_state.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_GET_COMMUNICATION_LOG_STATE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMDebugMode_get_communication_log_state_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set the state of the digitalSTROM communication logging. 0=disabled, 1=enabled.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMDebugMode_set_communication_log_state_response_callback_t callback.
 * To receive this request from other bus members register the #dSMDebugMode_set_communication_log_state_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] State Bit 0: Upstream; Bit 1: Downstream
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMDebugMode_set_communication_log_state(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t State);

/**
 * Set the state of the digitalSTROM communication logging. 0=disabled, 1=enabled.
 * 
 * 
 * Response callback function prototype for call #dSMDebugMode_set_communication_log_state.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_SET_COMMUNICATION_LOG_STATE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMDebugMode_set_communication_log_state_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Set the state of the digitalSTROM communication logging. 0=disabled, 1=enabled.
 * 
 * 
 * Request callback function prototype for call #dSMDebugMode_set_communication_log_state.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_SET_COMMUNICATION_LOG_STATE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] State Bit 0: Upstream; Bit 1: Downstream
 */
typedef void (*dSMDebugMode_set_communication_log_state_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t State);

/**
 * Disable the Jumble process. Only single devices can be registered.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMDebugMode_disable_jumble_response_callback_t callback.
 * To receive this request from other bus members register the #dSMDebugMode_disable_jumble_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] Disable 0=Jumble enabled; >0=Jumble disabled
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMDebugMode_disable_jumble(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint8_t Disable);

/**
 * Disable the Jumble process. Only single devices can be registered.
 * 
 * 
 * Response callback function prototype for call #dSMDebugMode_disable_jumble.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_DISABLE_JUMBLE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMDebugMode_disable_jumble_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Disable the Jumble process. Only single devices can be registered.
 * 
 * 
 * Request callback function prototype for call #dSMDebugMode_disable_jumble.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_DISABLE_JUMBLE
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Disable 0=Jumble enabled; >0=Jumble disabled
 */
typedef void (*dSMDebugMode_disable_jumble_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Disable);

/**
 * Test command. Inject short upstream message into the dSM to stimulate actions.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMDebugMode_inject_short_upstream_response_callback_t callback.
 * To receive this request from other bus members register the #dSMDebugMode_inject_short_upstream_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] Source Source device ID.
 * @param [in] Circuit Circuit ID.
 * @param [in] Key Key number
 * @param [in] Click Click type
 * @param [in] Sensor Sensor flag. 0=button message, 1=sensor message.
 * @param [in] Resend Resend flag. 0=message is first, 1=message is repeat.
 * @param [in] Quality Reception quality [0..62].
 * @param [in] Flags 0=Rx in pos half-wave; 1=Rx in neg half-wave.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMDebugMode_inject_short_upstream(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t Source, uint8_t Circuit, uint8_t Key, uint8_t Click, uint8_t Sensor, uint8_t Resend, uint8_t Quality, uint8_t Flags);

/**
 * Test command. Inject short upstream message into the dSM to stimulate actions.
 * 
 * 
 * Response callback function prototype for call #dSMDebugMode_inject_short_upstream.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_INJECT_SHORT_UPSTREAM
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMDebugMode_inject_short_upstream_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Test command. Inject short upstream message into the dSM to stimulate actions.
 * 
 * 
 * Request callback function prototype for call #dSMDebugMode_inject_short_upstream.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_INJECT_SHORT_UPSTREAM
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Source Source device ID.
 * @param [in] Circuit Circuit ID.
 * @param [in] Key Key number
 * @param [in] Click Click type
 * @param [in] Sensor Sensor flag. 0=button message, 1=sensor message.
 * @param [in] Resend Resend flag. 0=message is first, 1=message is repeat.
 * @param [in] Quality Reception quality [0..62].
 * @param [in] Flags 0=Rx in pos half-wave; 1=Rx in neg half-wave.
 */
typedef void (*dSMDebugMode_inject_short_upstream_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t Source, uint8_t Circuit, uint8_t Key, uint8_t Click, uint8_t Sensor, uint8_t Resend, uint8_t Quality, uint8_t Flags);

/**
 * Test command. Inject long upstream message into the dSM to stimulate actions.
 * 
 * 
 * This call has a timeout of 5 seconds.
 *
 * To receive asynchronous responses to this call (e.g. when addressing broadcast) register the #dSMDebugMode_inject_long_upstream_response_callback_t callback.
 * To receive this request from other bus members register the #dSMDebugMode_inject_long_upstream_request_callback_t callback.
 *
 * @param [in] handle Handle to the library instance
 * @param [in] dSMdSUID Destination dSM of the call
 * @param [in] Source Source device ID.
 * @param [in] Circuit Circuit ID.
 * @param [in] Mainqualifier Message mainqualifier.
 * @param [in] Subqualifier Message subqualifier.
 * @param [in] Data Message data. Width depending on mainqualifier.
 * @param [in] Quality Reception quality [0..62].
 * @param [in] Flags 0=Rx in pos half-wave; 1=Rx in neg half-wave.
 * @return 0: success (return parameters are valid); <0: Library error; >0: dSM error code
 */
int dSMDebugMode_inject_long_upstream(DsmApiHandle_t handle, dsuid_t dSMdSUID, uint16_t Source, uint8_t Circuit, uint8_t Mainqualifier, uint8_t Subqualifier, uint32_t Data, uint8_t Quality, uint8_t Flags);

/**
 * Test command. Inject long upstream message into the dSM to stimulate actions.
 * 
 * 
 * Response callback function prototype for call #dSMDebugMode_inject_long_upstream.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_RESPONSE, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_INJECT_LONG_UPSTREAM
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * 
 */
typedef void (*dSMDebugMode_inject_long_upstream_response_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId);

/**
 * Test command. Inject long upstream message into the dSM to stimulate actions.
 * 
 * 
 * Request callback function prototype for call #dSMDebugMode_inject_long_upstream.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_REQUEST, MessageId = #DSM_DEBUG_MODE and ModifierId = #DSM_DEBUG_MODE_INJECT_LONG_UPSTREAM
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Source Source device ID.
 * @param [in] Circuit Circuit ID.
 * @param [in] Mainqualifier Message mainqualifier.
 * @param [in] Subqualifier Message subqualifier.
 * @param [in] Data Message data. Width depending on mainqualifier.
 * @param [in] Quality Reception quality [0..62].
 * @param [in] Flags 0=Rx in pos half-wave; 1=Rx in neg half-wave.
 */
typedef void (*dSMDebugMode_inject_long_upstream_request_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t Source, uint8_t Circuit, uint8_t Mainqualifier, uint8_t Subqualifier, uint32_t Data, uint8_t Quality, uint8_t Flags);



/**
 * Packet data. Contains the information of a short upstream message.
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_COMMUNICATION_LOG and ModifierId = #EVENT_COMMUNICATION_LOG_UPSTREAM_SHORT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId DeviceId of the sending device.
 * @param [in] CircuitId CircuitId
 * @param [in] Resend 1=Resend
 * @param [in] Sensor 0=Button; 1=Sensor
 * @param [in] Key Button number.
 * @param [in] Click Click type.
 * @param [in] Quality Reception quality [0..64].
 * @param [in] Flags 0=Rx in pos half-wave; 1=Rx in neg half-wave.
 * @param [in] Crosstalk 0=packet was accepted, 1=packet was crosstalk.
 */
typedef void (*EventCommunicationLog_upstream_short_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t CircuitId, uint8_t Resend, uint8_t Sensor, uint8_t Key, uint8_t Click, uint8_t Quality, uint8_t Flags, uint8_t Crosstalk);

/**
 * Packet data. Contains the information of a long upstream message.
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_COMMUNICATION_LOG and ModifierId = #EVENT_COMMUNICATION_LOG_UPSTREAM_LONG
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] DeviceId DeviceId of the sending device.
 * @param [in] CircuitId CircuitId
 * @param [in] Mainqualifier 
 * @param [in] Subqualifier 
 * @param [in] Data Payload data.
 * @param [in] Quality Reception quality [0..64].
 * @param [in] Flags 0=Rx in pos half-wave; 1=Rx in neg half-wave.
 * @param [in] Crosstalk 0=packet was accepted, 1=packet was crosstalk.
 */
typedef void (*EventCommunicationLog_upstream_long_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint16_t DeviceId, uint8_t CircuitId, uint8_t Mainqualifier, uint8_t Subqualifier, uint32_t Data, uint8_t Quality, uint8_t Flags, uint8_t Crosstalk);

/**
 * Packet data. Contains the information of a short downstream message.
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_COMMUNICATION_LOG and ModifierId = #EVENT_COMMUNICATION_LOG_DOWNSTREAM_SHORT
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Command Message content.
 */
typedef void (*EventCommunicationLog_downstream_short_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Command);

/**
 * Packet data. Contains the information of a long downstream message with a 16-bit parameter.
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_COMMUNICATION_LOG and ModifierId = #EVENT_COMMUNICATION_LOG_DOWNSTREAM_LONG_16BIT_PARAMETER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Command Message command.
 * @param [in] Data Parameter data.
 */
typedef void (*EventCommunicationLog_downstream_long_16bit_parameter_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Command, uint16_t Data);

/**
 * Packet data. Contains the information of a long downstream message with a 8-bit parameter.
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_COMMUNICATION_LOG and ModifierId = #EVENT_COMMUNICATION_LOG_DOWNSTREAM_LONG_8BIT_PARAMETER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Command Message command.
 * @param [in] Data Parameter data.
 */
typedef void (*EventCommunicationLog_downstream_long_8bit_parameter_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Command, uint8_t Data);

/**
 * Packet data. Contains the information of a long downstream message with no parameter.
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_COMMUNICATION_LOG and ModifierId = #EVENT_COMMUNICATION_LOG_DOWNSTREAM_LONG_NO_PARAMETER
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Command Message command.
 */
typedef void (*EventCommunicationLog_downstream_long_no_parameter_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Command);

/**
 * Debug Data from DSP. 
 * 
 * 
 * Event callback function prototype.
 * 
 * To register this callback function, call the #DsmApiSetCallback function
 * with MessageType = #DS485_CONTAINER_EVENT, MessageId = #EVENT_DSP_DEBUG_DATA and ModifierId = #0
 *
 * @param [in] error Error result of the (potential) previous call.
 * @param [in] arg User data
 * @param [in] sourceId Source address of the call
 * @param [in] destinationId Destination address of the call
 * @param [in] Length 
 * @param [in] Data 
 */
typedef void (*EventDspDebugData_event_callback_t)(uint8_t error_code, void *arg, dsuid_t sourceId, dsuid_t destinationId, uint8_t Length, const uint8_t *Data);

/** @} */
#ifdef __cplusplus
}
#endif

#endif
